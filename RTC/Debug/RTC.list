
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003804  08003804  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003804  08003804  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800380c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200000dc  080038e8  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080038e8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000648f  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa0  00000000  00000000  000265d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00028578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b2  00000000  00000000  00028d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a8f  00000000  00000000  00029312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009937  00000000  00000000  00040da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083852  00000000  00000000  0004a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000216c  00000000  00000000  000cdf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d0098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003700 	.word	0x08003700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08003700 	.word	0x08003700

0800014c <MGPIO_voidInitPortPin>:

static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode);


void MGPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	791b      	ldrb	r3, [r3, #4]
 8000158:	73fb      	strb	r3, [r7, #15]
	uint8_t Copy_u8Mode = _gpio->GPIO_PinMode;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	795b      	ldrb	r3, [r3, #5]
 800015e:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000160:	7bfb      	ldrb	r3, [r7, #15]
 8000162:	2b0f      	cmp	r3, #15
 8000164:	d80d      	bhi.n	8000182 <MGPIO_voidInitPortPin+0x36>
	{
		return;
	}
	MGPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	7bba      	ldrb	r2, [r7, #14]
 800016c:	7bf9      	ldrb	r1, [r7, #15]
 800016e:	4618      	mov	r0, r3
 8000170:	f000 f80b 	bl	800018a <MGPIO_voidConfgPin_Mode>
	MGPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	799b      	ldrb	r3, [r3, #6]
 8000178:	4619      	mov	r1, r3
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f000 f84a 	bl	8000214 <MGPIO_voidWritePortPin>
 8000180:	e000      	b.n	8000184 <MGPIO_voidInitPortPin+0x38>
		return;
 8000182:	bf00      	nop
}
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <MGPIO_voidConfgPin_Mode>:


static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode)
{
 800018a:	b480      	push	{r7}
 800018c:	b083      	sub	sp, #12
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	2b0f      	cmp	r3, #15
 800019e:	d834      	bhi.n	800020a <MGPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	d815      	bhi.n	80001d2 <MGPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	78fa      	ldrb	r2, [r7, #3]
 80001ac:	0092      	lsls	r2, r2, #2
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	43d2      	mvns	r2, r2
 80001b6:	401a      	ands	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	78b9      	ldrb	r1, [r7, #2]
 80001c2:	78fa      	ldrb	r2, [r7, #3]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ca:	431a      	orrs	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e01c      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001d2:	78fb      	ldrb	r3, [r7, #3]
 80001d4:	2b0f      	cmp	r3, #15
 80001d6:	d819      	bhi.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	3b08      	subs	r3, #8
 80001dc:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	78fa      	ldrb	r2, [r7, #3]
 80001e4:	0092      	lsls	r2, r2, #2
 80001e6:	210f      	movs	r1, #15
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	401a      	ands	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	78b9      	ldrb	r1, [r7, #2]
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	e000      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
		return;
 800020a:	bf00      	nop
	}
}
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <MGPIO_voidWritePortPin>:



void MGPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8_t Copy_u8Val)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	791b      	ldrb	r3, [r3, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d816      	bhi.n	8000256 <MGPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d109      	bne.n	8000242 <MGPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	2301      	movs	r3, #1
 8000236:	fa03 f202 	lsl.w	r2, r3, r2
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	611a      	str	r2, [r3, #16]
 8000240:	e00a      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	461a      	mov	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	fa03 f202 	lsl.w	r2, r3, r2
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	e000      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
		return;
 8000256:	bf00      	nop
	}
}
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <MGPIO_u8ReadPortPin>:


uint8_t MGPIO_u8ReadPortPin(GPIO_ConfigType *_gpio)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if(_gpio->GPIO_PinNumber > 15)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	791b      	ldrb	r3, [r3, #4]
 800026c:	2b0f      	cmp	r3, #15
 800026e:	d901      	bls.n	8000274 <MGPIO_u8ReadPortPin+0x14>
	{
		return 0;
 8000270:	2300      	movs	r3, #0
 8000272:	e009      	b.n	8000288 <MGPIO_u8ReadPortPin+0x28>
	}

	return GET_BIT(_gpio->GPIOx->IDR , _gpio->GPIO_PinNumber);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	7912      	ldrb	r2, [r2, #4]
 800027e:	40d3      	lsrs	r3, r2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <read_keypad>:
	}
}


char read_keypad (ST_Keypad_t *_keypad_obj)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint8_t value = NOTPRESSED;
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	73bb      	strb	r3, [r7, #14]
 80002a4:	e043      	b.n	800032e <read_keypad+0x9a>
	{
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	737b      	strb	r3, [r7, #13]
 80002aa:	e00a      	b.n	80002c2 <read_keypad+0x2e>
		{
			MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[counter]), GPIO_HIGH);
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffac 	bl	8000214 <MGPIO_voidWritePortPin>
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002bc:	7b7b      	ldrb	r3, [r7, #13]
 80002be:	3301      	adds	r3, #1
 80002c0:	737b      	strb	r3, [r7, #13]
 80002c2:	7b7b      	ldrb	r3, [r7, #13]
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d9f1      	bls.n	80002ac <read_keypad+0x18>
		}

		MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[rows_counter]), GPIO_LOW);
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff9e 	bl	8000214 <MGPIO_voidWritePortPin>

		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80002d8:	2300      	movs	r3, #0
 80002da:	733b      	strb	r3, [r7, #12]
 80002dc:	e021      	b.n	8000322 <read_keypad+0x8e>
		{
			if( GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])))
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	3304      	adds	r3, #4
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffb9 	bl	8000260 <MGPIO_u8ReadPortPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d113      	bne.n	800031c <read_keypad+0x88>
			{
				while (GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])));
 80002f4:	bf00      	nop
 80002f6:	7b3b      	ldrb	r3, [r7, #12]
 80002f8:	3304      	adds	r3, #4
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffad 	bl	8000260 <MGPIO_u8ReadPortPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f4      	beq.n	80002f6 <read_keypad+0x62>
				value = btn_values[rows_counter][columns_counter];
 800030c:	7bba      	ldrb	r2, [r7, #14]
 800030e:	7b3b      	ldrb	r3, [r7, #12]
 8000310:	490b      	ldr	r1, [pc, #44]	; (8000340 <read_keypad+0xac>)
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	440a      	add	r2, r1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 800031c:	7b3b      	ldrb	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	733b      	strb	r3, [r7, #12]
 8000322:	7b3b      	ldrb	r3, [r7, #12]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d9da      	bls.n	80002de <read_keypad+0x4a>
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	3301      	adds	r3, #1
 800032c:	73bb      	strb	r3, [r7, #14]
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d9b8      	bls.n	80002a6 <read_keypad+0x12>
			}
		}
	}
	return value;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	080037a8 	.word	0x080037a8

08000344 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t l_data_pins_counter = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d05e      	beq.n	8000414 <lcd_4bit_intialize+0xd0>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2202      	movs	r2, #2
 800035a:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2202      	movs	r2, #2
 8000360:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2202      	movs	r2, #2
 8000366:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	759a      	strb	r2, [r3, #22]

		MGPIO_voidInitPortPin(&(lcd->lcd_rs));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_rw));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3308      	adds	r3, #8
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff fee0 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_en));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3310      	adds	r3, #16
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fedb 	bl	800014c <MGPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e018      	b.n	80003ce <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	3303      	adds	r3, #3
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	2202      	movs	r2, #2
 80003a8:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	3303      	adds	r3, #3
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	4413      	add	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	3303      	adds	r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff fec2 	bl	800014c <MGPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3301      	adds	r3, #1
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d9e3      	bls.n	800039c <lcd_4bit_intialize+0x58>
		}

		HAL_Delay(20);
 80003d4:	2014      	movs	r0, #20
 80003d6:	f000 fe51 	bl	800107c <HAL_Delay>
		lcd_4bit_send_command(lcd, 0x33);
 80003da:	2133      	movs	r1, #51	; 0x33
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f81d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 80003e2:	2132      	movs	r1, #50	; 0x32
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f819 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 80003ea:	2128      	movs	r1, #40	; 0x28
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 f815 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 80003f2:	210c      	movs	r1, #12
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f811 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 80003fa:	2106      	movs	r1, #6
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f80d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f809 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 800040a:	2101      	movs	r1, #1
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f805 	bl	800041c <lcd_4bit_send_command>
 8000412:	e000      	b.n	8000416 <lcd_4bit_intialize+0xd2>
		return;
 8000414:	bf00      	nop
	}
}
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8_t command)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01d      	beq.n	800046a <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feee 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3308      	adds	r3, #8
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fee8 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	091b      	lsrs	r3, r3, #4
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f8df 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f918 	bl	8000688 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	4619      	mov	r1, r3
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f8d7 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f910 	bl	8000688 <lcd_4bit_send_enable_signal>
 8000468:	e000      	b.n	800046c <lcd_4bit_send_command+0x50>
		return;
 800046a:	bf00      	nop
	}
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_4bit_send_char_data>:
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
	}
}

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8_t data)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d01d      	beq.n	80004c0 <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fec3 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3308      	adds	r3, #8
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff febd 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f8b4 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f8ed 	bl	8000688 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8ac 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f8e5 	bl	8000688 <lcd_4bit_send_enable_signal>
 80004be:	e000      	b.n	80004c2 <lcd_4bit_send_char_data+0x50>
		return;
 80004c0:	bf00      	nop
	}
}
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	4608      	mov	r0, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	70fb      	strb	r3, [r7, #3]
 80004da:	460b      	mov	r3, r1
 80004dc:	70bb      	strb	r3, [r7, #2]
 80004de:	4613      	mov	r3, r2
 80004e0:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80004e8:	78ba      	ldrb	r2, [r7, #2]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8f2 	bl	80006d8 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 80004f4:	787b      	ldrb	r3, [r7, #1]
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ffba 	bl	8000472 <lcd_4bit_send_char_data>
 80004fe:	e000      	b.n	8000502 <lcd_4bit_send_char_data_pos+0x3a>
		return;
 8000500:	bf00      	nop
	}
}
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	72fb      	strb	r3, [r7, #11]
 8000516:	4613      	mov	r3, r2
 8000518:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 8000520:	7aba      	ldrb	r2, [r7, #10]
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	4619      	mov	r1, r3
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f000 f8d6 	bl	80006d8 <lcd_4bit_set_cursor>
		while(*str)
 800052c:	e007      	b.n	800053e <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff ff9a 	bl	8000472 <lcd_4bit_send_char_data>
		while(*str)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f3      	bne.n	800052e <lcd_4bit_send_string_pos+0x26>
 8000546:	e000      	b.n	800054a <lcd_4bit_send_string_pos+0x42>
		return;
 8000548:	bf00      	nop
		}
	}
}
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <LCD_Clear>:


void LCD_Clear(chr_lcd_4bit_t *lcd)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	lcd_4bit_send_command(lcd, _LCD_CLEAR);
 8000558:	2101      	movs	r1, #1
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ff5e 	bl	800041c <lcd_4bit_send_command>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <LCD_WriteNumber_Position>:
	}
}


void LCD_WriteNumber_Position(uint32_t Number, uint8_t row, uint8_t column)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	70bb      	strb	r3, [r7, #2]
	column--;
 8000578:	78bb      	ldrb	r3, [r7, #2]
 800057a:	3b01      	subs	r3, #1
 800057c:	70bb      	strb	r3, [r7, #2]
	uint8_t i=0, arr[10], j;
 800057e:	2300      	movs	r3, #0
 8000580:	75fb      	strb	r3, [r7, #23]
	if(Number==0) lcd_4bit_send_char_data_pos(&lcd_1, row, column, '0');
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d121      	bne.n	80005cc <LCD_WriteNumber_Position+0x64>
 8000588:	78ba      	ldrb	r2, [r7, #2]
 800058a:	78f9      	ldrb	r1, [r7, #3]
 800058c:	2330      	movs	r3, #48	; 0x30
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <LCD_WriteNumber_Position+0xa0>)
 8000590:	f7ff ff9a 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
		{
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
		}
	}
}
 8000594:	e034      	b.n	8000600 <LCD_WriteNumber_Position+0x98>
			arr[i]= Number%10 +'0';
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <LCD_WriteNumber_Position+0xa4>)
 800059a:	fba3 2301 	umull	r2, r3, r3, r1
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	4613      	mov	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	1aca      	subs	r2, r1, r3
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3230      	adds	r2, #48	; 0x30
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	3318      	adds	r3, #24
 80005b4:	443b      	add	r3, r7
 80005b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			Number /= 10;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <LCD_WriteNumber_Position+0xa4>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
			i++;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	3301      	adds	r3, #1
 80005ca:	75fb      	strb	r3, [r7, #23]
		while(Number)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1e1      	bne.n	8000596 <LCD_WriteNumber_Position+0x2e>
		for(j=i ; j>0 ;j--)
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	75bb      	strb	r3, [r7, #22]
 80005d6:	e010      	b.n	80005fa <LCD_WriteNumber_Position+0x92>
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	3301      	adds	r3, #1
 80005dc:	70bb      	strb	r3, [r7, #2]
 80005de:	7dbb      	ldrb	r3, [r7, #22]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	3318      	adds	r3, #24
 80005e4:	443b      	add	r3, r7
 80005e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005ea:	78ba      	ldrb	r2, [r7, #2]
 80005ec:	78f9      	ldrb	r1, [r7, #3]
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <LCD_WriteNumber_Position+0xa0>)
 80005f0:	f7ff ff6a 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	75bb      	strb	r3, [r7, #22]
 80005fa:	7dbb      	ldrb	r3, [r7, #22]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1eb      	bne.n	80005d8 <LCD_WriteNumber_Position+0x70>
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000040 	.word	0x20000040
 800060c:	cccccccd 	.word	0xcccccccd

08000610 <lcd_send_4bits>:




static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8_t _data_command)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	MGPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8_t)0x01);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0218 	add.w	r2, r3, #24
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f7ff fdf1 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8_t)0x01);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f103 0220 	add.w	r2, r3, #32
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4610      	mov	r0, r2
 8000648:	f7ff fde4 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8_t)0x01);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	089b      	lsrs	r3, r3, #2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f7ff fdd7 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8_t)0x01);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	4610      	mov	r0, r2
 800067c:	f7ff fdca 	bl	8000214 <MGPIO_voidWritePortPin>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3310      	adds	r3, #16
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdbc 	bl	8000214 <MGPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8_t i=0 ; i<10 ; i++);
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e002      	b.n	80006a8 <lcd_4bit_send_enable_signal+0x20>
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	d9f9      	bls.n	80006a2 <lcd_4bit_send_enable_signal+0x1a>
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3310      	adds	r3, #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fdad 	bl	8000214 <MGPIO_voidWritePortPin>
	for(uint16_t i=0 ; i<2000 ; i++);
 80006ba:	2300      	movs	r3, #0
 80006bc:	81bb      	strh	r3, [r7, #12]
 80006be:	e002      	b.n	80006c6 <lcd_4bit_send_enable_signal+0x3e>
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	81bb      	strh	r3, [r7, #12]
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006cc:	d3f8      	bcc.n	80006c0 <lcd_4bit_send_enable_signal+0x38>
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
 80006e4:	4613      	mov	r3, r2
 80006e6:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d82a      	bhi.n	800074c <lcd_4bit_set_cursor+0x74>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <lcd_4bit_set_cursor+0x24>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	0800071d 	.word	0x0800071d
 8000704:	0800072d 	.word	0x0800072d
 8000708:	0800073d 	.word	0x0800073d
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	3b80      	subs	r3, #128	; 0x80
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff fe81 	bl	800041c <lcd_4bit_send_command>
        	break;
 800071a:	e017      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 800071c:	78bb      	ldrb	r3, [r7, #2]
 800071e:	3b40      	subs	r3, #64	; 0x40
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe79 	bl	800041c <lcd_4bit_send_command>
        	break;
 800072a:	e00f      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	3b6c      	subs	r3, #108	; 0x6c
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fe71 	bl	800041c <lcd_4bit_send_command>
        	break;
 800073a:	e007      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 800073c:	78bb      	ldrb	r3, [r7, #2]
 800073e:	3b2c      	subs	r3, #44	; 0x2c
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fe69 	bl	800041c <lcd_4bit_send_command>
        	break;
 800074a:	bf00      	nop

        default : ;
    }
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MRCC_voidPeripheralClockEnable>:
	}
}


void MRCC_voidPeripheralClockEnable(uint8_t Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d01c      	beq.n	80007a4 <MRCC_voidPeripheralClockEnable+0x50>
 800076a:	2b02      	cmp	r3, #2
 800076c:	dc25      	bgt.n	80007ba <MRCC_voidPeripheralClockEnable+0x66>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <MRCC_voidPeripheralClockEnable+0x24>
 8000772:	2b01      	cmp	r3, #1
 8000774:	d00b      	beq.n	800078e <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 8000776:	e020      	b.n	80007ba <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 8000788:	430b      	orrs	r3, r1
 800078a:	6153      	str	r3, [r2, #20]
		break;
 800078c:	e016      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	61d3      	str	r3, [r2, #28]
		break;
 80007a2:	e00b      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6193      	str	r3, [r2, #24]
		break;
 80007b8:	e000      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		break;
 80007ba:	bf00      	nop
	}
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xc0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xc0>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xc0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_GPIO_Init+0xc0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a23      	ldr	r2, [pc, #140]	; (800088c <MX_GPIO_Init+0xc0>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_GPIO_Init+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_GPIO_Init+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <MX_GPIO_Init+0xc0>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_GPIO_Init+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xc0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xc0>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xc0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000848:	f000 fea4 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800084c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000866:	f000 fd11 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800086a:	2378      	movs	r3, #120	; 0x78
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0xc8>)
 800087e:	f000 fd05 	bl	800128c <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <set_time>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

void set_time (void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = IntialHours;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <set_time+0x5c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = IntialMinuts;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <set_time+0x60>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = IntialSeconds;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <set_time+0x64>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	4810      	ldr	r0, [pc, #64]	; (8000900 <set_time+0x68>)
 80008be:	f001 fc9f 	bl	8002200 <HAL_RTC_SetTime>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80008c2:	2302      	movs	r3, #2
 80008c4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80008c6:	2308      	movs	r3, #8
 80008c8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 80008ca:	2312      	movs	r3, #18
 80008cc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2201      	movs	r2, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <set_time+0x68>)
 80008da:	f001 fe01 	bl	80024e0 <HAL_RTC_SetDate>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80008de:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80008e2:	2101      	movs	r1, #1
 80008e4:	4806      	ldr	r0, [pc, #24]	; (8000900 <set_time+0x68>)
 80008e6:	f002 fa3f 	bl	8002d68 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000118 	.word	0x20000118
 80008f8:	20000079 	.word	0x20000079
 80008fc:	2000007a 	.word	0x2000007a
 8000900:	20000130 	.word	0x20000130

08000904 <LcdUpdate>:


volatile int TotalCounts=0,FlagDetect=0;

void LcdUpdate()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	for(int i=0 ; i<2 ; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	e010      	b.n	8000932 <LcdUpdate+0x2e>
	{
		LCD_WriteNumber_Position(ArrayTimers[i], 1, ArrayPosition[i]);
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <LcdUpdate+0x40>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000918:	4618      	mov	r0, r3
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <LcdUpdate+0x44>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	2101      	movs	r1, #1
 8000928:	f7ff fe1e 	bl	8000568 <LCD_WriteNumber_Position>
	for(int i=0 ; i<2 ; i++)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	ddeb      	ble.n	8000910 <LcdUpdate+0xc>
	}
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000124 	.word	0x20000124
 8000948:	2000007c 	.word	0x2000007c

0800094c <MinDetect>:

void MinDetect()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	for(int i=0 ; i<2 ; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	e01f      	b.n	8000998 <MinDetect+0x4c>
	{
		if((ArrayCounter[i][1] -1 == CurrentSec) && FlagDetect==0)
 8000958:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <MinDetect+0xd0>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	885b      	ldrh	r3, [r3, #2]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MinDetect+0xd4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d112      	bne.n	8000992 <MinDetect+0x46>
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MinDetect+0xd8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10e      	bne.n	8000992 <MinDetect+0x46>
		{
			ArrayTimers[i]--;
 8000974:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <MinDetect+0xdc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097c:	3b01      	subs	r3, #1
 800097e:	b299      	uxth	r1, r3
 8000980:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <MinDetect+0xdc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlagDetect=1;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MinDetect+0xd8>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
			LcdUpdate();
 800098e:	f7ff ffb9 	bl	8000904 <LcdUpdate>
	for(int i=0 ; i<2 ; i++)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b01      	cmp	r3, #1
 800099c:	dddc      	ble.n	8000958 <MinDetect+0xc>
		}
	}

	if((ArrayCounter[0][1] == CurrentSec) || (ArrayCounter[1][1] == CurrentSec) || CurrentSec==1)
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MinDetect+0xd0>)
 80009a0:	885b      	ldrh	r3, [r3, #2]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MinDetect+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d00a      	beq.n	80009c2 <MinDetect+0x76>
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MinDetect+0xd0>)
 80009ae:	88db      	ldrh	r3, [r3, #6]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MinDetect+0xd4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d003      	beq.n	80009c2 <MinDetect+0x76>
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MinDetect+0xd4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d102      	bne.n	80009c8 <MinDetect+0x7c>
		FlagDetect=0;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MinDetect+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]

	if(CurrentSec == 59 && FlagDetect==0)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MinDetect+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b3b      	cmp	r3, #59	; 0x3b
 80009ce:	d112      	bne.n	80009f6 <MinDetect+0xaa>
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MinDetect+0xd8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10e      	bne.n	80009f6 <MinDetect+0xaa>
	{
		TotalCounts++;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MinDetect+0xe0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MinDetect+0xe0>)
 80009e0:	6013      	str	r3, [r2, #0]
		FlagDetect=1;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MinDetect+0xd8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
		LCD_WriteNumber_Position(TotalCounts,1,1);
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MinDetect+0xe0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fdb9 	bl	8000568 <LCD_WriteNumber_Position>
	}

	LCD_WriteNumber_Position(CurrentMin,1,5);
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MinDetect+0xe4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2205      	movs	r2, #5
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdb2 	bl	8000568 <LCD_WriteNumber_Position>
	LCD_WriteNumber_Position(CurrentSec,2,5);
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MinDetect+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2205      	movs	r2, #5
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fdab 	bl	8000568 <LCD_WriteNumber_Position>

	/* LCD Prnt */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000011c 	.word	0x2000011c
 8000a20:	20000110 	.word	0x20000110
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	20000124 	.word	0x20000124
 8000a2c:	20000128 	.word	0x20000128
 8000a30:	20000114 	.word	0x20000114

08000a34 <get_time>:

void get_time(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

   //Get the RTC current Time
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <get_time+0x68>)
 8000a42:	f001 fc75 	bl	8002330 <HAL_RTC_GetTime>

  // Get the RTC current Date
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <get_time+0x68>)
 8000a4e:	f001 fdfd 	bl	800264c <HAL_RTC_GetDate>

  CurrentSec = gTime.Seconds;
 8000a52:	78bb      	ldrb	r3, [r7, #2]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <get_time+0x6c>)
 8000a58:	601a      	str	r2, [r3, #0]
  CurrentMin = gTime.Minutes;
 8000a5a:	787b      	ldrb	r3, [r7, #1]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <get_time+0x70>)
 8000a60:	601a      	str	r2, [r3, #0]

   //Display time Format: hh:mm:ss
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000a62:	783b      	ldrb	r3, [r7, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	787b      	ldrb	r3, [r7, #1]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	78bb      	ldrb	r3, [r7, #2]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <get_time+0x74>)
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <get_time+0x78>)
 8000a74:	f002 f992 	bl	8002d9c <siprintf>

  // Display date Format: mm-dd-yy
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	4909      	ldr	r1, [pc, #36]	; (8000ab0 <get_time+0x7c>)
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <get_time+0x80>)
 8000a8e:	f002 f985 	bl	8002d9c <siprintf>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000130 	.word	0x20000130
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	20000114 	.word	0x20000114
 8000aa8:	08003718 	.word	0x08003718
 8000aac:	200000f8 	.word	0x200000f8
 8000ab0:	08003728 	.word	0x08003728
 8000ab4:	20000104 	.word	0x20000104

08000ab8 <GetKeypadValue>:

uint16_t GetKeypadValue()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	uint16_t retVal = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	keypadVal = NOTPRESSED;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <GetKeypadValue+0x74>)
 8000ac4:	22ff      	movs	r2, #255	; 0xff
 8000ac6:	701a      	strb	r2, [r3, #0]

	while(keypadVal != '*')
 8000ac8:	e024      	b.n	8000b14 <GetKeypadValue+0x5c>
	{
		keypadVal = read_keypad(&keypad_1);
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <GetKeypadValue+0x78>)
 8000acc:	f7ff fbe2 	bl	8000294 <read_keypad>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <GetKeypadValue+0x74>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		if(keypadVal>='0' && keypadVal<='9')
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <GetKeypadValue+0x74>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b2f      	cmp	r3, #47	; 0x2f
 8000ade:	d919      	bls.n	8000b14 <GetKeypadValue+0x5c>
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <GetKeypadValue+0x74>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b39      	cmp	r3, #57	; 0x39
 8000ae6:	d815      	bhi.n	8000b14 <GetKeypadValue+0x5c>
		{
			lcd_4bit_send_char_data(&lcd_1, keypadVal);
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <GetKeypadValue+0x74>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <GetKeypadValue+0x7c>)
 8000af0:	f7ff fcbf 	bl	8000472 <lcd_4bit_send_char_data>
			retVal = ((keypadVal - '0') + (retVal * 10));
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <GetKeypadValue+0x74>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	4619      	mov	r1, r3
 8000afe:	0089      	lsls	r1, r1, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3b30      	subs	r3, #48	; 0x30
 8000b0c:	80fb      	strh	r3, [r7, #6]
			keypadVal = NOTPRESSED;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <GetKeypadValue+0x74>)
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	701a      	strb	r2, [r3, #0]
	while(keypadVal != '*')
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <GetKeypadValue+0x74>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b2a      	cmp	r3, #42	; 0x2a
 8000b1a:	d1d6      	bne.n	8000aca <GetKeypadValue+0x12>
		}
	}

	keypadVal = NOTPRESSED;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <GetKeypadValue+0x74>)
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000b22:	88fb      	ldrh	r3, [r7, #6]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000078 	.word	0x20000078
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000040 	.word	0x20000040

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 fa3b 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f895 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f7ff fe41 	bl	80007cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000b4a:	f000 f8f1 	bl	8000d30 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000b4e:	2102      	movs	r1, #2
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fdff 	bl	8000754 <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000b56:	2103      	movs	r1, #3
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fdfb 	bl	8000754 <MRCC_voidPeripheralClockEnable>

	lcd_4bit_intialize(&lcd_1);
 8000b5e:	483a      	ldr	r0, [pc, #232]	; (8000c48 <main+0x110>)
 8000b60:	f7ff fbf0 	bl	8000344 <lcd_4bit_intialize>

	LCD_Clear(&lcd_1);
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <main+0x110>)
 8000b66:	f7ff fcf3 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "1st Mins :");
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <main+0x114>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4835      	ldr	r0, [pc, #212]	; (8000c48 <main+0x110>)
 8000b72:	f7ff fcc9 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[0][0] = GetKeypadValue();
 8000b76:	f7ff ff9f 	bl	8000ab8 <GetKeypadValue>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <main+0x118>)
 8000b80:	801a      	strh	r2, [r3, #0]

	LCD_Clear(&lcd_1);
 8000b82:	4831      	ldr	r0, [pc, #196]	; (8000c48 <main+0x110>)
 8000b84:	f7ff fce4 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "1st Secs :");
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <main+0x11c>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	482e      	ldr	r0, [pc, #184]	; (8000c48 <main+0x110>)
 8000b90:	f7ff fcba 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[0][1] = GetKeypadValue();
 8000b94:	f7ff ff90 	bl	8000ab8 <GetKeypadValue>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <main+0x118>)
 8000b9e:	805a      	strh	r2, [r3, #2]

	LCD_Clear(&lcd_1);
 8000ba0:	4829      	ldr	r0, [pc, #164]	; (8000c48 <main+0x110>)
 8000ba2:	f7ff fcd5 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "2nd Mins :");
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <main+0x120>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	2101      	movs	r1, #1
 8000bac:	4826      	ldr	r0, [pc, #152]	; (8000c48 <main+0x110>)
 8000bae:	f7ff fcab 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[1][0] = GetKeypadValue();
 8000bb2:	f7ff ff81 	bl	8000ab8 <GetKeypadValue>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <main+0x118>)
 8000bbc:	809a      	strh	r2, [r3, #4]

	LCD_Clear(&lcd_1);
 8000bbe:	4822      	ldr	r0, [pc, #136]	; (8000c48 <main+0x110>)
 8000bc0:	f7ff fcc6 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "2nd Secs :");
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <main+0x124>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	2101      	movs	r1, #1
 8000bca:	481f      	ldr	r0, [pc, #124]	; (8000c48 <main+0x110>)
 8000bcc:	f7ff fc9c 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[1][1] = GetKeypadValue();
 8000bd0:	f7ff ff72 	bl	8000ab8 <GetKeypadValue>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <main+0x118>)
 8000bda:	80da      	strh	r2, [r3, #6]


	LCD_Clear(&lcd_1);
 8000bdc:	481a      	ldr	r0, [pc, #104]	; (8000c48 <main+0x110>)
 8000bde:	f7ff fcb7 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "Intial Timer 1:");
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <main+0x128>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	2101      	movs	r1, #1
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <main+0x110>)
 8000bea:	f7ff fc8d 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayTimers[0] = GetKeypadValue();
 8000bee:	f7ff ff63 	bl	8000ab8 <GetKeypadValue>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <main+0x12c>)
 8000bf8:	801a      	strh	r2, [r3, #0]

	LCD_Clear(&lcd_1);
 8000bfa:	4813      	ldr	r0, [pc, #76]	; (8000c48 <main+0x110>)
 8000bfc:	f7ff fca8 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "Intial Timer 2:");
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <main+0x130>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	2101      	movs	r1, #1
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <main+0x110>)
 8000c08:	f7ff fc7e 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayTimers[1] = GetKeypadValue();
 8000c0c:	f7ff ff54 	bl	8000ab8 <GetKeypadValue>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <main+0x12c>)
 8000c16:	805a      	strh	r2, [r3, #2]


	LCD_Clear(&lcd_1);
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <main+0x110>)
 8000c1a:	f7ff fc99 	bl	8000550 <LCD_Clear>
  set_time();
 8000c1e:	f7ff fe3b 	bl	8000898 <set_time>
  LcdUpdate();
 8000c22:	f7ff fe6f 	bl	8000904 <LcdUpdate>
  LCD_WriteNumber_Position(TotalCounts,1,1);
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <main+0x134>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc9a 	bl	8000568 <LCD_WriteNumber_Position>
  uint8_t k=22;
 8000c34:	2316      	movs	r3, #22
 8000c36:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 get_time();
 8000c38:	f7ff fefc 	bl	8000a34 <get_time>
	 MinDetect();
 8000c3c:	f7ff fe86 	bl	800094c <MinDetect>
	 HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f000 fa1b 	bl	800107c <HAL_Delay>
	 get_time();
 8000c46:	e7f7      	b.n	8000c38 <main+0x100>
 8000c48:	20000040 	.word	0x20000040
 8000c4c:	08003738 	.word	0x08003738
 8000c50:	2000011c 	.word	0x2000011c
 8000c54:	08003744 	.word	0x08003744
 8000c58:	08003750 	.word	0x08003750
 8000c5c:	0800375c 	.word	0x0800375c
 8000c60:	08003768 	.word	0x08003768
 8000c64:	20000124 	.word	0x20000124
 8000c68:	08003778 	.word	0x08003778
 8000c6c:	20000128 	.word	0x20000128

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	; 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 f8ac 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fc88 	bl	80015dc <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cd2:	f000 f828 	bl	8000d26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fef4 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cfe:	f000 f812 	bl	8000d26 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d02:	2301      	movs	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f86a 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d1a:	f000 f804 	bl	8000d26 <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
}
 8000d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <Error_Handler+0x8>

08000d30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	801a      	strh	r2, [r3, #0]
 8000d40:	460a      	mov	r2, r1
 8000d42:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000d52:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <MX_RTC_Init+0xc4>)
 8000d54:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d64:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d66:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000d68:	f001 f9b4 	bl	80020d4 <HAL_RTC_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000d72:	f7ff ffd8 	bl	8000d26 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000d8c:	f001 fa38 	bl	8002200 <HAL_RTC_SetTime>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f7ff ffc6 	bl	8000d26 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	480f      	ldr	r0, [pc, #60]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000db4:	f001 fb94 	bl	80024e0 <HAL_RTC_SetDate>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dbe:	f7ff ffb2 	bl	8000d26 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_RTC_Init+0xc0>)
 8000dda:	f001 fc8b 	bl	80026f4 <HAL_RTC_SetAlarm>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000de4:	f7ff ff9f 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000130 	.word	0x20000130
 8000df4:	40002800 	.word	0x40002800

08000df8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_RTC_MspInit+0x3c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d110      	bne.n	8000e2c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e0a:	f000 fbdb 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RTC_MspInit+0x40>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_RTC_MspInit+0x40>)
 8000e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_RTC_MspInit+0x40>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_RTC_MspInit+0x44>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40002800 	.word	0x40002800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	4242043c 	.word	0x4242043c

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f8ab 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f001 ff62 	bl	8002dec <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20005000 	.word	0x20005000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000144 	.word	0x20000144
 8000f5c:	20000298 	.word	0x20000298

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff ffe5 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f001 ff2f 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fdcd 	bl	8000b38 <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000fa8:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 8000fac:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000fb0:	20000294 	.word	0x20000294

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f92b 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff ff34 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f935 	bl	8001272 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f90b 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000080 	.word	0x20000080
 800103c:	20000088 	.word	0x20000088
 8001040:	20000084 	.word	0x20000084

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000088 	.word	0x20000088
 8001064:	20000148 	.word	0x20000148

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000148 	.word	0x20000148

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000088 	.word	0x20000088

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff90 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff49 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e169      	b.n	8001574 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a0:	2201      	movs	r2, #1
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8158 	bne.w	800156e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a9a      	ldr	r2, [pc, #616]	; (800152c <HAL_GPIO_Init+0x2a0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d05e      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012c8:	4a98      	ldr	r2, [pc, #608]	; (800152c <HAL_GPIO_Init+0x2a0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d875      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012ce:	4a98      	ldr	r2, [pc, #608]	; (8001530 <HAL_GPIO_Init+0x2a4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d058      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012d4:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_GPIO_Init+0x2a4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d86f      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012da:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_GPIO_Init+0x2a8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d052      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012e0:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_GPIO_Init+0x2a8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d869      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012e6:	4a94      	ldr	r2, [pc, #592]	; (8001538 <HAL_GPIO_Init+0x2ac>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d04c      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012ec:	4a92      	ldr	r2, [pc, #584]	; (8001538 <HAL_GPIO_Init+0x2ac>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d863      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012f2:	4a92      	ldr	r2, [pc, #584]	; (800153c <HAL_GPIO_Init+0x2b0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d046      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012f8:	4a90      	ldr	r2, [pc, #576]	; (800153c <HAL_GPIO_Init+0x2b0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d85d      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d82a      	bhi.n	8001358 <HAL_GPIO_Init+0xcc>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d859      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <HAL_GPIO_Init+0x80>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	08001387 	.word	0x08001387
 8001310:	08001361 	.word	0x08001361
 8001314:	08001373 	.word	0x08001373
 8001318:	080013b5 	.word	0x080013b5
 800131c:	080013bb 	.word	0x080013bb
 8001320:	080013bb 	.word	0x080013bb
 8001324:	080013bb 	.word	0x080013bb
 8001328:	080013bb 	.word	0x080013bb
 800132c:	080013bb 	.word	0x080013bb
 8001330:	080013bb 	.word	0x080013bb
 8001334:	080013bb 	.word	0x080013bb
 8001338:	080013bb 	.word	0x080013bb
 800133c:	080013bb 	.word	0x080013bb
 8001340:	080013bb 	.word	0x080013bb
 8001344:	080013bb 	.word	0x080013bb
 8001348:	080013bb 	.word	0x080013bb
 800134c:	080013bb 	.word	0x080013bb
 8001350:	08001369 	.word	0x08001369
 8001354:	0800137d 	.word	0x0800137d
 8001358:	4a79      	ldr	r2, [pc, #484]	; (8001540 <HAL_GPIO_Init+0x2b4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135e:	e02c      	b.n	80013ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e029      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	3304      	adds	r3, #4
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e024      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	3308      	adds	r3, #8
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e01f      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	330c      	adds	r3, #12
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e01a      	b.n	80013bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138e:	2304      	movs	r3, #4
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e013      	b.n	80013bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	611a      	str	r2, [r3, #16]
          break;
 80013a6:	e009      	b.n	80013bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	615a      	str	r2, [r3, #20]
          break;
 80013b2:	e003      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x130>
          break;
 80013ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d801      	bhi.n	80013c6 <HAL_GPIO_Init+0x13a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d802      	bhi.n	80013d8 <HAL_GPIO_Init+0x14c>
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x152>
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	3b08      	subs	r3, #8
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	210f      	movs	r1, #15
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	6a39      	ldr	r1, [r7, #32]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80b1 	beq.w	800156e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a40      	ldr	r2, [pc, #256]	; (800154c <HAL_GPIO_Init+0x2c0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d013      	beq.n	8001478 <HAL_GPIO_Init+0x1ec>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00d      	beq.n	8001474 <HAL_GPIO_Init+0x1e8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_GPIO_Init+0x1e0>
 8001468:	2303      	movs	r3, #3
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 800146c:	2304      	movs	r3, #4
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001478:	2300      	movs	r3, #0
 800147a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148a:	492f      	ldr	r1, [pc, #188]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	492c      	ldr	r1, [pc, #176]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4928      	ldr	r1, [pc, #160]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	491e      	ldr	r1, [pc, #120]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	4918      	ldr	r1, [pc, #96]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_GPIO_Init+0x2d0>)
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	4914      	ldr	r1, [pc, #80]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800150c:	4013      	ands	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d021      	beq.n	8001560 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_GPIO_Init+0x2d0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	60cb      	str	r3, [r1, #12]
 8001528:	e021      	b.n	800156e <HAL_GPIO_Init+0x2e2>
 800152a:	bf00      	nop
 800152c:	10320000 	.word	0x10320000
 8001530:	10310000 	.word	0x10310000
 8001534:	10220000 	.word	0x10220000
 8001538:	10210000 	.word	0x10210000
 800153c:	10120000 	.word	0x10120000
 8001540:	10110000 	.word	0x10110000
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	40010800 	.word	0x40010800
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40011000 	.word	0x40011000
 8001558:	40011400 	.word	0x40011400
 800155c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	43db      	mvns	r3, r3
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <HAL_GPIO_Init+0x304>)
 800156a:	4013      	ands	r3, r2
 800156c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	3301      	adds	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f ae8e 	bne.w	80012a0 <HAL_GPIO_Init+0x14>
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	372c      	adds	r7, #44	; 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	420e0020 	.word	0x420e0020

080015dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e272      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8087 	beq.w	800170a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b04      	cmp	r3, #4
 8001606:	d00c      	beq.n	8001622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d112      	bne.n	800163a <HAL_RCC_OscConfig+0x5e>
 8001614:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d10b      	bne.n	800163a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001622:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d06c      	beq.n	8001708 <HAL_RCC_OscConfig+0x12c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d168      	bne.n	8001708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e24c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x76>
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a7f      	ldr	r2, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e02e      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x98>
 800165a:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b78      	ldr	r3, [pc, #480]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a77      	ldr	r2, [pc, #476]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0xbc>
 800167e:	4b72      	ldr	r3, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a71      	ldr	r2, [pc, #452]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001698:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6a      	ldr	r2, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fcd6 	bl	8001068 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcd2 	bl	8001068 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e200      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe4>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fcc2 	bl	8001068 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fcbe 	bl	8001068 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1ec      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x10c>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x18c>
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x176>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e1c0      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4939      	ldr	r1, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	e03a      	b.n	80017de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x270>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fc77 	bl	8001068 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fc73 	bl	8001068 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1a1      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x270>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc56 	bl	8001068 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fc52 	bl	8001068 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e180      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03a      	beq.n	8001860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d019      	beq.n	8001826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fc36 	bl	8001068 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fc32 	bl	8001068 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e160      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 fac4 	bl	8001dac <RCC_Delay>
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fc1c 	bl	8001068 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001832:	e00f      	b.n	8001854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fc18 	bl	8001068 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d908      	bls.n	8001854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e146      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	42420000 	.word	0x42420000
 8001850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e9      	bne.n	8001834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a6 	beq.w	80019ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a87      	ldr	r2, [pc, #540]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b82      	ldr	r3, [pc, #520]	; (8001aa4 <HAL_RCC_OscConfig+0x4c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x4c8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7e      	ldr	r2, [pc, #504]	; (8001aa4 <HAL_RCC_OscConfig+0x4c8>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fbd9 	bl	8001068 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fbd5 	bl	8001068 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e103      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x4c8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x312>
 80018e0:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e02d      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x334>
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a69      	ldr	r2, [pc, #420]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a66      	ldr	r2, [pc, #408]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	e01c      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x356>
 8001918:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a60      	ldr	r2, [pc, #384]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a5d      	ldr	r2, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 8001932:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a5a      	ldr	r2, [pc, #360]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a57      	ldr	r2, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d015      	beq.n	800197e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff fb89 	bl	8001068 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fb85 	bl	8001068 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0b1      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ee      	beq.n	800195a <HAL_RCC_OscConfig+0x37e>
 800197c:	e014      	b.n	80019a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb73 	bl	8001068 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff fb6f 	bl	8001068 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e09b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a3b      	ldr	r2, [pc, #236]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d061      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d146      	bne.n	8001a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x4cc>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fb43 	bl	8001068 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fb3f 	bl	8001068 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e06d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4921      	ldr	r1, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a19      	ldr	r1, [r3, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	430b      	orrs	r3, r1
 8001a32:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x4cc>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fb13 	bl	8001068 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff fb0f 	bl	8001068 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e03d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46a>
 8001a64:	e035      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fafc 	bl	8001068 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff faf8 	bl	8001068 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e026      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x498>
 8001a92:	e01e      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e019      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_OscConfig+0x500>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d0      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4965      	ldr	r1, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e073      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06b      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4936      	ldr	r1, [pc, #216]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fa4a 	bl	8001068 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fa46 	bl	8001068 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e053      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d210      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1cc>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9a8 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	080037b8 	.word	0x080037b8
 8001cac:	20000080 	.word	0x20000080
 8001cb0:	20000084 	.word	0x20000084

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cbc:	1d3c      	adds	r4, r7, #4
 8001cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc4:	f240 2301 	movw	r3, #513	; 0x201
 8001cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x46>
 8001cf2:	e02b      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf6:	623b      	str	r3, [r7, #32]
      break;
 8001cf8:	e02b      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3328      	adds	r3, #40	; 0x28
 8001d04:	443b      	add	r3, r7
 8001d06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d012      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	3328      	adds	r3, #40	; 0x28
 8001d22:	443b      	add	r3, r7
 8001d24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d2e:	fb03 f202 	mul.w	r2, r3, r2
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e004      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	623b      	str	r3, [r7, #32]
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d4e:	623b      	str	r3, [r7, #32]
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6a3b      	ldr	r3, [r7, #32]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	08003788 	.word	0x08003788
 8001d64:	40021000 	.word	0x40021000
 8001d68:	007a1200 	.word	0x007a1200
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000080 	.word	0x20000080

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d88:	f7ff fff2 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	080037c8 	.word	0x080037c8

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc8:	bf00      	nop
  }
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000080 	.word	0x20000080
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f90e 	bl	8001068 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7ff f90a 	bl	8001068 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e06d      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d027      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d014      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f8d9 	bl	8001068 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff f8d5 	bl	8001068 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e036      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4917      	ldr	r1, [pc, #92]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42420440 	.word	0x42420440

08001f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08d      	sub	sp, #52	; 0x34
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001f5e:	f107 040c 	add.w	r4, r7, #12
 8001f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f68:	f240 2301 	movw	r3, #513	; 0x201
 8001f6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	f200 808e 	bhi.w	80020ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d049      	beq.n	800202a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d079      	beq.n	8002090 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f9c:	e086      	b.n	80020ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07f      	beq.n	80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	3330      	adds	r3, #48	; 0x30
 8001fba:	443b      	add	r3, r7
 8001fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fc0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d017      	beq.n	8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	3330      	adds	r3, #48	; 0x30
 8001fd8:	443b      	add	r3, r7
 8001fda:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fea:	4a37      	ldr	r2, [pc, #220]	; (80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	e004      	b.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002012:	d102      	bne.n	800201a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002018:	e04a      	b.n	80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002028:	e042      	b.n	80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203a:	d108      	bne.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
 800204c:	e01f      	b.n	800208e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002058:	d109      	bne.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002066:	f649 4340 	movw	r3, #40000	; 0x9c40
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
 800206c:	e00f      	b.n	800208e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002078:	d11c      	bne.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002086:	f24f 4324 	movw	r3, #62500	; 0xf424
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800208c:	e012      	b.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800208e:	e011      	b.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002090:	f7ff fe78 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0b9b      	lsrs	r3, r3, #14
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	3301      	adds	r3, #1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020aa:	e004      	b.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020ac:	bf00      	nop
 80020ae:	e002      	b.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020b0:	bf00      	nop
 80020b2:	e000      	b.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020b4:	bf00      	nop
    }
  }
  return (frequency);
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3734      	adds	r7, #52	; 0x34
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	08003798 	.word	0x08003798
 80020c4:	40021000 	.word	0x40021000
 80020c8:	007a1200 	.word	0x007a1200
 80020cc:	003d0900 	.word	0x003d0900
 80020d0:	aaaaaaab 	.word	0xaaaaaaab

080020d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e084      	b.n	80021f4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7c5b      	ldrb	r3, [r3, #17]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fe7c 	bl	8000df8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fb8d 	bl	8002826 <HAL_RTC_WaitForSynchro>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e06b      	b.n	80021f4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fc46 	bl	80029ae <RTC_EnterInitMode>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e060      	b.n	80021f4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0207 	bic.w	r2, r2, #7
 8002140:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_RTC_Init+0x128>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_RTC_Init+0x128>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_RTC_Init+0x128>)
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4926      	ldr	r1, [pc, #152]	; (80021fc <HAL_RTC_Init+0x128>)
 8002164:	4313      	orrs	r3, r2
 8002166:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d003      	beq.n	800217a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e00e      	b.n	8002198 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff feea 	bl	8001f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002180:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e030      	b.n	80021f4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 010f 	bic.w	r1, r3, #15
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0c1a      	lsrs	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	b291      	uxth	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc1a 	bl	80029fe <RTC_ExitInitMode>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00c      	b.n	80021f4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40006c00 	.word	0x40006c00

08002200 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_RTC_SetTime+0x20>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e080      	b.n	8002326 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	7c1b      	ldrb	r3, [r3, #16]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_RTC_SetTime+0x30>
 800222c:	2302      	movs	r3, #2
 800222e:	e07a      	b.n	8002326 <HAL_RTC_SetTime+0x126>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2202      	movs	r2, #2
 800223a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800224c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	4619      	mov	r1, r3
 8002256:	460b      	mov	r3, r1
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a5b      	subs	r3, r3, r1
 800225c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800225e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e01e      	b.n	80022a8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fc0a 	bl	8002a88 <RTC_Bcd2ToByte>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800227c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fbff 	bl	8002a88 <RTC_Bcd2ToByte>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002296:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	789b      	ldrb	r3, [r3, #2]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fbf3 	bl	8002a88 <RTC_Bcd2ToByte>
 80022a2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80022a4:	4423      	add	r3, r4
 80022a6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022a8:	6979      	ldr	r1, [r7, #20]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fb18 	bl	80028e0 <RTC_WriteTimeCounter>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2204      	movs	r2, #4
 80022ba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e02f      	b.n	8002326 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0205 	bic.w	r2, r2, #5
 80022d4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fb29 	bl	800292e <RTC_ReadAlarmCounter>
 80022dc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d018      	beq.n	8002318 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d214      	bcs.n	8002318 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80022f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022f8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022fa:	6939      	ldr	r1, [r7, #16]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb2f 	bl	8002960 <RTC_WriteAlarmCounter>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2204      	movs	r2, #4
 800230c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e006      	b.n	8002326 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
	...

08002330 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_RTC_GetTime+0x28>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b5      	b.n	80024c8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0ac      	b.n	80024c8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa86 	bl	8002880 <RTC_ReadTimeCounter>
 8002374:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4a55      	ldr	r2, [pc, #340]	; (80024d0 <HAL_RTC_GetTime+0x1a0>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4b52      	ldr	r3, [pc, #328]	; (80024d0 <HAL_RTC_GetTime+0x1a0>)
 8002386:	fba3 1302 	umull	r1, r3, r3, r2
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <HAL_RTC_GetTime+0x1a4>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4a4a      	ldr	r2, [pc, #296]	; (80024d0 <HAL_RTC_GetTime+0x1a0>)
 80023a8:	fba2 1203 	umull	r1, r2, r2, r3
 80023ac:	0ad2      	lsrs	r2, r2, #11
 80023ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80023b2:	fb01 f202 	mul.w	r2, r1, r2
 80023b6:	1a9a      	subs	r2, r3, r2
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RTC_GetTime+0x1a4>)
 80023ba:	fba3 1302 	umull	r1, r3, r3, r2
 80023be:	0959      	lsrs	r1, r3, #5
 80023c0:	460b      	mov	r3, r1
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a5b      	subs	r3, r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	1ad1      	subs	r1, r2, r3
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b17      	cmp	r3, #23
 80023d4:	d955      	bls.n	8002482 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RTC_GetTime+0x1a8>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80023e2:	6939      	ldr	r1, [r7, #16]
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <HAL_RTC_GetTime+0x1a8>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	091a      	lsrs	r2, r3, #4
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1aca      	subs	r2, r1, r3
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa96 	bl	800292e <RTC_ReadAlarmCounter>
 8002402:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d008      	beq.n	800241e <HAL_RTC_GetTime+0xee>
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	429a      	cmp	r2, r3
 8002412:	d904      	bls.n	800241e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e002      	b.n	8002424 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <HAL_RTC_GetTime+0x1ac>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fa53 	bl	80028e0 <RTC_WriteTimeCounter>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e041      	b.n	80024c8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d00c      	beq.n	8002466 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa82 	bl	8002960 <RTC_WriteAlarmCounter>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e030      	b.n	80024c8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002466:	69f9      	ldr	r1, [r7, #28]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa79 	bl	8002960 <RTC_WriteAlarmCounter>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e027      	b.n	80024c8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fb21 	bl	8002ac2 <RTC_DateUpdate>
 8002480:	e003      	b.n	800248a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01a      	beq.n	80024c6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fada 	bl	8002a4e <RTC_ByteToBcd2>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fad1 	bl	8002a4e <RTC_ByteToBcd2>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	789b      	ldrb	r3, [r3, #2]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fac8 	bl	8002a4e <RTC_ByteToBcd2>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	91a2b3c5 	.word	0x91a2b3c5
 80024d4:	88888889 	.word	0x88888889
 80024d8:	aaaaaaab 	.word	0xaaaaaaab
 80024dc:	00015180 	.word	0x00015180

080024e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_RTC_SetDate+0x24>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e097      	b.n	8002638 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	7c1b      	ldrb	r3, [r3, #16]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RTC_SetDate+0x34>
 8002510:	2302      	movs	r3, #2
 8002512:	e091      	b.n	8002638 <HAL_RTC_SetDate+0x158>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2202      	movs	r2, #2
 800251e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	78da      	ldrb	r2, [r3, #3]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	785a      	ldrb	r2, [r3, #1]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	789a      	ldrb	r2, [r3, #2]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	739a      	strb	r2, [r3, #14]
 800253e:	e01a      	b.n	8002576 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	78db      	ldrb	r3, [r3, #3]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fa9f 	bl	8002a88 <RTC_Bcd2ToByte>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa96 	bl	8002a88 <RTC_Bcd2ToByte>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fa8d 	bl	8002a88 <RTC_Bcd2ToByte>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	7bdb      	ldrb	r3, [r3, #15]
 800257a:	4618      	mov	r0, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	7b59      	ldrb	r1, [r3, #13]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7b9b      	ldrb	r3, [r3, #14]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 fb77 	bl	8002c78 <RTC_WeekDayNum>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	7b1a      	ldrb	r2, [r3, #12]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f970 	bl	8002880 <RTC_ReadTimeCounter>
 80025a0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_RTC_SetDate+0x160>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b18      	cmp	r3, #24
 80025b2:	d93a      	bls.n	800262a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4a23      	ldr	r2, [pc, #140]	; (8002644 <HAL_RTC_SetDate+0x164>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_RTC_SetDate+0x168>)
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f987 	bl	80028e0 <RTC_WriteTimeCounter>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2204      	movs	r2, #4
 80025dc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e027      	b.n	8002638 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9a0 	bl	800292e <RTC_ReadAlarmCounter>
 80025ee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d018      	beq.n	800262a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d214      	bcs.n	800262a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002606:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800260a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f9a6 	bl	8002960 <RTC_WriteAlarmCounter>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2204      	movs	r2, #4
 800261e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e006      	b.n	8002638 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	91a2b3c5 	.word	0x91a2b3c5
 8002644:	aaaaaaab 	.word	0xaaaaaaab
 8002648:	00015180 	.word	0x00015180

0800264c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2100      	movs	r1, #0
 800265e:	460a      	mov	r2, r1
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	460a      	mov	r2, r1
 8002664:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_RTC_GetDate+0x26>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e03a      	b.n	80026ec <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fe56 	bl	8002330 <HAL_RTC_GetTime>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e02e      	b.n	80026ec <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	7b1a      	ldrb	r2, [r3, #12]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	7bda      	ldrb	r2, [r3, #15]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	7b5a      	ldrb	r2, [r3, #13]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	7b9a      	ldrb	r2, [r3, #14]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01a      	beq.n	80026ea <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	78db      	ldrb	r3, [r3, #3]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f9c8 	bl	8002a4e <RTC_ByteToBcd2>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9bf 	bl	8002a4e <RTC_ByteToBcd2>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	789b      	ldrb	r3, [r3, #2]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9b6 	bl	8002a4e <RTC_ByteToBcd2>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2100      	movs	r1, #0
 800270a:	460a      	mov	r2, r1
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	460a      	mov	r2, r1
 8002710:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_RTC_SetAlarm+0x2a>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07d      	b.n	800281e <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	7c1b      	ldrb	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_RTC_SetAlarm+0x3a>
 800272a:	2302      	movs	r3, #2
 800272c:	e077      	b.n	800281e <HAL_RTC_SetAlarm+0x12a>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2202      	movs	r2, #2
 8002738:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff fdf4 	bl	8002330 <HAL_RTC_GetTime>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e065      	b.n	800281e <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002752:	7d3b      	ldrb	r3, [r7, #20]
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800275a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800275e:	7d7b      	ldrb	r3, [r7, #21]
 8002760:	4619      	mov	r1, r3
 8002762:	460b      	mov	r3, r1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800276a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800276c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800276e:	4413      	add	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d113      	bne.n	80027a0 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002782:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	4619      	mov	r1, r3
 800278c:	460b      	mov	r3, r1
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a5b      	subs	r3, r3, r1
 8002792:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002794:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800279a:	4413      	add	r3, r2
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e01e      	b.n	80027de <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f96f 	bl	8002a88 <RTC_Bcd2ToByte>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027b2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f964 	bl	8002a88 <RTC_Bcd2ToByte>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80027cc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f958 	bl	8002a88 <RTC_Bcd2ToByte>
 80027d8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80027da:	4423      	add	r3, r4
 80027dc:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d205      	bcs.n	80027f2 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80027ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027f0:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027f2:	69f9      	ldr	r1, [r7, #28]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f8b3 	bl	8002960 <RTC_WriteAlarmCounter>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2204      	movs	r2, #4
 8002804:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e006      	b.n	800281e <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e01d      	b.n	8002878 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800284c:	f7fe fc0c 	bl	8001068 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002852:	e009      	b.n	8002868 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002854:	f7fe fc08 	bl	8001068 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	d901      	bls.n	8002868 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e007      	b.n	8002878 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	827b      	strh	r3, [r7, #18]
 800288c:	2300      	movs	r3, #0
 800288e:	823b      	strh	r3, [r7, #16]
 8002890:	2300      	movs	r3, #0
 8002892:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80028b0:	8a7a      	ldrh	r2, [r7, #18]
 80028b2:	8a3b      	ldrh	r3, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d008      	beq.n	80028ca <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80028b8:	8a3b      	ldrh	r3, [r7, #16]
 80028ba:	041a      	lsls	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e004      	b.n	80028d4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80028ca:	8a7b      	ldrh	r3, [r7, #18]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80028d4:	697b      	ldr	r3, [r7, #20]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f85d 	bl	80029ae <RTC_EnterInitMode>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e011      	b.n	8002924 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	0c12      	lsrs	r2, r2, #16
 8002908:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	b292      	uxth	r2, r2
 8002912:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f872 	bl	80029fe <RTC_ExitInitMode>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	81fb      	strh	r3, [r7, #14]
 800293a:	2300      	movs	r3, #0
 800293c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	89bb      	ldrh	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f81d 	bl	80029ae <RTC_EnterInitMode>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e011      	b.n	80029a4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	0c12      	lsrs	r2, r2, #16
 8002988:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	b292      	uxth	r2, r2
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f832 	bl	80029fe <RTC_ExitInitMode>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80029ba:	f7fe fb55 	bl	8001068 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029c0:	e009      	b.n	80029d6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029c2:	f7fe fb51 	bl	8001068 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d0:	d901      	bls.n	80029d6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0210 	orr.w	r2, r2, #16
 80029f2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0210 	bic.w	r2, r2, #16
 8002a18:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002a1a:	f7fe fb25 	bl	8001068 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a20:	e009      	b.n	8002a36 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a22:	f7fe fb21 	bl	8001068 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d901      	bls.n	8002a36 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e007      	b.n	8002a46 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002a5c:	e005      	b.n	8002a6a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3b0a      	subs	r3, #10
 8002a68:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d8f6      	bhi.n	8002a5e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b2db      	uxtb	r3, r3
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7bdb      	ldrb	r3, [r3, #15]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7b5b      	ldrb	r3, [r3, #13]
 8002ae6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7b9b      	ldrb	r3, [r3, #14]
 8002aec:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	e06f      	b.n	8002bd4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d011      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d00e      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d00b      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b07      	cmp	r3, #7
 8002b0a:	d008      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d005      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b0a      	cmp	r3, #10
 8002b16:	d002      	beq.n	8002b1e <RTC_DateUpdate+0x5c>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d117      	bne.n	8002b4e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b1e      	cmp	r3, #30
 8002b22:	d803      	bhi.n	8002b2c <RTC_DateUpdate+0x6a>
      {
        day++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b2a:	e050      	b.n	8002bce <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d005      	beq.n	8002b3e <RTC_DateUpdate+0x7c>
        {
          month++;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	3301      	adds	r3, #1
 8002b36:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b3c:	e047      	b.n	8002bce <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
          year++;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002b4c:	e03f      	b.n	8002bce <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d008      	beq.n	8002b66 <RTC_DateUpdate+0xa4>
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d005      	beq.n	8002b66 <RTC_DateUpdate+0xa4>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d002      	beq.n	8002b66 <RTC_DateUpdate+0xa4>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b0b      	cmp	r3, #11
 8002b64:	d10c      	bne.n	8002b80 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b1d      	cmp	r3, #29
 8002b6a:	d803      	bhi.n	8002b74 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b72:	e02c      	b.n	8002bce <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3301      	adds	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b7e:	e026      	b.n	8002bce <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d123      	bne.n	8002bce <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b1b      	cmp	r3, #27
 8002b8a:	d803      	bhi.n	8002b94 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e01c      	b.n	8002bce <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b1c      	cmp	r3, #28
 8002b98:	d111      	bne.n	8002bbe <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f838 	bl	8002c14 <RTC_IsLeapYear>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e00d      	b.n	8002bce <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e007      	b.n	8002bce <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b1d      	cmp	r3, #29
 8002bc2:	d104      	bne.n	8002bce <RTC_DateUpdate+0x10c>
      {
        month++;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d38b      	bcc.n	8002af4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f000 f83a 	bl	8002c78 <RTC_WeekDayNum>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	731a      	strb	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e01d      	b.n	8002c6a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <RTC_IsLeapYear+0x60>)
 8002c32:	fba2 1203 	umull	r1, r2, r2, r3
 8002c36:	0952      	lsrs	r2, r2, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f202 	mul.w	r2, r1, r2
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <RTC_IsLeapYear+0x60>)
 8002c4e:	fba2 1203 	umull	r1, r2, r2, r3
 8002c52:	09d2      	lsrs	r2, r2, #7
 8002c54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c58:	fb01 f202 	mul.w	r2, r1, r2
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002c68:	2300      	movs	r3, #0
  }
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	51eb851f 	.word	0x51eb851f

08002c78 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
 8002c84:	4613      	mov	r3, r2
 8002c86:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c96:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d82d      	bhi.n	8002cfa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <RTC_WeekDayNum+0xe4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	085a      	lsrs	r2, r3, #1
 8002cb2:	78bb      	ldrb	r3, [r7, #2]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	441a      	add	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <RTC_WeekDayNum+0xe8>)
 8002cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <RTC_WeekDayNum+0xe8>)
 8002cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8002cda:	09db      	lsrs	r3, r3, #7
 8002cdc:	4413      	add	r3, r2
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <RTC_WeekDayNum+0xec>)
 8002ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce6:	1ad1      	subs	r1, r2, r3
 8002ce8:	0849      	lsrs	r1, r1, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	0899      	lsrs	r1, r3, #2
 8002cee:	460b      	mov	r3, r1
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a5b      	subs	r3, r3, r1
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e029      	b.n	8002d4e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <RTC_WeekDayNum+0xe4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	085a      	lsrs	r2, r3, #1
 8002d0e:	78bb      	ldrb	r3, [r7, #2]
 8002d10:	441a      	add	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	441a      	add	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4910      	ldr	r1, [pc, #64]	; (8002d60 <RTC_WeekDayNum+0xe8>)
 8002d20:	fba1 1303 	umull	r1, r3, r1, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <RTC_WeekDayNum+0xe8>)
 8002d2c:	fba1 1303 	umull	r1, r3, r1, r3
 8002d30:	09db      	lsrs	r3, r3, #7
 8002d32:	4413      	add	r3, r2
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <RTC_WeekDayNum+0xec>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	1ad1      	subs	r1, r2, r3
 8002d3e:	0849      	lsrs	r1, r1, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	0899      	lsrs	r1, r3, #2
 8002d44:	460b      	mov	r3, r1
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a5b      	subs	r3, r3, r1
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	b2db      	uxtb	r3, r3
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	38e38e39 	.word	0x38e38e39
 8002d60:	51eb851f 	.word	0x51eb851f
 8002d64:	24924925 	.word	0x24924925

08002d68 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_RTCEx_BKUPWrite+0x30>)
 8002d7a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4413      	add	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40006c00 	.word	0x40006c00

08002d9c <siprintf>:
 8002d9c:	b40e      	push	{r1, r2, r3}
 8002d9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002da2:	b500      	push	{lr}
 8002da4:	b09c      	sub	sp, #112	; 0x70
 8002da6:	ab1d      	add	r3, sp, #116	; 0x74
 8002da8:	9002      	str	r0, [sp, #8]
 8002daa:	9006      	str	r0, [sp, #24]
 8002dac:	9107      	str	r1, [sp, #28]
 8002dae:	9104      	str	r1, [sp, #16]
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <siprintf+0x38>)
 8002db2:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <siprintf+0x3c>)
 8002db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db8:	9105      	str	r1, [sp, #20]
 8002dba:	6800      	ldr	r0, [r0, #0]
 8002dbc:	a902      	add	r1, sp, #8
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	f000 f98e 	bl	80030e0 <_svfiprintf_r>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	b01c      	add	sp, #112	; 0x70
 8002dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd0:	b003      	add	sp, #12
 8002dd2:	4770      	bx	lr
 8002dd4:	200000d8 	.word	0x200000d8
 8002dd8:	ffff0208 	.word	0xffff0208

08002ddc <memset>:
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4402      	add	r2, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__errno>:
 8002dec:	4b01      	ldr	r3, [pc, #4]	; (8002df4 <__errno+0x8>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	200000d8 	.word	0x200000d8

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	4d0c      	ldr	r5, [pc, #48]	; (8002e30 <__libc_init_array+0x38>)
 8002dfe:	4c0d      	ldr	r4, [pc, #52]	; (8002e34 <__libc_init_array+0x3c>)
 8002e00:	1b64      	subs	r4, r4, r5
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	f000 fc7a 	bl	8003700 <_init>
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	4d0a      	ldr	r5, [pc, #40]	; (8002e38 <__libc_init_array+0x40>)
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <__libc_init_array+0x44>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e20:	4798      	blx	r3
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2a:	4798      	blx	r3
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08003804 	.word	0x08003804
 8002e34:	08003804 	.word	0x08003804
 8002e38:	08003804 	.word	0x08003804
 8002e3c:	08003808 	.word	0x08003808

08002e40 <__retarget_lock_acquire_recursive>:
 8002e40:	4770      	bx	lr

08002e42 <__retarget_lock_release_recursive>:
 8002e42:	4770      	bx	lr

08002e44 <_free_r>:
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	4605      	mov	r5, r0
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	d040      	beq.n	8002ece <_free_r+0x8a>
 8002e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e50:	1f0c      	subs	r4, r1, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bfb8      	it	lt
 8002e56:	18e4      	addlt	r4, r4, r3
 8002e58:	f000 f8dc 	bl	8003014 <__malloc_lock>
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <_free_r+0x8c>)
 8002e5e:	6813      	ldr	r3, [r2, #0]
 8002e60:	b933      	cbnz	r3, 8002e70 <_free_r+0x2c>
 8002e62:	6063      	str	r3, [r4, #4]
 8002e64:	6014      	str	r4, [r2, #0]
 8002e66:	4628      	mov	r0, r5
 8002e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e6c:	f000 b8d8 	b.w	8003020 <__malloc_unlock>
 8002e70:	42a3      	cmp	r3, r4
 8002e72:	d908      	bls.n	8002e86 <_free_r+0x42>
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	1821      	adds	r1, r4, r0
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	bf01      	itttt	eq
 8002e7c:	6819      	ldreq	r1, [r3, #0]
 8002e7e:	685b      	ldreq	r3, [r3, #4]
 8002e80:	1809      	addeq	r1, r1, r0
 8002e82:	6021      	streq	r1, [r4, #0]
 8002e84:	e7ed      	b.n	8002e62 <_free_r+0x1e>
 8002e86:	461a      	mov	r2, r3
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b10b      	cbz	r3, 8002e90 <_free_r+0x4c>
 8002e8c:	42a3      	cmp	r3, r4
 8002e8e:	d9fa      	bls.n	8002e86 <_free_r+0x42>
 8002e90:	6811      	ldr	r1, [r2, #0]
 8002e92:	1850      	adds	r0, r2, r1
 8002e94:	42a0      	cmp	r0, r4
 8002e96:	d10b      	bne.n	8002eb0 <_free_r+0x6c>
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	4401      	add	r1, r0
 8002e9c:	1850      	adds	r0, r2, r1
 8002e9e:	4283      	cmp	r3, r0
 8002ea0:	6011      	str	r1, [r2, #0]
 8002ea2:	d1e0      	bne.n	8002e66 <_free_r+0x22>
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4408      	add	r0, r1
 8002eaa:	6010      	str	r0, [r2, #0]
 8002eac:	6053      	str	r3, [r2, #4]
 8002eae:	e7da      	b.n	8002e66 <_free_r+0x22>
 8002eb0:	d902      	bls.n	8002eb8 <_free_r+0x74>
 8002eb2:	230c      	movs	r3, #12
 8002eb4:	602b      	str	r3, [r5, #0]
 8002eb6:	e7d6      	b.n	8002e66 <_free_r+0x22>
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	1821      	adds	r1, r4, r0
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	bf01      	itttt	eq
 8002ec0:	6819      	ldreq	r1, [r3, #0]
 8002ec2:	685b      	ldreq	r3, [r3, #4]
 8002ec4:	1809      	addeq	r1, r1, r0
 8002ec6:	6021      	streq	r1, [r4, #0]
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	6054      	str	r4, [r2, #4]
 8002ecc:	e7cb      	b.n	8002e66 <_free_r+0x22>
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	2000028c 	.word	0x2000028c

08002ed4 <sbrk_aligned>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	4e0e      	ldr	r6, [pc, #56]	; (8002f10 <sbrk_aligned+0x3c>)
 8002ed8:	460c      	mov	r4, r1
 8002eda:	6831      	ldr	r1, [r6, #0]
 8002edc:	4605      	mov	r5, r0
 8002ede:	b911      	cbnz	r1, 8002ee6 <sbrk_aligned+0x12>
 8002ee0:	f000 fbaa 	bl	8003638 <_sbrk_r>
 8002ee4:	6030      	str	r0, [r6, #0]
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f000 fba5 	bl	8003638 <_sbrk_r>
 8002eee:	1c43      	adds	r3, r0, #1
 8002ef0:	d00a      	beq.n	8002f08 <sbrk_aligned+0x34>
 8002ef2:	1cc4      	adds	r4, r0, #3
 8002ef4:	f024 0403 	bic.w	r4, r4, #3
 8002ef8:	42a0      	cmp	r0, r4
 8002efa:	d007      	beq.n	8002f0c <sbrk_aligned+0x38>
 8002efc:	1a21      	subs	r1, r4, r0
 8002efe:	4628      	mov	r0, r5
 8002f00:	f000 fb9a 	bl	8003638 <_sbrk_r>
 8002f04:	3001      	adds	r0, #1
 8002f06:	d101      	bne.n	8002f0c <sbrk_aligned+0x38>
 8002f08:	f04f 34ff 	mov.w	r4, #4294967295
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	20000290 	.word	0x20000290

08002f14 <_malloc_r>:
 8002f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f18:	1ccd      	adds	r5, r1, #3
 8002f1a:	f025 0503 	bic.w	r5, r5, #3
 8002f1e:	3508      	adds	r5, #8
 8002f20:	2d0c      	cmp	r5, #12
 8002f22:	bf38      	it	cc
 8002f24:	250c      	movcc	r5, #12
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	4607      	mov	r7, r0
 8002f2a:	db01      	blt.n	8002f30 <_malloc_r+0x1c>
 8002f2c:	42a9      	cmp	r1, r5
 8002f2e:	d905      	bls.n	8002f3c <_malloc_r+0x28>
 8002f30:	230c      	movs	r3, #12
 8002f32:	2600      	movs	r6, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4630      	mov	r0, r6
 8002f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003010 <_malloc_r+0xfc>
 8002f40:	f000 f868 	bl	8003014 <__malloc_lock>
 8002f44:	f8d8 3000 	ldr.w	r3, [r8]
 8002f48:	461c      	mov	r4, r3
 8002f4a:	bb5c      	cbnz	r4, 8002fa4 <_malloc_r+0x90>
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4638      	mov	r0, r7
 8002f50:	f7ff ffc0 	bl	8002ed4 <sbrk_aligned>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	4604      	mov	r4, r0
 8002f58:	d155      	bne.n	8003006 <_malloc_r+0xf2>
 8002f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8002f5e:	4626      	mov	r6, r4
 8002f60:	2e00      	cmp	r6, #0
 8002f62:	d145      	bne.n	8002ff0 <_malloc_r+0xdc>
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d048      	beq.n	8002ffa <_malloc_r+0xe6>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	4631      	mov	r1, r6
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	eb04 0903 	add.w	r9, r4, r3
 8002f72:	f000 fb61 	bl	8003638 <_sbrk_r>
 8002f76:	4581      	cmp	r9, r0
 8002f78:	d13f      	bne.n	8002ffa <_malloc_r+0xe6>
 8002f7a:	6821      	ldr	r1, [r4, #0]
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	1a6d      	subs	r5, r5, r1
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7ff ffa7 	bl	8002ed4 <sbrk_aligned>
 8002f86:	3001      	adds	r0, #1
 8002f88:	d037      	beq.n	8002ffa <_malloc_r+0xe6>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	442b      	add	r3, r5
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	f8d8 3000 	ldr.w	r3, [r8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d038      	beq.n	800300a <_malloc_r+0xf6>
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	42a2      	cmp	r2, r4
 8002f9c:	d12b      	bne.n	8002ff6 <_malloc_r+0xe2>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e00f      	b.n	8002fc4 <_malloc_r+0xb0>
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	1b52      	subs	r2, r2, r5
 8002fa8:	d41f      	bmi.n	8002fea <_malloc_r+0xd6>
 8002faa:	2a0b      	cmp	r2, #11
 8002fac:	d917      	bls.n	8002fde <_malloc_r+0xca>
 8002fae:	1961      	adds	r1, r4, r5
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	6025      	str	r5, [r4, #0]
 8002fb4:	bf18      	it	ne
 8002fb6:	6059      	strne	r1, [r3, #4]
 8002fb8:	6863      	ldr	r3, [r4, #4]
 8002fba:	bf08      	it	eq
 8002fbc:	f8c8 1000 	streq.w	r1, [r8]
 8002fc0:	5162      	str	r2, [r4, r5]
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	f104 060b 	add.w	r6, r4, #11
 8002fca:	f000 f829 	bl	8003020 <__malloc_unlock>
 8002fce:	f026 0607 	bic.w	r6, r6, #7
 8002fd2:	1d23      	adds	r3, r4, #4
 8002fd4:	1af2      	subs	r2, r6, r3
 8002fd6:	d0ae      	beq.n	8002f36 <_malloc_r+0x22>
 8002fd8:	1b9b      	subs	r3, r3, r6
 8002fda:	50a3      	str	r3, [r4, r2]
 8002fdc:	e7ab      	b.n	8002f36 <_malloc_r+0x22>
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	6862      	ldr	r2, [r4, #4]
 8002fe2:	d1dd      	bne.n	8002fa0 <_malloc_r+0x8c>
 8002fe4:	f8c8 2000 	str.w	r2, [r8]
 8002fe8:	e7ec      	b.n	8002fc4 <_malloc_r+0xb0>
 8002fea:	4623      	mov	r3, r4
 8002fec:	6864      	ldr	r4, [r4, #4]
 8002fee:	e7ac      	b.n	8002f4a <_malloc_r+0x36>
 8002ff0:	4634      	mov	r4, r6
 8002ff2:	6876      	ldr	r6, [r6, #4]
 8002ff4:	e7b4      	b.n	8002f60 <_malloc_r+0x4c>
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	e7cc      	b.n	8002f94 <_malloc_r+0x80>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	f000 f80e 	bl	8003020 <__malloc_unlock>
 8003004:	e797      	b.n	8002f36 <_malloc_r+0x22>
 8003006:	6025      	str	r5, [r4, #0]
 8003008:	e7dc      	b.n	8002fc4 <_malloc_r+0xb0>
 800300a:	605b      	str	r3, [r3, #4]
 800300c:	deff      	udf	#255	; 0xff
 800300e:	bf00      	nop
 8003010:	2000028c 	.word	0x2000028c

08003014 <__malloc_lock>:
 8003014:	4801      	ldr	r0, [pc, #4]	; (800301c <__malloc_lock+0x8>)
 8003016:	f7ff bf13 	b.w	8002e40 <__retarget_lock_acquire_recursive>
 800301a:	bf00      	nop
 800301c:	20000288 	.word	0x20000288

08003020 <__malloc_unlock>:
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <__malloc_unlock+0x8>)
 8003022:	f7ff bf0e 	b.w	8002e42 <__retarget_lock_release_recursive>
 8003026:	bf00      	nop
 8003028:	20000288 	.word	0x20000288

0800302c <__ssputs_r>:
 800302c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003030:	461f      	mov	r7, r3
 8003032:	688e      	ldr	r6, [r1, #8]
 8003034:	4682      	mov	sl, r0
 8003036:	42be      	cmp	r6, r7
 8003038:	460c      	mov	r4, r1
 800303a:	4690      	mov	r8, r2
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	d82c      	bhi.n	800309a <__ssputs_r+0x6e>
 8003040:	898a      	ldrh	r2, [r1, #12]
 8003042:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003046:	d026      	beq.n	8003096 <__ssputs_r+0x6a>
 8003048:	6965      	ldr	r5, [r4, #20]
 800304a:	6909      	ldr	r1, [r1, #16]
 800304c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003050:	eba3 0901 	sub.w	r9, r3, r1
 8003054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003058:	1c7b      	adds	r3, r7, #1
 800305a:	444b      	add	r3, r9
 800305c:	106d      	asrs	r5, r5, #1
 800305e:	429d      	cmp	r5, r3
 8003060:	bf38      	it	cc
 8003062:	461d      	movcc	r5, r3
 8003064:	0553      	lsls	r3, r2, #21
 8003066:	d527      	bpl.n	80030b8 <__ssputs_r+0x8c>
 8003068:	4629      	mov	r1, r5
 800306a:	f7ff ff53 	bl	8002f14 <_malloc_r>
 800306e:	4606      	mov	r6, r0
 8003070:	b360      	cbz	r0, 80030cc <__ssputs_r+0xa0>
 8003072:	464a      	mov	r2, r9
 8003074:	6921      	ldr	r1, [r4, #16]
 8003076:	f000 fafd 	bl	8003674 <memcpy>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	6126      	str	r6, [r4, #16]
 8003088:	444e      	add	r6, r9
 800308a:	6026      	str	r6, [r4, #0]
 800308c:	463e      	mov	r6, r7
 800308e:	6165      	str	r5, [r4, #20]
 8003090:	eba5 0509 	sub.w	r5, r5, r9
 8003094:	60a5      	str	r5, [r4, #8]
 8003096:	42be      	cmp	r6, r7
 8003098:	d900      	bls.n	800309c <__ssputs_r+0x70>
 800309a:	463e      	mov	r6, r7
 800309c:	4632      	mov	r2, r6
 800309e:	4641      	mov	r1, r8
 80030a0:	6820      	ldr	r0, [r4, #0]
 80030a2:	f000 faaf 	bl	8003604 <memmove>
 80030a6:	2000      	movs	r0, #0
 80030a8:	68a3      	ldr	r3, [r4, #8]
 80030aa:	1b9b      	subs	r3, r3, r6
 80030ac:	60a3      	str	r3, [r4, #8]
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	4433      	add	r3, r6
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b8:	462a      	mov	r2, r5
 80030ba:	f000 fae9 	bl	8003690 <_realloc_r>
 80030be:	4606      	mov	r6, r0
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d1e0      	bne.n	8003086 <__ssputs_r+0x5a>
 80030c4:	4650      	mov	r0, sl
 80030c6:	6921      	ldr	r1, [r4, #16]
 80030c8:	f7ff febc 	bl	8002e44 <_free_r>
 80030cc:	230c      	movs	r3, #12
 80030ce:	f8ca 3000 	str.w	r3, [sl]
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	e7e9      	b.n	80030b4 <__ssputs_r+0x88>

080030e0 <_svfiprintf_r>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	4698      	mov	r8, r3
 80030e6:	898b      	ldrh	r3, [r1, #12]
 80030e8:	4607      	mov	r7, r0
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	460d      	mov	r5, r1
 80030ee:	4614      	mov	r4, r2
 80030f0:	b09d      	sub	sp, #116	; 0x74
 80030f2:	d50e      	bpl.n	8003112 <_svfiprintf_r+0x32>
 80030f4:	690b      	ldr	r3, [r1, #16]
 80030f6:	b963      	cbnz	r3, 8003112 <_svfiprintf_r+0x32>
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	f7ff ff0b 	bl	8002f14 <_malloc_r>
 80030fe:	6028      	str	r0, [r5, #0]
 8003100:	6128      	str	r0, [r5, #16]
 8003102:	b920      	cbnz	r0, 800310e <_svfiprintf_r+0x2e>
 8003104:	230c      	movs	r3, #12
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	e0d0      	b.n	80032b0 <_svfiprintf_r+0x1d0>
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	616b      	str	r3, [r5, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	9309      	str	r3, [sp, #36]	; 0x24
 8003116:	2320      	movs	r3, #32
 8003118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800311c:	2330      	movs	r3, #48	; 0x30
 800311e:	f04f 0901 	mov.w	r9, #1
 8003122:	f8cd 800c 	str.w	r8, [sp, #12]
 8003126:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032c8 <_svfiprintf_r+0x1e8>
 800312a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800312e:	4623      	mov	r3, r4
 8003130:	469a      	mov	sl, r3
 8003132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003136:	b10a      	cbz	r2, 800313c <_svfiprintf_r+0x5c>
 8003138:	2a25      	cmp	r2, #37	; 0x25
 800313a:	d1f9      	bne.n	8003130 <_svfiprintf_r+0x50>
 800313c:	ebba 0b04 	subs.w	fp, sl, r4
 8003140:	d00b      	beq.n	800315a <_svfiprintf_r+0x7a>
 8003142:	465b      	mov	r3, fp
 8003144:	4622      	mov	r2, r4
 8003146:	4629      	mov	r1, r5
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff6f 	bl	800302c <__ssputs_r>
 800314e:	3001      	adds	r0, #1
 8003150:	f000 80a9 	beq.w	80032a6 <_svfiprintf_r+0x1c6>
 8003154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003156:	445a      	add	r2, fp
 8003158:	9209      	str	r2, [sp, #36]	; 0x24
 800315a:	f89a 3000 	ldrb.w	r3, [sl]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a1 	beq.w	80032a6 <_svfiprintf_r+0x1c6>
 8003164:	2300      	movs	r3, #0
 8003166:	f04f 32ff 	mov.w	r2, #4294967295
 800316a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800316e:	f10a 0a01 	add.w	sl, sl, #1
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800317a:	931a      	str	r3, [sp, #104]	; 0x68
 800317c:	4654      	mov	r4, sl
 800317e:	2205      	movs	r2, #5
 8003180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003184:	4850      	ldr	r0, [pc, #320]	; (80032c8 <_svfiprintf_r+0x1e8>)
 8003186:	f000 fa67 	bl	8003658 <memchr>
 800318a:	9a04      	ldr	r2, [sp, #16]
 800318c:	b9d8      	cbnz	r0, 80031c6 <_svfiprintf_r+0xe6>
 800318e:	06d0      	lsls	r0, r2, #27
 8003190:	bf44      	itt	mi
 8003192:	2320      	movmi	r3, #32
 8003194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003198:	0711      	lsls	r1, r2, #28
 800319a:	bf44      	itt	mi
 800319c:	232b      	movmi	r3, #43	; 0x2b
 800319e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b2a      	cmp	r3, #42	; 0x2a
 80031a8:	d015      	beq.n	80031d6 <_svfiprintf_r+0xf6>
 80031aa:	4654      	mov	r4, sl
 80031ac:	2000      	movs	r0, #0
 80031ae:	f04f 0c0a 	mov.w	ip, #10
 80031b2:	9a07      	ldr	r2, [sp, #28]
 80031b4:	4621      	mov	r1, r4
 80031b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ba:	3b30      	subs	r3, #48	; 0x30
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d94d      	bls.n	800325c <_svfiprintf_r+0x17c>
 80031c0:	b1b0      	cbz	r0, 80031f0 <_svfiprintf_r+0x110>
 80031c2:	9207      	str	r2, [sp, #28]
 80031c4:	e014      	b.n	80031f0 <_svfiprintf_r+0x110>
 80031c6:	eba0 0308 	sub.w	r3, r0, r8
 80031ca:	fa09 f303 	lsl.w	r3, r9, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	46a2      	mov	sl, r4
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	e7d2      	b.n	800317c <_svfiprintf_r+0x9c>
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	1d19      	adds	r1, r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	9103      	str	r1, [sp, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bfbb      	ittet	lt
 80031e2:	425b      	neglt	r3, r3
 80031e4:	f042 0202 	orrlt.w	r2, r2, #2
 80031e8:	9307      	strge	r3, [sp, #28]
 80031ea:	9307      	strlt	r3, [sp, #28]
 80031ec:	bfb8      	it	lt
 80031ee:	9204      	strlt	r2, [sp, #16]
 80031f0:	7823      	ldrb	r3, [r4, #0]
 80031f2:	2b2e      	cmp	r3, #46	; 0x2e
 80031f4:	d10c      	bne.n	8003210 <_svfiprintf_r+0x130>
 80031f6:	7863      	ldrb	r3, [r4, #1]
 80031f8:	2b2a      	cmp	r3, #42	; 0x2a
 80031fa:	d134      	bne.n	8003266 <_svfiprintf_r+0x186>
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	3402      	adds	r4, #2
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	9203      	str	r2, [sp, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	bfb8      	it	lt
 800320a:	f04f 33ff 	movlt.w	r3, #4294967295
 800320e:	9305      	str	r3, [sp, #20]
 8003210:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032cc <_svfiprintf_r+0x1ec>
 8003214:	2203      	movs	r2, #3
 8003216:	4650      	mov	r0, sl
 8003218:	7821      	ldrb	r1, [r4, #0]
 800321a:	f000 fa1d 	bl	8003658 <memchr>
 800321e:	b138      	cbz	r0, 8003230 <_svfiprintf_r+0x150>
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	9b04      	ldr	r3, [sp, #16]
 8003224:	eba0 000a 	sub.w	r0, r0, sl
 8003228:	4082      	lsls	r2, r0
 800322a:	4313      	orrs	r3, r2
 800322c:	3401      	adds	r4, #1
 800322e:	9304      	str	r3, [sp, #16]
 8003230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003234:	2206      	movs	r2, #6
 8003236:	4826      	ldr	r0, [pc, #152]	; (80032d0 <_svfiprintf_r+0x1f0>)
 8003238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800323c:	f000 fa0c 	bl	8003658 <memchr>
 8003240:	2800      	cmp	r0, #0
 8003242:	d038      	beq.n	80032b6 <_svfiprintf_r+0x1d6>
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <_svfiprintf_r+0x1f4>)
 8003246:	bb1b      	cbnz	r3, 8003290 <_svfiprintf_r+0x1b0>
 8003248:	9b03      	ldr	r3, [sp, #12]
 800324a:	3307      	adds	r3, #7
 800324c:	f023 0307 	bic.w	r3, r3, #7
 8003250:	3308      	adds	r3, #8
 8003252:	9303      	str	r3, [sp, #12]
 8003254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003256:	4433      	add	r3, r6
 8003258:	9309      	str	r3, [sp, #36]	; 0x24
 800325a:	e768      	b.n	800312e <_svfiprintf_r+0x4e>
 800325c:	460c      	mov	r4, r1
 800325e:	2001      	movs	r0, #1
 8003260:	fb0c 3202 	mla	r2, ip, r2, r3
 8003264:	e7a6      	b.n	80031b4 <_svfiprintf_r+0xd4>
 8003266:	2300      	movs	r3, #0
 8003268:	f04f 0c0a 	mov.w	ip, #10
 800326c:	4619      	mov	r1, r3
 800326e:	3401      	adds	r4, #1
 8003270:	9305      	str	r3, [sp, #20]
 8003272:	4620      	mov	r0, r4
 8003274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003278:	3a30      	subs	r2, #48	; 0x30
 800327a:	2a09      	cmp	r2, #9
 800327c:	d903      	bls.n	8003286 <_svfiprintf_r+0x1a6>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0c6      	beq.n	8003210 <_svfiprintf_r+0x130>
 8003282:	9105      	str	r1, [sp, #20]
 8003284:	e7c4      	b.n	8003210 <_svfiprintf_r+0x130>
 8003286:	4604      	mov	r4, r0
 8003288:	2301      	movs	r3, #1
 800328a:	fb0c 2101 	mla	r1, ip, r1, r2
 800328e:	e7f0      	b.n	8003272 <_svfiprintf_r+0x192>
 8003290:	ab03      	add	r3, sp, #12
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	462a      	mov	r2, r5
 8003296:	4638      	mov	r0, r7
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <_svfiprintf_r+0x1f8>)
 800329a:	a904      	add	r1, sp, #16
 800329c:	f3af 8000 	nop.w
 80032a0:	1c42      	adds	r2, r0, #1
 80032a2:	4606      	mov	r6, r0
 80032a4:	d1d6      	bne.n	8003254 <_svfiprintf_r+0x174>
 80032a6:	89ab      	ldrh	r3, [r5, #12]
 80032a8:	065b      	lsls	r3, r3, #25
 80032aa:	f53f af2d 	bmi.w	8003108 <_svfiprintf_r+0x28>
 80032ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b0:	b01d      	add	sp, #116	; 0x74
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	ab03      	add	r3, sp, #12
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	462a      	mov	r2, r5
 80032bc:	4638      	mov	r0, r7
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <_svfiprintf_r+0x1f8>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	f000 f87d 	bl	80033c0 <_printf_i>
 80032c6:	e7eb      	b.n	80032a0 <_svfiprintf_r+0x1c0>
 80032c8:	080037d0 	.word	0x080037d0
 80032cc:	080037d6 	.word	0x080037d6
 80032d0:	080037da 	.word	0x080037da
 80032d4:	00000000 	.word	0x00000000
 80032d8:	0800302d 	.word	0x0800302d

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4616      	mov	r6, r2
 80032e2:	4699      	mov	r9, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	4607      	mov	r7, r0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfb8      	it	lt
 80032ee:	4613      	movlt	r3, r2
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f6:	460c      	mov	r4, r1
 80032f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032fc:	b10a      	cbz	r2, 8003302 <_printf_common+0x26>
 80032fe:	3301      	adds	r3, #1
 8003300:	6033      	str	r3, [r6, #0]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0699      	lsls	r1, r3, #26
 8003306:	bf42      	ittt	mi
 8003308:	6833      	ldrmi	r3, [r6, #0]
 800330a:	3302      	addmi	r3, #2
 800330c:	6033      	strmi	r3, [r6, #0]
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f015 0506 	ands.w	r5, r5, #6
 8003314:	d106      	bne.n	8003324 <_printf_common+0x48>
 8003316:	f104 0a19 	add.w	sl, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	6832      	ldr	r2, [r6, #0]
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	42ab      	cmp	r3, r5
 8003322:	dc2b      	bgt.n	800337c <_printf_common+0xa0>
 8003324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003328:	1e13      	subs	r3, r2, #0
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	bf18      	it	ne
 800332e:	2301      	movne	r3, #1
 8003330:	0692      	lsls	r2, r2, #26
 8003332:	d430      	bmi.n	8003396 <_printf_common+0xba>
 8003334:	4649      	mov	r1, r9
 8003336:	4638      	mov	r0, r7
 8003338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800333c:	47c0      	blx	r8
 800333e:	3001      	adds	r0, #1
 8003340:	d023      	beq.n	800338a <_printf_common+0xae>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf14      	ite	ne
 800334e:	2500      	movne	r5, #0
 8003350:	6833      	ldreq	r3, [r6, #0]
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	bf08      	it	eq
 8003358:	68e5      	ldreq	r5, [r4, #12]
 800335a:	f104 041a 	add.w	r4, r4, #26
 800335e:	bf08      	it	eq
 8003360:	1aed      	subeq	r5, r5, r3
 8003362:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003366:	bf08      	it	eq
 8003368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800336c:	4293      	cmp	r3, r2
 800336e:	bfc4      	itt	gt
 8003370:	1a9b      	subgt	r3, r3, r2
 8003372:	18ed      	addgt	r5, r5, r3
 8003374:	42b5      	cmp	r5, r6
 8003376:	d11a      	bne.n	80033ae <_printf_common+0xd2>
 8003378:	2000      	movs	r0, #0
 800337a:	e008      	b.n	800338e <_printf_common+0xb2>
 800337c:	2301      	movs	r3, #1
 800337e:	4652      	mov	r2, sl
 8003380:	4649      	mov	r1, r9
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d103      	bne.n	8003392 <_printf_common+0xb6>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003392:	3501      	adds	r5, #1
 8003394:	e7c1      	b.n	800331a <_printf_common+0x3e>
 8003396:	2030      	movs	r0, #48	; 0x30
 8003398:	18e1      	adds	r1, r4, r3
 800339a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033a4:	4422      	add	r2, r4
 80033a6:	3302      	adds	r3, #2
 80033a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ac:	e7c2      	b.n	8003334 <_printf_common+0x58>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4622      	mov	r2, r4
 80033b2:	4649      	mov	r1, r9
 80033b4:	4638      	mov	r0, r7
 80033b6:	47c0      	blx	r8
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0e6      	beq.n	800338a <_printf_common+0xae>
 80033bc:	3601      	adds	r6, #1
 80033be:	e7d9      	b.n	8003374 <_printf_common+0x98>

080033c0 <_printf_i>:
 80033c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033c4:	7e0f      	ldrb	r7, [r1, #24]
 80033c6:	4691      	mov	r9, r2
 80033c8:	2f78      	cmp	r7, #120	; 0x78
 80033ca:	4680      	mov	r8, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	469a      	mov	sl, r3
 80033d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033d6:	d807      	bhi.n	80033e8 <_printf_i+0x28>
 80033d8:	2f62      	cmp	r7, #98	; 0x62
 80033da:	d80a      	bhi.n	80033f2 <_printf_i+0x32>
 80033dc:	2f00      	cmp	r7, #0
 80033de:	f000 80d5 	beq.w	800358c <_printf_i+0x1cc>
 80033e2:	2f58      	cmp	r7, #88	; 0x58
 80033e4:	f000 80c1 	beq.w	800356a <_printf_i+0x1aa>
 80033e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033f0:	e03a      	b.n	8003468 <_printf_i+0xa8>
 80033f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033f6:	2b15      	cmp	r3, #21
 80033f8:	d8f6      	bhi.n	80033e8 <_printf_i+0x28>
 80033fa:	a101      	add	r1, pc, #4	; (adr r1, 8003400 <_printf_i+0x40>)
 80033fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003400:	08003459 	.word	0x08003459
 8003404:	0800346d 	.word	0x0800346d
 8003408:	080033e9 	.word	0x080033e9
 800340c:	080033e9 	.word	0x080033e9
 8003410:	080033e9 	.word	0x080033e9
 8003414:	080033e9 	.word	0x080033e9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033e9 	.word	0x080033e9
 8003420:	080033e9 	.word	0x080033e9
 8003424:	080033e9 	.word	0x080033e9
 8003428:	080033e9 	.word	0x080033e9
 800342c:	08003573 	.word	0x08003573
 8003430:	08003499 	.word	0x08003499
 8003434:	0800352d 	.word	0x0800352d
 8003438:	080033e9 	.word	0x080033e9
 800343c:	080033e9 	.word	0x080033e9
 8003440:	08003595 	.word	0x08003595
 8003444:	080033e9 	.word	0x080033e9
 8003448:	08003499 	.word	0x08003499
 800344c:	080033e9 	.word	0x080033e9
 8003450:	080033e9 	.word	0x080033e9
 8003454:	08003535 	.word	0x08003535
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	1d1a      	adds	r2, r3, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	602a      	str	r2, [r5, #0]
 8003460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003468:	2301      	movs	r3, #1
 800346a:	e0a0      	b.n	80035ae <_printf_i+0x1ee>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	0607      	lsls	r7, r0, #24
 8003472:	f103 0104 	add.w	r1, r3, #4
 8003476:	6029      	str	r1, [r5, #0]
 8003478:	d501      	bpl.n	800347e <_printf_i+0xbe>
 800347a:	681e      	ldr	r6, [r3, #0]
 800347c:	e003      	b.n	8003486 <_printf_i+0xc6>
 800347e:	0646      	lsls	r6, r0, #25
 8003480:	d5fb      	bpl.n	800347a <_printf_i+0xba>
 8003482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003486:	2e00      	cmp	r6, #0
 8003488:	da03      	bge.n	8003492 <_printf_i+0xd2>
 800348a:	232d      	movs	r3, #45	; 0x2d
 800348c:	4276      	negs	r6, r6
 800348e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003492:	230a      	movs	r3, #10
 8003494:	4859      	ldr	r0, [pc, #356]	; (80035fc <_printf_i+0x23c>)
 8003496:	e012      	b.n	80034be <_printf_i+0xfe>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	1d19      	adds	r1, r3, #4
 800349e:	6029      	str	r1, [r5, #0]
 80034a0:	0605      	lsls	r5, r0, #24
 80034a2:	d501      	bpl.n	80034a8 <_printf_i+0xe8>
 80034a4:	681e      	ldr	r6, [r3, #0]
 80034a6:	e002      	b.n	80034ae <_printf_i+0xee>
 80034a8:	0641      	lsls	r1, r0, #25
 80034aa:	d5fb      	bpl.n	80034a4 <_printf_i+0xe4>
 80034ac:	881e      	ldrh	r6, [r3, #0]
 80034ae:	2f6f      	cmp	r7, #111	; 0x6f
 80034b0:	bf0c      	ite	eq
 80034b2:	2308      	moveq	r3, #8
 80034b4:	230a      	movne	r3, #10
 80034b6:	4851      	ldr	r0, [pc, #324]	; (80035fc <_printf_i+0x23c>)
 80034b8:	2100      	movs	r1, #0
 80034ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034be:	6865      	ldr	r5, [r4, #4]
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	bfa8      	it	ge
 80034c4:	6821      	ldrge	r1, [r4, #0]
 80034c6:	60a5      	str	r5, [r4, #8]
 80034c8:	bfa4      	itt	ge
 80034ca:	f021 0104 	bicge.w	r1, r1, #4
 80034ce:	6021      	strge	r1, [r4, #0]
 80034d0:	b90e      	cbnz	r6, 80034d6 <_printf_i+0x116>
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d04b      	beq.n	800356e <_printf_i+0x1ae>
 80034d6:	4615      	mov	r5, r2
 80034d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034dc:	fb03 6711 	mls	r7, r3, r1, r6
 80034e0:	5dc7      	ldrb	r7, [r0, r7]
 80034e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034e6:	4637      	mov	r7, r6
 80034e8:	42bb      	cmp	r3, r7
 80034ea:	460e      	mov	r6, r1
 80034ec:	d9f4      	bls.n	80034d8 <_printf_i+0x118>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d10b      	bne.n	800350a <_printf_i+0x14a>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	07de      	lsls	r6, r3, #31
 80034f6:	d508      	bpl.n	800350a <_printf_i+0x14a>
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	6861      	ldr	r1, [r4, #4]
 80034fc:	4299      	cmp	r1, r3
 80034fe:	bfde      	ittt	le
 8003500:	2330      	movle	r3, #48	; 0x30
 8003502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800350a:	1b52      	subs	r2, r2, r5
 800350c:	6122      	str	r2, [r4, #16]
 800350e:	464b      	mov	r3, r9
 8003510:	4621      	mov	r1, r4
 8003512:	4640      	mov	r0, r8
 8003514:	f8cd a000 	str.w	sl, [sp]
 8003518:	aa03      	add	r2, sp, #12
 800351a:	f7ff fedf 	bl	80032dc <_printf_common>
 800351e:	3001      	adds	r0, #1
 8003520:	d14a      	bne.n	80035b8 <_printf_i+0x1f8>
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	b004      	add	sp, #16
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2778      	movs	r7, #120	; 0x78
 8003536:	4832      	ldr	r0, [pc, #200]	; (8003600 <_printf_i+0x240>)
 8003538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	6829      	ldr	r1, [r5, #0]
 8003540:	061f      	lsls	r7, r3, #24
 8003542:	f851 6b04 	ldr.w	r6, [r1], #4
 8003546:	d402      	bmi.n	800354e <_printf_i+0x18e>
 8003548:	065f      	lsls	r7, r3, #25
 800354a:	bf48      	it	mi
 800354c:	b2b6      	uxthmi	r6, r6
 800354e:	07df      	lsls	r7, r3, #31
 8003550:	bf48      	it	mi
 8003552:	f043 0320 	orrmi.w	r3, r3, #32
 8003556:	6029      	str	r1, [r5, #0]
 8003558:	bf48      	it	mi
 800355a:	6023      	strmi	r3, [r4, #0]
 800355c:	b91e      	cbnz	r6, 8003566 <_printf_i+0x1a6>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f023 0320 	bic.w	r3, r3, #32
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	2310      	movs	r3, #16
 8003568:	e7a6      	b.n	80034b8 <_printf_i+0xf8>
 800356a:	4824      	ldr	r0, [pc, #144]	; (80035fc <_printf_i+0x23c>)
 800356c:	e7e4      	b.n	8003538 <_printf_i+0x178>
 800356e:	4615      	mov	r5, r2
 8003570:	e7bd      	b.n	80034ee <_printf_i+0x12e>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	6826      	ldr	r6, [r4, #0]
 8003576:	1d18      	adds	r0, r3, #4
 8003578:	6961      	ldr	r1, [r4, #20]
 800357a:	6028      	str	r0, [r5, #0]
 800357c:	0635      	lsls	r5, r6, #24
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	d501      	bpl.n	8003586 <_printf_i+0x1c6>
 8003582:	6019      	str	r1, [r3, #0]
 8003584:	e002      	b.n	800358c <_printf_i+0x1cc>
 8003586:	0670      	lsls	r0, r6, #25
 8003588:	d5fb      	bpl.n	8003582 <_printf_i+0x1c2>
 800358a:	8019      	strh	r1, [r3, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	4615      	mov	r5, r2
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	e7bc      	b.n	800350e <_printf_i+0x14e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	2100      	movs	r1, #0
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	602a      	str	r2, [r5, #0]
 800359c:	681d      	ldr	r5, [r3, #0]
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f859 	bl	8003658 <memchr>
 80035a6:	b108      	cbz	r0, 80035ac <_printf_i+0x1ec>
 80035a8:	1b40      	subs	r0, r0, r5
 80035aa:	6060      	str	r0, [r4, #4]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	6123      	str	r3, [r4, #16]
 80035b0:	2300      	movs	r3, #0
 80035b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b6:	e7aa      	b.n	800350e <_printf_i+0x14e>
 80035b8:	462a      	mov	r2, r5
 80035ba:	4649      	mov	r1, r9
 80035bc:	4640      	mov	r0, r8
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	47d0      	blx	sl
 80035c2:	3001      	adds	r0, #1
 80035c4:	d0ad      	beq.n	8003522 <_printf_i+0x162>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	079b      	lsls	r3, r3, #30
 80035ca:	d413      	bmi.n	80035f4 <_printf_i+0x234>
 80035cc:	68e0      	ldr	r0, [r4, #12]
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	4298      	cmp	r0, r3
 80035d2:	bfb8      	it	lt
 80035d4:	4618      	movlt	r0, r3
 80035d6:	e7a6      	b.n	8003526 <_printf_i+0x166>
 80035d8:	2301      	movs	r3, #1
 80035da:	4632      	mov	r2, r6
 80035dc:	4649      	mov	r1, r9
 80035de:	4640      	mov	r0, r8
 80035e0:	47d0      	blx	sl
 80035e2:	3001      	adds	r0, #1
 80035e4:	d09d      	beq.n	8003522 <_printf_i+0x162>
 80035e6:	3501      	adds	r5, #1
 80035e8:	68e3      	ldr	r3, [r4, #12]
 80035ea:	9903      	ldr	r1, [sp, #12]
 80035ec:	1a5b      	subs	r3, r3, r1
 80035ee:	42ab      	cmp	r3, r5
 80035f0:	dcf2      	bgt.n	80035d8 <_printf_i+0x218>
 80035f2:	e7eb      	b.n	80035cc <_printf_i+0x20c>
 80035f4:	2500      	movs	r5, #0
 80035f6:	f104 0619 	add.w	r6, r4, #25
 80035fa:	e7f5      	b.n	80035e8 <_printf_i+0x228>
 80035fc:	080037e1 	.word	0x080037e1
 8003600:	080037f2 	.word	0x080037f2

08003604 <memmove>:
 8003604:	4288      	cmp	r0, r1
 8003606:	b510      	push	{r4, lr}
 8003608:	eb01 0402 	add.w	r4, r1, r2
 800360c:	d902      	bls.n	8003614 <memmove+0x10>
 800360e:	4284      	cmp	r4, r0
 8003610:	4623      	mov	r3, r4
 8003612:	d807      	bhi.n	8003624 <memmove+0x20>
 8003614:	1e43      	subs	r3, r0, #1
 8003616:	42a1      	cmp	r1, r4
 8003618:	d008      	beq.n	800362c <memmove+0x28>
 800361a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800361e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003622:	e7f8      	b.n	8003616 <memmove+0x12>
 8003624:	4601      	mov	r1, r0
 8003626:	4402      	add	r2, r0
 8003628:	428a      	cmp	r2, r1
 800362a:	d100      	bne.n	800362e <memmove+0x2a>
 800362c:	bd10      	pop	{r4, pc}
 800362e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003636:	e7f7      	b.n	8003628 <memmove+0x24>

08003638 <_sbrk_r>:
 8003638:	b538      	push	{r3, r4, r5, lr}
 800363a:	2300      	movs	r3, #0
 800363c:	4d05      	ldr	r5, [pc, #20]	; (8003654 <_sbrk_r+0x1c>)
 800363e:	4604      	mov	r4, r0
 8003640:	4608      	mov	r0, r1
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	f7fd fc56 	bl	8000ef4 <_sbrk>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_sbrk_r+0x1a>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	b103      	cbz	r3, 8003652 <_sbrk_r+0x1a>
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000284 	.word	0x20000284

08003658 <memchr>:
 8003658:	4603      	mov	r3, r0
 800365a:	b510      	push	{r4, lr}
 800365c:	b2c9      	uxtb	r1, r1
 800365e:	4402      	add	r2, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	4618      	mov	r0, r3
 8003664:	d101      	bne.n	800366a <memchr+0x12>
 8003666:	2000      	movs	r0, #0
 8003668:	e003      	b.n	8003672 <memchr+0x1a>
 800366a:	7804      	ldrb	r4, [r0, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	428c      	cmp	r4, r1
 8003670:	d1f6      	bne.n	8003660 <memchr+0x8>
 8003672:	bd10      	pop	{r4, pc}

08003674 <memcpy>:
 8003674:	440a      	add	r2, r1
 8003676:	4291      	cmp	r1, r2
 8003678:	f100 33ff 	add.w	r3, r0, #4294967295
 800367c:	d100      	bne.n	8003680 <memcpy+0xc>
 800367e:	4770      	bx	lr
 8003680:	b510      	push	{r4, lr}
 8003682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003686:	4291      	cmp	r1, r2
 8003688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800368c:	d1f9      	bne.n	8003682 <memcpy+0xe>
 800368e:	bd10      	pop	{r4, pc}

08003690 <_realloc_r>:
 8003690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003694:	4680      	mov	r8, r0
 8003696:	4614      	mov	r4, r2
 8003698:	460e      	mov	r6, r1
 800369a:	b921      	cbnz	r1, 80036a6 <_realloc_r+0x16>
 800369c:	4611      	mov	r1, r2
 800369e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	f7ff bc37 	b.w	8002f14 <_malloc_r>
 80036a6:	b92a      	cbnz	r2, 80036b4 <_realloc_r+0x24>
 80036a8:	f7ff fbcc 	bl	8002e44 <_free_r>
 80036ac:	4625      	mov	r5, r4
 80036ae:	4628      	mov	r0, r5
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	f000 f81b 	bl	80036ee <_malloc_usable_size_r>
 80036b8:	4284      	cmp	r4, r0
 80036ba:	4607      	mov	r7, r0
 80036bc:	d802      	bhi.n	80036c4 <_realloc_r+0x34>
 80036be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036c2:	d812      	bhi.n	80036ea <_realloc_r+0x5a>
 80036c4:	4621      	mov	r1, r4
 80036c6:	4640      	mov	r0, r8
 80036c8:	f7ff fc24 	bl	8002f14 <_malloc_r>
 80036cc:	4605      	mov	r5, r0
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d0ed      	beq.n	80036ae <_realloc_r+0x1e>
 80036d2:	42bc      	cmp	r4, r7
 80036d4:	4622      	mov	r2, r4
 80036d6:	4631      	mov	r1, r6
 80036d8:	bf28      	it	cs
 80036da:	463a      	movcs	r2, r7
 80036dc:	f7ff ffca 	bl	8003674 <memcpy>
 80036e0:	4631      	mov	r1, r6
 80036e2:	4640      	mov	r0, r8
 80036e4:	f7ff fbae 	bl	8002e44 <_free_r>
 80036e8:	e7e1      	b.n	80036ae <_realloc_r+0x1e>
 80036ea:	4635      	mov	r5, r6
 80036ec:	e7df      	b.n	80036ae <_realloc_r+0x1e>

080036ee <_malloc_usable_size_r>:
 80036ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f2:	1f18      	subs	r0, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfbc      	itt	lt
 80036f8:	580b      	ldrlt	r3, [r1, r0]
 80036fa:	18c0      	addlt	r0, r0, r3
 80036fc:	4770      	bx	lr
	...

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
