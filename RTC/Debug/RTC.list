
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003750  08003750  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08003750  08003750  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003750  08003750  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08003758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200000e0  08003838  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003838  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006430  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8e  00000000  00000000  0002657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00028510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b1  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a8f  00000000  00000000  000292a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009919  00000000  00000000  00040d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083833  00000000  00000000  0004a651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000216c  00000000  00000000  000cde84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cfff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800365c 	.word	0x0800365c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	0800365c 	.word	0x0800365c

0800014c <MGPIO_voidInitPortPin>:

static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode);


void MGPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	791b      	ldrb	r3, [r3, #4]
 8000158:	73fb      	strb	r3, [r7, #15]
	uint8_t Copy_u8Mode = _gpio->GPIO_PinMode;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	795b      	ldrb	r3, [r3, #5]
 800015e:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000160:	7bfb      	ldrb	r3, [r7, #15]
 8000162:	2b0f      	cmp	r3, #15
 8000164:	d80d      	bhi.n	8000182 <MGPIO_voidInitPortPin+0x36>
	{
		return;
	}
	MGPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	7bba      	ldrb	r2, [r7, #14]
 800016c:	7bf9      	ldrb	r1, [r7, #15]
 800016e:	4618      	mov	r0, r3
 8000170:	f000 f80b 	bl	800018a <MGPIO_voidConfgPin_Mode>
	MGPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	799b      	ldrb	r3, [r3, #6]
 8000178:	4619      	mov	r1, r3
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f000 f84a 	bl	8000214 <MGPIO_voidWritePortPin>
 8000180:	e000      	b.n	8000184 <MGPIO_voidInitPortPin+0x38>
		return;
 8000182:	bf00      	nop
}
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <MGPIO_voidConfgPin_Mode>:


static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode)
{
 800018a:	b480      	push	{r7}
 800018c:	b083      	sub	sp, #12
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	2b0f      	cmp	r3, #15
 800019e:	d834      	bhi.n	800020a <MGPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	d815      	bhi.n	80001d2 <MGPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	78fa      	ldrb	r2, [r7, #3]
 80001ac:	0092      	lsls	r2, r2, #2
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	43d2      	mvns	r2, r2
 80001b6:	401a      	ands	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	78b9      	ldrb	r1, [r7, #2]
 80001c2:	78fa      	ldrb	r2, [r7, #3]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ca:	431a      	orrs	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e01c      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001d2:	78fb      	ldrb	r3, [r7, #3]
 80001d4:	2b0f      	cmp	r3, #15
 80001d6:	d819      	bhi.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	3b08      	subs	r3, #8
 80001dc:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	78fa      	ldrb	r2, [r7, #3]
 80001e4:	0092      	lsls	r2, r2, #2
 80001e6:	210f      	movs	r1, #15
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	401a      	ands	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	78b9      	ldrb	r1, [r7, #2]
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	e000      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
		return;
 800020a:	bf00      	nop
	}
}
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <MGPIO_voidWritePortPin>:



void MGPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8_t Copy_u8Val)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	791b      	ldrb	r3, [r3, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d816      	bhi.n	8000256 <MGPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d109      	bne.n	8000242 <MGPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	2301      	movs	r3, #1
 8000236:	fa03 f202 	lsl.w	r2, r3, r2
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	611a      	str	r2, [r3, #16]
 8000240:	e00a      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	461a      	mov	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	fa03 f202 	lsl.w	r2, r3, r2
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	e000      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
		return;
 8000256:	bf00      	nop
	}
}
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <MGPIO_u8ReadPortPin>:


uint8_t MGPIO_u8ReadPortPin(GPIO_ConfigType *_gpio)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if(_gpio->GPIO_PinNumber > 15)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	791b      	ldrb	r3, [r3, #4]
 800026c:	2b0f      	cmp	r3, #15
 800026e:	d901      	bls.n	8000274 <MGPIO_u8ReadPortPin+0x14>
	{
		return 0;
 8000270:	2300      	movs	r3, #0
 8000272:	e009      	b.n	8000288 <MGPIO_u8ReadPortPin+0x28>
	}

	return GET_BIT(_gpio->GPIOx->IDR , _gpio->GPIO_PinNumber);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	7912      	ldrb	r2, [r2, #4]
 800027e:	40d3      	lsrs	r3, r2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <read_keypad>:
	}
}


char read_keypad (ST_Keypad_t *_keypad_obj)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint8_t value = NOTPRESSED;
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	73bb      	strb	r3, [r7, #14]
 80002a4:	e043      	b.n	800032e <read_keypad+0x9a>
	{
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	737b      	strb	r3, [r7, #13]
 80002aa:	e00a      	b.n	80002c2 <read_keypad+0x2e>
		{
			MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[counter]), GPIO_HIGH);
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffac 	bl	8000214 <MGPIO_voidWritePortPin>
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002bc:	7b7b      	ldrb	r3, [r7, #13]
 80002be:	3301      	adds	r3, #1
 80002c0:	737b      	strb	r3, [r7, #13]
 80002c2:	7b7b      	ldrb	r3, [r7, #13]
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d9f1      	bls.n	80002ac <read_keypad+0x18>
		}

		MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[rows_counter]), GPIO_LOW);
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff9e 	bl	8000214 <MGPIO_voidWritePortPin>

		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80002d8:	2300      	movs	r3, #0
 80002da:	733b      	strb	r3, [r7, #12]
 80002dc:	e021      	b.n	8000322 <read_keypad+0x8e>
		{
			if( GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])))
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	3304      	adds	r3, #4
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffb9 	bl	8000260 <MGPIO_u8ReadPortPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d113      	bne.n	800031c <read_keypad+0x88>
			{
				while (GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])));
 80002f4:	bf00      	nop
 80002f6:	7b3b      	ldrb	r3, [r7, #12]
 80002f8:	3304      	adds	r3, #4
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffad 	bl	8000260 <MGPIO_u8ReadPortPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f4      	beq.n	80002f6 <read_keypad+0x62>
				value = btn_values[rows_counter][columns_counter];
 800030c:	7bba      	ldrb	r2, [r7, #14]
 800030e:	7b3b      	ldrb	r3, [r7, #12]
 8000310:	490b      	ldr	r1, [pc, #44]	; (8000340 <read_keypad+0xac>)
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	440a      	add	r2, r1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 800031c:	7b3b      	ldrb	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	733b      	strb	r3, [r7, #12]
 8000322:	7b3b      	ldrb	r3, [r7, #12]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d9da      	bls.n	80002de <read_keypad+0x4a>
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	3301      	adds	r3, #1
 800032c:	73bb      	strb	r3, [r7, #14]
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d9b8      	bls.n	80002a6 <read_keypad+0x12>
			}
		}
	}
	return value;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	080036f4 	.word	0x080036f4

08000344 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t l_data_pins_counter = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d05e      	beq.n	8000414 <lcd_4bit_intialize+0xd0>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2202      	movs	r2, #2
 800035a:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2202      	movs	r2, #2
 8000360:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2202      	movs	r2, #2
 8000366:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	759a      	strb	r2, [r3, #22]

		MGPIO_voidInitPortPin(&(lcd->lcd_rs));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_rw));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3308      	adds	r3, #8
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff fee0 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_en));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3310      	adds	r3, #16
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fedb 	bl	800014c <MGPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e018      	b.n	80003ce <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	3303      	adds	r3, #3
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	2202      	movs	r2, #2
 80003a8:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	3303      	adds	r3, #3
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	4413      	add	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	3303      	adds	r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff fec2 	bl	800014c <MGPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3301      	adds	r3, #1
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d9e3      	bls.n	800039c <lcd_4bit_intialize+0x58>
		}

		HAL_Delay(20);
 80003d4:	2014      	movs	r0, #20
 80003d6:	f000 fdff 	bl	8000fd8 <HAL_Delay>
		lcd_4bit_send_command(lcd, 0x33);
 80003da:	2133      	movs	r1, #51	; 0x33
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f81d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 80003e2:	2132      	movs	r1, #50	; 0x32
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f819 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 80003ea:	2128      	movs	r1, #40	; 0x28
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 f815 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 80003f2:	210c      	movs	r1, #12
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f811 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 80003fa:	2106      	movs	r1, #6
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f80d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f809 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 800040a:	2101      	movs	r1, #1
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f805 	bl	800041c <lcd_4bit_send_command>
 8000412:	e000      	b.n	8000416 <lcd_4bit_intialize+0xd2>
		return;
 8000414:	bf00      	nop
	}
}
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8_t command)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01d      	beq.n	800046a <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feee 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3308      	adds	r3, #8
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fee8 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	091b      	lsrs	r3, r3, #4
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f8d3 	bl	80005f8 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f90c 	bl	8000670 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	4619      	mov	r1, r3
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f8cb 	bl	80005f8 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f904 	bl	8000670 <lcd_4bit_send_enable_signal>
 8000468:	e000      	b.n	800046c <lcd_4bit_send_command+0x50>
		return;
 800046a:	bf00      	nop
	}
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_4bit_send_char_data>:
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
	}
}

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8_t data)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d01d      	beq.n	80004c0 <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fec3 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3308      	adds	r3, #8
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff febd 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f8a8 	bl	80005f8 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f8e1 	bl	8000670 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8a0 	bl	80005f8 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f8d9 	bl	8000670 <lcd_4bit_send_enable_signal>
 80004be:	e000      	b.n	80004c2 <lcd_4bit_send_char_data+0x50>
		return;
 80004c0:	bf00      	nop
	}
}
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	4608      	mov	r0, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	70fb      	strb	r3, [r7, #3]
 80004da:	460b      	mov	r3, r1
 80004dc:	70bb      	strb	r3, [r7, #2]
 80004de:	4613      	mov	r3, r2
 80004e0:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80004e8:	78ba      	ldrb	r2, [r7, #2]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8e6 	bl	80006c0 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 80004f4:	787b      	ldrb	r3, [r7, #1]
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ffba 	bl	8000472 <lcd_4bit_send_char_data>
 80004fe:	e000      	b.n	8000502 <lcd_4bit_send_char_data_pos+0x3a>
		return;
 8000500:	bf00      	nop
	}
}
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	72fb      	strb	r3, [r7, #11]
 8000516:	4613      	mov	r3, r2
 8000518:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 8000520:	7aba      	ldrb	r2, [r7, #10]
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	4619      	mov	r1, r3
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f000 f8ca 	bl	80006c0 <lcd_4bit_set_cursor>
		while(*str)
 800052c:	e007      	b.n	800053e <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff ff9a 	bl	8000472 <lcd_4bit_send_char_data>
		while(*str)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f3      	bne.n	800052e <lcd_4bit_send_string_pos+0x26>
 8000546:	e000      	b.n	800054a <lcd_4bit_send_string_pos+0x42>
		return;
 8000548:	bf00      	nop
		}
	}
}
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <LCD_WriteNumber_Position>:
	}
}


void LCD_WriteNumber_Position(uint32_t Number, uint8_t row, uint8_t column)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	4613      	mov	r3, r2
 800055e:	70bb      	strb	r3, [r7, #2]
	column--;
 8000560:	78bb      	ldrb	r3, [r7, #2]
 8000562:	3b01      	subs	r3, #1
 8000564:	70bb      	strb	r3, [r7, #2]
	uint8_t i=0, arr[10], j;
 8000566:	2300      	movs	r3, #0
 8000568:	75fb      	strb	r3, [r7, #23]
	if(Number==0) lcd_4bit_send_char_data_pos(&lcd_1, row, column, '0');
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d121      	bne.n	80005b4 <LCD_WriteNumber_Position+0x64>
 8000570:	78ba      	ldrb	r2, [r7, #2]
 8000572:	78f9      	ldrb	r1, [r7, #3]
 8000574:	2330      	movs	r3, #48	; 0x30
 8000576:	481e      	ldr	r0, [pc, #120]	; (80005f0 <LCD_WriteNumber_Position+0xa0>)
 8000578:	f7ff ffa6 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
		{
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
		}
	}
}
 800057c:	e034      	b.n	80005e8 <LCD_WriteNumber_Position+0x98>
			arr[i]= Number%10 +'0';
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <LCD_WriteNumber_Position+0xa4>)
 8000582:	fba3 2301 	umull	r2, r3, r3, r1
 8000586:	08da      	lsrs	r2, r3, #3
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1aca      	subs	r2, r1, r3
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	3230      	adds	r2, #48	; 0x30
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	3318      	adds	r3, #24
 800059c:	443b      	add	r3, r7
 800059e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			Number /= 10;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <LCD_WriteNumber_Position+0xa4>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	607b      	str	r3, [r7, #4]
			i++;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	3301      	adds	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]
		while(Number)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1e1      	bne.n	800057e <LCD_WriteNumber_Position+0x2e>
		for(j=i ; j>0 ;j--)
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	75bb      	strb	r3, [r7, #22]
 80005be:	e010      	b.n	80005e2 <LCD_WriteNumber_Position+0x92>
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	3301      	adds	r3, #1
 80005c4:	70bb      	strb	r3, [r7, #2]
 80005c6:	7dbb      	ldrb	r3, [r7, #22]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	3318      	adds	r3, #24
 80005cc:	443b      	add	r3, r7
 80005ce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005d2:	78ba      	ldrb	r2, [r7, #2]
 80005d4:	78f9      	ldrb	r1, [r7, #3]
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <LCD_WriteNumber_Position+0xa0>)
 80005d8:	f7ff ff76 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	3b01      	subs	r3, #1
 80005e0:	75bb      	strb	r3, [r7, #22]
 80005e2:	7dbb      	ldrb	r3, [r7, #22]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1eb      	bne.n	80005c0 <LCD_WriteNumber_Position+0x70>
}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000040 	.word	0x20000040
 80005f4:	cccccccd 	.word	0xcccccccd

080005f8 <lcd_send_4bits>:




static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8_t _data_command)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	MGPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8_t)0x01);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 0218 	add.w	r2, r3, #24
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f7ff fdfd 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8_t)0x01);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0220 	add.w	r2, r3, #32
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	085b      	lsrs	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	4610      	mov	r0, r2
 8000630:	f7ff fdf0 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8_t)0x01);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	4610      	mov	r0, r2
 800064a:	f7ff fde3 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8_t)0x01);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f7ff fdd6 	bl	8000214 <MGPIO_voidWritePortPin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3310      	adds	r3, #16
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fdc8 	bl	8000214 <MGPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8_t i=0 ; i<10 ; i++);
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	e002      	b.n	8000690 <lcd_4bit_send_enable_signal+0x20>
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b09      	cmp	r3, #9
 8000694:	d9f9      	bls.n	800068a <lcd_4bit_send_enable_signal+0x1a>
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3310      	adds	r3, #16
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fdb9 	bl	8000214 <MGPIO_voidWritePortPin>
	for(uint16_t i=0 ; i<2000 ; i++);
 80006a2:	2300      	movs	r3, #0
 80006a4:	81bb      	strh	r3, [r7, #12]
 80006a6:	e002      	b.n	80006ae <lcd_4bit_send_enable_signal+0x3e>
 80006a8:	89bb      	ldrh	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	81bb      	strh	r3, [r7, #12]
 80006ae:	89bb      	ldrh	r3, [r7, #12]
 80006b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006b4:	d3f8      	bcc.n	80006a8 <lcd_4bit_send_enable_signal+0x38>
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80006d0:	78bb      	ldrb	r3, [r7, #2]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	3b01      	subs	r3, #1
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d82a      	bhi.n	8000734 <lcd_4bit_set_cursor+0x74>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <lcd_4bit_set_cursor+0x24>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	08000705 	.word	0x08000705
 80006ec:	08000715 	.word	0x08000715
 80006f0:	08000725 	.word	0x08000725
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 80006f4:	78bb      	ldrb	r3, [r7, #2]
 80006f6:	3b80      	subs	r3, #128	; 0x80
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff fe8d 	bl	800041c <lcd_4bit_send_command>
        	break;
 8000702:	e017      	b.n	8000734 <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 8000704:	78bb      	ldrb	r3, [r7, #2]
 8000706:	3b40      	subs	r3, #64	; 0x40
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fe85 	bl	800041c <lcd_4bit_send_command>
        	break;
 8000712:	e00f      	b.n	8000734 <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 8000714:	78bb      	ldrb	r3, [r7, #2]
 8000716:	3b6c      	subs	r3, #108	; 0x6c
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe7d 	bl	800041c <lcd_4bit_send_command>
        	break;
 8000722:	e007      	b.n	8000734 <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	3b2c      	subs	r3, #44	; 0x2c
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fe75 	bl	800041c <lcd_4bit_send_command>
        	break;
 8000732:	bf00      	nop

        default : ;
    }
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MRCC_voidPeripheralClockEnable>:
	}
}


void MRCC_voidPeripheralClockEnable(uint8_t Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d01c      	beq.n	800078c <MRCC_voidPeripheralClockEnable+0x50>
 8000752:	2b02      	cmp	r3, #2
 8000754:	dc25      	bgt.n	80007a2 <MRCC_voidPeripheralClockEnable+0x66>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <MRCC_voidPeripheralClockEnable+0x24>
 800075a:	2b01      	cmp	r3, #1
 800075c:	d00b      	beq.n	8000776 <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 800075e:	e020      	b.n	80007a2 <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6153      	str	r3, [r2, #20]
		break;
 8000774:	e016      	b.n	80007a4 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 8000786:	430b      	orrs	r3, r1
 8000788:	61d3      	str	r3, [r2, #28]
		break;
 800078a:	e00b      	b.n	80007a4 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	79ba      	ldrb	r2, [r7, #6]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <MRCC_voidPeripheralClockEnable+0x74>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6193      	str	r3, [r2, #24]
		break;
 80007a0:	e000      	b.n	80007a4 <MRCC_voidPeripheralClockEnable+0x68>
		break;
 80007a2:	bf00      	nop
	}
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a23      	ldr	r2, [pc, #140]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <MX_GPIO_Init+0xc0>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_GPIO_Init+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_GPIO_Init+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_GPIO_Init+0xc0>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_GPIO_Init+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000830:	f000 fe5e 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000834:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4619      	mov	r1, r3
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <MX_GPIO_Init+0xc4>)
 800084e:	f000 fccb 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000852:	2378      	movs	r3, #120	; 0x78
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0xc8>)
 8000866:	f000 fcbf 	bl	80011e8 <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800
 800087c:	40010c00 	.word	0x40010c00

08000880 <set_time>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

void set_time (void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x10;
 8000886:	2310      	movs	r3, #16
 8000888:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800088a:	2320      	movs	r3, #32
 800088c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800088e:	2330      	movs	r3, #48	; 0x30
 8000890:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <set_time+0x50>)
 800089a:	f001 fc5f 	bl	800215c <HAL_RTC_SetTime>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800089e:	2302      	movs	r3, #2
 80008a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80008a2:	2308      	movs	r3, #8
 80008a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 80008a6:	2312      	movs	r3, #18
 80008a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <set_time+0x50>)
 80008b6:	f001 fdc1 	bl	800243c <HAL_RTC_SetDate>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80008ba:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80008be:	2101      	movs	r1, #1
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <set_time+0x50>)
 80008c2:	f002 f9ff 	bl	8002cc4 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000012c 	.word	0x2000012c

080008d4 <LcdUpdate>:


volatile int TotalCounts=0,FlagDetect=0;

void LcdUpdate()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	for(int i=0 ; i<2 ; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e010      	b.n	8000902 <LcdUpdate+0x2e>
	{
		LCD_WriteNumber_Position(ArrayTimers[i], 1, ArrayPosition[i]);
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <LcdUpdate+0x40>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e8:	4618      	mov	r0, r3
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LcdUpdate+0x44>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2101      	movs	r1, #1
 80008f8:	f7ff fe2a 	bl	8000550 <LCD_WriteNumber_Position>
	for(int i=0 ; i<2 ; i++)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3301      	adds	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b01      	cmp	r3, #1
 8000906:	ddeb      	ble.n	80008e0 <LcdUpdate+0xc>
	}
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000007c 	.word	0x2000007c
 8000918:	20000080 	.word	0x20000080

0800091c <MinDetect>:

void MinDetect()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	for(int i=0 ; i<2 ; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	e01f      	b.n	8000968 <MinDetect+0x4c>
	{
		if((ArrayCounter[i][1] -1 == CurrentSec) && FlagDetect==0)
 8000928:	4a30      	ldr	r2, [pc, #192]	; (80009ec <MinDetect+0xd0>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	885b      	ldrh	r3, [r3, #2]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <MinDetect+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d112      	bne.n	8000962 <MinDetect+0x46>
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MinDetect+0xd8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10e      	bne.n	8000962 <MinDetect+0x46>
		{
			ArrayTimers[i]--;
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MinDetect+0xdc>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094c:	3b01      	subs	r3, #1
 800094e:	b299      	uxth	r1, r3
 8000950:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <MinDetect+0xdc>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlagDetect=1;
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MinDetect+0xd8>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
			LcdUpdate();
 800095e:	f7ff ffb9 	bl	80008d4 <LcdUpdate>
	for(int i=0 ; i<2 ; i++)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3301      	adds	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b01      	cmp	r3, #1
 800096c:	dddc      	ble.n	8000928 <MinDetect+0xc>
		}
	}

	if((ArrayCounter[0][1] == CurrentSec) || (ArrayCounter[1][1] == CurrentSec) || CurrentSec==1)
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MinDetect+0xd0>)
 8000970:	885b      	ldrh	r3, [r3, #2]
 8000972:	461a      	mov	r2, r3
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MinDetect+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d00a      	beq.n	8000992 <MinDetect+0x76>
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MinDetect+0xd0>)
 800097e:	88db      	ldrh	r3, [r3, #6]
 8000980:	461a      	mov	r2, r3
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MinDetect+0xd4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d003      	beq.n	8000992 <MinDetect+0x76>
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MinDetect+0xd4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d102      	bne.n	8000998 <MinDetect+0x7c>
		FlagDetect=0;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MinDetect+0xd8>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

	if(CurrentSec == 59 && FlagDetect==0)
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MinDetect+0xd4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b3b      	cmp	r3, #59	; 0x3b
 800099e:	d112      	bne.n	80009c6 <MinDetect+0xaa>
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MinDetect+0xd8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10e      	bne.n	80009c6 <MinDetect+0xaa>
	{
		TotalCounts++;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MinDetect+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a13      	ldr	r2, [pc, #76]	; (80009fc <MinDetect+0xe0>)
 80009b0:	6013      	str	r3, [r2, #0]
		FlagDetect=1;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MinDetect+0xd8>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	601a      	str	r2, [r3, #0]
		LCD_WriteNumber_Position(TotalCounts,1,1);
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MinDetect+0xe0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fdc5 	bl	8000550 <LCD_WriteNumber_Position>
	}

	LCD_WriteNumber_Position(CurrentMin,1,5);
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MinDetect+0xe4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2205      	movs	r2, #5
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fdbe 	bl	8000550 <LCD_WriteNumber_Position>
	LCD_WriteNumber_Position(CurrentSec,2,5);
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MinDetect+0xd4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2205      	movs	r2, #5
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fdb7 	bl	8000550 <LCD_WriteNumber_Position>

	/* LCD Prnt */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000011c 	.word	0x2000011c
 80009f0:	20000114 	.word	0x20000114
 80009f4:	20000128 	.word	0x20000128
 80009f8:	2000007c 	.word	0x2000007c
 80009fc:	20000124 	.word	0x20000124
 8000a00:	20000118 	.word	0x20000118

08000a04 <get_time>:

void get_time(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

   //Get the RTC current Time
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4816      	ldr	r0, [pc, #88]	; (8000a6c <get_time+0x68>)
 8000a12:	f001 fc3b 	bl	800228c <HAL_RTC_GetTime>

  // Get the RTC current Date
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <get_time+0x68>)
 8000a1e:	f001 fdc3 	bl	80025a8 <HAL_RTC_GetDate>

  CurrentSec = gTime.Seconds;
 8000a22:	78bb      	ldrb	r3, [r7, #2]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <get_time+0x6c>)
 8000a28:	601a      	str	r2, [r3, #0]
  CurrentMin = gTime.Minutes;
 8000a2a:	787b      	ldrb	r3, [r7, #1]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <get_time+0x70>)
 8000a30:	601a      	str	r2, [r3, #0]

   //Display time Format: hh:mm:ss
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000a32:	783b      	ldrb	r3, [r7, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	787b      	ldrb	r3, [r7, #1]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	490d      	ldr	r1, [pc, #52]	; (8000a78 <get_time+0x74>)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <get_time+0x78>)
 8000a44:	f002 f958 	bl	8002cf8 <siprintf>

  // Display date Format: mm-dd-yy
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	797b      	ldrb	r3, [r7, #5]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	4909      	ldr	r1, [pc, #36]	; (8000a80 <get_time+0x7c>)
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <get_time+0x80>)
 8000a5e:	f002 f94b 	bl	8002cf8 <siprintf>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000012c 	.word	0x2000012c
 8000a70:	20000114 	.word	0x20000114
 8000a74:	20000118 	.word	0x20000118
 8000a78:	08003674 	.word	0x08003674
 8000a7c:	200000fc 	.word	0x200000fc
 8000a80:	08003684 	.word	0x08003684
 8000a84:	20000108 	.word	0x20000108

08000a88 <GetKeypadValue>:

uint16_t GetKeypadValue()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	uint16_t retVal = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	80fb      	strh	r3, [r7, #6]
	keypadVal = NOTPRESSED;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <GetKeypadValue+0x68>)
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	701a      	strb	r2, [r3, #0]

	while(keypadVal != '*')
 8000a98:	e01e      	b.n	8000ad8 <GetKeypadValue+0x50>
	{
		keypadVal = read_keypad(&keypad_1);
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <GetKeypadValue+0x6c>)
 8000a9c:	f7ff fbfa 	bl	8000294 <read_keypad>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <GetKeypadValue+0x68>)
 8000aa6:	701a      	strb	r2, [r3, #0]
		if(keypadVal>='0' && keypadVal<='9')
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <GetKeypadValue+0x68>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b2f      	cmp	r3, #47	; 0x2f
 8000aae:	d913      	bls.n	8000ad8 <GetKeypadValue+0x50>
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <GetKeypadValue+0x68>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b39      	cmp	r3, #57	; 0x39
 8000ab6:	d80f      	bhi.n	8000ad8 <GetKeypadValue+0x50>
		{
			retVal = ((keypadVal - '0') + (retVal * 10));
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <GetKeypadValue+0x68>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	0089      	lsls	r1, r1, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3b30      	subs	r3, #48	; 0x30
 8000ad0:	80fb      	strh	r3, [r7, #6]
			keypadVal = NOTPRESSED;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <GetKeypadValue+0x68>)
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	701a      	strb	r2, [r3, #0]
	while(keypadVal != '*')
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <GetKeypadValue+0x68>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ade:	d1dc      	bne.n	8000a9a <GetKeypadValue+0x12>
		}
	}

	keypadVal = NOTPRESSED;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <GetKeypadValue+0x68>)
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000078 	.word	0x20000078
 8000af4:	20000000 	.word	0x20000000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fa09 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f863 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f7ff fe55 	bl	80007b4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b0a:	f000 f8bf 	bl	8000c8c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000b0e:	2102      	movs	r1, #2
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fe13 	bl	800073c <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000b16:	2103      	movs	r1, #3
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f7ff fe0f 	bl	800073c <MRCC_voidPeripheralClockEnable>

	lcd_4bit_intialize(&lcd_1);
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <main+0xb8>)
 8000b20:	f7ff fc10 	bl	8000344 <lcd_4bit_intialize>

	lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Enter 1st Mins");
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <main+0xbc>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <main+0xb8>)
 8000b2c:	f7ff fcec 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[0][0] = GetKeypadValue();
 8000b30:	f7ff ffaa 	bl	8000a88 <GetKeypadValue>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <main+0xc0>)
 8000b3a:	801a      	strh	r2, [r3, #0]

	lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Enter 1st Secs");
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0xc4>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2101      	movs	r1, #1
 8000b42:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <main+0xb8>)
 8000b44:	f7ff fce0 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[0][1] = GetKeypadValue();
 8000b48:	f7ff ff9e 	bl	8000a88 <GetKeypadValue>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <main+0xc0>)
 8000b52:	805a      	strh	r2, [r3, #2]

	lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Enter 2nd Mins");
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <main+0xc8>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <main+0xb8>)
 8000b5c:	f7ff fcd4 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[1][0] = GetKeypadValue();
 8000b60:	f7ff ff92 	bl	8000a88 <GetKeypadValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <main+0xc0>)
 8000b6a:	809a      	strh	r2, [r3, #4]

	lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Enter 2nd Secs");
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <main+0xcc>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2101      	movs	r1, #1
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <main+0xb8>)
 8000b74:	f7ff fcc8 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayCounter[1][1] = GetKeypadValue();
 8000b78:	f7ff ff86 	bl	8000a88 <GetKeypadValue>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <main+0xc0>)
 8000b82:	80da      	strh	r2, [r3, #6]

  set_time();
 8000b84:	f7ff fe7c 	bl	8000880 <set_time>
  LcdUpdate();
 8000b88:	f7ff fea4 	bl	80008d4 <LcdUpdate>
  LCD_WriteNumber_Position(TotalCounts,1,1);
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <main+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fcdb 	bl	8000550 <LCD_WriteNumber_Position>
  uint8_t k=22;
 8000b9a:	2316      	movs	r3, #22
 8000b9c:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 get_time();
 8000b9e:	f7ff ff31 	bl	8000a04 <get_time>
	 MinDetect();
 8000ba2:	f7ff febb 	bl	800091c <MinDetect>
	 HAL_Delay(100);
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f000 fa16 	bl	8000fd8 <HAL_Delay>
	 get_time();
 8000bac:	e7f7      	b.n	8000b9e <main+0xa6>
 8000bae:	bf00      	nop
 8000bb0:	20000040 	.word	0x20000040
 8000bb4:	08003694 	.word	0x08003694
 8000bb8:	2000011c 	.word	0x2000011c
 8000bbc:	080036a4 	.word	0x080036a4
 8000bc0:	080036b4 	.word	0x080036b4
 8000bc4:	080036c4 	.word	0x080036c4
 8000bc8:	20000124 	.word	0x20000124

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 f8ac 	bl	8002d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fc88 	bl	8001538 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c2e:	f000 f828 	bl	8000c82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fef4 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c5a:	f000 f812 	bl	8000c82 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f86a 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c76:	f000 f804 	bl	8000c82 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
}
 8000c88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <Error_Handler+0x8>

08000c8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	801a      	strh	r2, [r3, #0]
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MX_RTC_Init+0xc4>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cc2:	4822      	ldr	r0, [pc, #136]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000cc4:	f001 f9b4 	bl	8002030 <HAL_RTC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000cce:	f7ff ffd8 	bl	8000c82 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000ce8:	f001 fa38 	bl	800215c <HAL_RTC_SetTime>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f7ff ffc6 	bl	8000c82 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000d10:	f001 fb94 	bl	800243c <HAL_RTC_SetDate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f7ff ffb2 	bl	8000c82 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_RTC_Init+0xc0>)
 8000d36:	f001 fc8b 	bl	8002650 <HAL_RTC_SetAlarm>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000d40:	f7ff ff9f 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000012c 	.word	0x2000012c
 8000d50:	40002800 	.word	0x40002800

08000d54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_RTC_MspInit+0x3c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d110      	bne.n	8000d88 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d66:	f000 fbdb 	bl	8001520 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_RTC_MspInit+0x40>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_RTC_MspInit+0x40>)
 8000d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_RTC_MspInit+0x40>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_RTC_MspInit+0x44>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40002800 	.word	0x40002800
 8000d94:	40021000 	.word	0x40021000
 8000d98:	4242043c 	.word	0x4242043c

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_MspInit+0x60>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_MspInit+0x60>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f8ab 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f001 ff62 	bl	8002d48 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20005000 	.word	0x20005000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	20000140 	.word	0x20000140
 8000eb8:	20000290 	.word	0x20000290

08000ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff ffe5 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f001 ff2f 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fdff 	bl	8000af8 <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000f04:	08003758 	.word	0x08003758
  ldr r2, =_sbss
 8000f08:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000f0c:	20000290 	.word	0x20000290

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f92b 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff ff34 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f935 	bl	80011ce <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f90b 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000084 	.word	0x20000084
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	20000088 	.word	0x20000088

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	2000008c 	.word	0x2000008c
 8000fc0:	20000144 	.word	0x20000144

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000144 	.word	0x20000144

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff0 	bl	8000fc4 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffe0 	bl	8000fc4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000008c 	.word	0x2000008c

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff90 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff49 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	; (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	611a      	str	r2, [r3, #16]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	420e0020 	.word	0x420e0020

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e272      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001564:	4b8f      	ldr	r3, [pc, #572]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
 8001570:	4b8c      	ldr	r3, [pc, #560]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_RCC_OscConfig+0x12c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d168      	bne.n	8001664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e24c      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x76>
 80015a0:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e02e      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xbc>
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015f4:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fcd6 	bl	8000fc4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fcd2 	bl	8000fc4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e200      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xe4>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcc2 	bl	8000fc4 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcbe 	bl	8000fc4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ec      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x10c>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c0      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4939      	ldr	r1, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fc77 	bl	8000fc4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc73 	bl	8000fc4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc56 	bl	8000fc4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fc52 	bl	8000fc4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e180      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03a      	beq.n	80017bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fc36 	bl	8000fc4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fc32 	bl	8000fc4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e160      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fac4 	bl	8001d08 <RCC_Delay>
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fc1c 	bl	8000fc4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc18 	bl	8000fc4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d908      	bls.n	80017b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e146      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420000 	.word	0x42420000
 80017ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e9      	bne.n	8001790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a6 	beq.w	8001916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a87      	ldr	r2, [pc, #540]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b85      	ldr	r3, [pc, #532]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d118      	bne.n	8001834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180e:	f7ff fbd9 	bl	8000fc4 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff fbd5 	bl	8000fc4 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e103      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x312>
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x334>
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a69      	ldr	r2, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	e01c      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x356>
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb89 	bl	8000fc4 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff fb85 	bl	8000fc4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0b1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ee      	beq.n	80018b6 <HAL_RCC_OscConfig+0x37e>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fb73 	bl	8000fc4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fb6f 	bl	8000fc4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e09b      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d105      	bne.n	8001916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d061      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d146      	bne.n	80019c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb43 	bl	8000fc4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fb3f 	bl	8000fc4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e06d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a19      	ldr	r1, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	430b      	orrs	r3, r1
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fb13 	bl	8000fc4 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fb0f 	bl	8000fc4 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46a>
 80019c0:	e035      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fafc 	bl	8000fc4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff faf8 	bl	8000fc4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x498>
 80019ee:	e01e      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e019      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x500>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0d0      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4965      	ldr	r1, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d040      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d115      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e073      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06b      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fa4a 	bl	8000fc4 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff fa46 	bl	8000fc4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e053      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d210      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	490a      	ldr	r1, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1cc>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f9a8 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08003704 	.word	0x08003704
 8001c08:	20000084 	.word	0x20000084
 8001c0c:	20000088 	.word	0x20000088

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b490      	push	{r4, r7}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xac>)
 8001c18:	1d3c      	adds	r4, r7, #4
 8001c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c20:	f240 2301 	movw	r3, #513	; 0x201
 8001c24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d002      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x46>
 8001c4e:	e02b      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c52:	623b      	str	r3, [r7, #32]
      break;
 8001c54:	e02b      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3328      	adds	r3, #40	; 0x28
 8001c60:	443b      	add	r3, r7
 8001c62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d012      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0c5b      	lsrs	r3, r3, #17
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	3328      	adds	r3, #40	; 0x28
 8001c7e:	443b      	add	r3, r7
 8001c80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c8a:	fb03 f202 	mul.w	r2, r3, r2
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	e004      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	623b      	str	r3, [r7, #32]
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc90      	pop	{r4, r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	080036d4 	.word	0x080036d4
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000084 	.word	0x20000084

08001ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0adb      	lsrs	r3, r3, #11
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08003714 	.word	0x08003714

08001d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <RCC_Delay+0x34>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <RCC_Delay+0x38>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0a5b      	lsrs	r3, r3, #9
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d24:	bf00      	nop
  }
  while (Delay --);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <RCC_Delay+0x1c>
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000084 	.word	0x20000084
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d07d      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	61d3      	str	r3, [r2, #28]
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d118      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da4:	f7ff f90e 	bl	8000fc4 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	e008      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7ff f90a 	bl	8000fc4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e06d      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d02e      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d027      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dfe:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d014      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f8d9 	bl	8000fc4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f8d5 	bl	8000fc4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e036      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4917      	ldr	r1, [pc, #92]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	490b      	ldr	r1, [pc, #44]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	42420440 	.word	0x42420440

08001eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b08d      	sub	sp, #52	; 0x34
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001eba:	f107 040c 	add.w	r4, r7, #12
 8001ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ec4:	f240 2301 	movw	r3, #513	; 0x201
 8001ec8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	f200 808e 	bhi.w	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d049      	beq.n	8001f86 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d079      	beq.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001ef8:	e086      	b.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f00:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07f      	beq.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	3330      	adds	r3, #48	; 0x30
 8001f16:	443b      	add	r3, r7
 8001f18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f1c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c5b      	lsrs	r3, r3, #17
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	3330      	adds	r3, #48	; 0x30
 8001f34:	443b      	add	r3, r7
 8001f36:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f46:	4a37      	ldr	r2, [pc, #220]	; (8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f56:	e004      	b.n	8001f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	4a33      	ldr	r2, [pc, #204]	; (8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f74:	e04a      	b.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4a2c      	ldr	r2, [pc, #176]	; (800202c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f84:	e042      	b.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f96:	d108      	bne.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa8:	e01f      	b.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d109      	bne.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001fc2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc8:	e00f      	b.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001fe2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fe8:	e012      	b.n	8002010 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001fea:	e011      	b.n	8002010 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001fec:	f7ff fe78 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0b9b      	lsrs	r3, r3, #14
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002006:	e004      	b.n	8002012 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002010:	bf00      	nop
    }
  }
  return (frequency);
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002014:	4618      	mov	r0, r3
 8002016:	3734      	adds	r7, #52	; 0x34
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	080036e4 	.word	0x080036e4
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	003d0900 	.word	0x003d0900
 800202c:	aaaaaaab 	.word	0xaaaaaaab

08002030 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e084      	b.n	8002150 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c5b      	ldrb	r3, [r3, #17]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fe7c 	bl	8000d54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fb8d 	bl	8002782 <HAL_RTC_WaitForSynchro>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e06b      	b.n	8002150 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fc46 	bl	800290a <RTC_EnterInitMode>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2204      	movs	r2, #4
 8002088:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e060      	b.n	8002150 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0207 	bic.w	r2, r2, #7
 800209c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RTC_Init+0x128>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <HAL_RTC_Init+0x128>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_RTC_Init+0x128>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4926      	ldr	r1, [pc, #152]	; (8002158 <HAL_RTC_Init+0x128>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d003      	beq.n	80020d6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e00e      	b.n	80020f4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff feea 	bl	8001eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80020dc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2204      	movs	r2, #4
 80020e8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e030      	b.n	8002150 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 010f 	bic.w	r1, r3, #15
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0c1a      	lsrs	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	b291      	uxth	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fc1a 	bl	800295a <RTC_ExitInitMode>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00c      	b.n	8002150 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800214e:	2300      	movs	r3, #0
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40006c00 	.word	0x40006c00

0800215c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RTC_SetTime+0x20>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e080      	b.n	8002282 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	7c1b      	ldrb	r3, [r3, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RTC_SetTime+0x30>
 8002188:	2302      	movs	r3, #2
 800218a:	e07a      	b.n	8002282 <HAL_RTC_SetTime+0x126>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021a8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4619      	mov	r1, r3
 80021b2:	460b      	mov	r3, r1
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80021ba:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e01e      	b.n	8002204 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fc0a 	bl	80029e4 <RTC_Bcd2ToByte>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021d8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fbff 	bl	80029e4 <RTC_Bcd2ToByte>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80021f2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fbf3 	bl	80029e4 <RTC_Bcd2ToByte>
 80021fe:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002200:	4423      	add	r3, r4
 8002202:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fb18 	bl	800283c <RTC_WriteTimeCounter>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2204      	movs	r2, #4
 8002216:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02f      	b.n	8002282 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0205 	bic.w	r2, r2, #5
 8002230:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fb29 	bl	800288a <RTC_ReadAlarmCounter>
 8002238:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d018      	beq.n	8002274 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d214      	bcs.n	8002274 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002250:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002254:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002256:	6939      	ldr	r1, [r7, #16]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fb2f 	bl	80028bc <RTC_WriteAlarmCounter>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2204      	movs	r2, #4
 8002268:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e006      	b.n	8002282 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002280:	2300      	movs	r3, #0
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
	...

0800228c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_RTC_GetTime+0x28>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b5      	b.n	8002424 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0ac      	b.n	8002424 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa86 	bl	80027dc <RTC_ReadTimeCounter>
 80022d0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4a55      	ldr	r2, [pc, #340]	; (800242c <HAL_RTC_GetTime+0x1a0>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RTC_GetTime+0x1a0>)
 80022e2:	fba3 1302 	umull	r1, r3, r3, r2
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_RTC_GetTime+0x1a4>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_RTC_GetTime+0x1a0>)
 8002304:	fba2 1203 	umull	r1, r2, r2, r3
 8002308:	0ad2      	lsrs	r2, r2, #11
 800230a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800230e:	fb01 f202 	mul.w	r2, r1, r2
 8002312:	1a9a      	subs	r2, r3, r2
 8002314:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RTC_GetTime+0x1a4>)
 8002316:	fba3 1302 	umull	r1, r3, r3, r2
 800231a:	0959      	lsrs	r1, r3, #5
 800231c:	460b      	mov	r3, r1
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	1ad1      	subs	r1, r2, r3
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b17      	cmp	r3, #23
 8002330:	d955      	bls.n	80023de <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <HAL_RTC_GetTime+0x1a8>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <HAL_RTC_GetTime+0x1a8>)
 8002342:	fba3 2301 	umull	r2, r3, r3, r1
 8002346:	091a      	lsrs	r2, r3, #4
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1aca      	subs	r2, r1, r3
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fa96 	bl	800288a <RTC_ReadAlarmCounter>
 800235e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d008      	beq.n	800237a <HAL_RTC_GetTime+0xee>
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d904      	bls.n	800237a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	e002      	b.n	8002380 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_RTC_GetTime+0x1ac>)
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa53 	bl	800283c <RTC_WriteTimeCounter>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e041      	b.n	8002424 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d00c      	beq.n	80023c2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023b0:	69f9      	ldr	r1, [r7, #28]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fa82 	bl	80028bc <RTC_WriteAlarmCounter>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e030      	b.n	8002424 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023c2:	69f9      	ldr	r1, [r7, #28]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fa79 	bl	80028bc <RTC_WriteAlarmCounter>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e027      	b.n	8002424 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fb21 	bl	8002a1e <RTC_DateUpdate>
 80023dc:	e003      	b.n	80023e6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01a      	beq.n	8002422 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fada 	bl	80029aa <RTC_ByteToBcd2>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fad1 	bl	80029aa <RTC_ByteToBcd2>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	789b      	ldrb	r3, [r3, #2]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fac8 	bl	80029aa <RTC_ByteToBcd2>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	91a2b3c5 	.word	0x91a2b3c5
 8002430:	88888889 	.word	0x88888889
 8002434:	aaaaaaab 	.word	0xaaaaaaab
 8002438:	00015180 	.word	0x00015180

0800243c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_RTC_SetDate+0x24>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e097      	b.n	8002594 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7c1b      	ldrb	r3, [r3, #16]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_RTC_SetDate+0x34>
 800246c:	2302      	movs	r3, #2
 800246e:	e091      	b.n	8002594 <HAL_RTC_SetDate+0x158>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2202      	movs	r2, #2
 800247a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	78da      	ldrb	r2, [r3, #3]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	785a      	ldrb	r2, [r3, #1]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	789a      	ldrb	r2, [r3, #2]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	739a      	strb	r2, [r3, #14]
 800249a:	e01a      	b.n	80024d2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	78db      	ldrb	r3, [r3, #3]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fa9f 	bl	80029e4 <RTC_Bcd2ToByte>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fa96 	bl	80029e4 <RTC_Bcd2ToByte>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fa8d 	bl	80029e4 <RTC_Bcd2ToByte>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	7bdb      	ldrb	r3, [r3, #15]
 80024d6:	4618      	mov	r0, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	7b59      	ldrb	r1, [r3, #13]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	7b9b      	ldrb	r3, [r3, #14]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f000 fb77 	bl	8002bd4 <RTC_WeekDayNum>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	7b1a      	ldrb	r2, [r3, #12]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f970 	bl	80027dc <RTC_ReadTimeCounter>
 80024fc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_RTC_SetDate+0x160>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0adb      	lsrs	r3, r3, #11
 8002508:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b18      	cmp	r3, #24
 800250e:	d93a      	bls.n	8002586 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <HAL_RTC_SetDate+0x164>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_RTC_SetDate+0x168>)
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002526:	69f9      	ldr	r1, [r7, #28]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f987 	bl	800283c <RTC_WriteTimeCounter>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2204      	movs	r2, #4
 8002538:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e027      	b.n	8002594 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f9a0 	bl	800288a <RTC_ReadAlarmCounter>
 800254a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d018      	beq.n	8002586 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	d214      	bcs.n	8002586 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002562:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002566:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f9a6 	bl	80028bc <RTC_WriteAlarmCounter>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2204      	movs	r2, #4
 800257a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e006      	b.n	8002594 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	91a2b3c5 	.word	0x91a2b3c5
 80025a0:	aaaaaaab 	.word	0xaaaaaaab
 80025a4:	00015180 	.word	0x00015180

080025a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2100      	movs	r1, #0
 80025ba:	460a      	mov	r2, r1
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	460a      	mov	r2, r1
 80025c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_RTC_GetDate+0x26>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03a      	b.n	8002648 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	2200      	movs	r2, #0
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fe56 	bl	800228c <HAL_RTC_GetTime>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02e      	b.n	8002648 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	7b1a      	ldrb	r2, [r3, #12]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	7bda      	ldrb	r2, [r3, #15]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	7b5a      	ldrb	r2, [r3, #13]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	7b9a      	ldrb	r2, [r3, #14]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01a      	beq.n	8002646 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f9c8 	bl	80029aa <RTC_ByteToBcd2>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f9bf 	bl	80029aa <RTC_ByteToBcd2>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	789b      	ldrb	r3, [r3, #2]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f9b6 	bl	80029aa <RTC_ByteToBcd2>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2100      	movs	r1, #0
 8002666:	460a      	mov	r2, r1
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	460a      	mov	r2, r1
 800266c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_RTC_SetAlarm+0x2a>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07d      	b.n	800277a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	7c1b      	ldrb	r3, [r3, #16]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_RTC_SetAlarm+0x3a>
 8002686:	2302      	movs	r3, #2
 8002688:	e077      	b.n	800277a <HAL_RTC_SetAlarm+0x12a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2202      	movs	r2, #2
 8002694:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fdf4 	bl	800228c <HAL_RTC_GetTime>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e065      	b.n	800277a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80026ae:	7d3b      	ldrb	r3, [r7, #20]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026b6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80026ba:	7d7b      	ldrb	r3, [r7, #21]
 80026bc:	4619      	mov	r1, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a5b      	subs	r3, r3, r1
 80026c4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80026c6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80026c8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80026ca:	4413      	add	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026de:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	4619      	mov	r1, r3
 80026e8:	460b      	mov	r3, r1
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a5b      	subs	r3, r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80026f0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80026f6:	4413      	add	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e01e      	b.n	800273a <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f96f 	bl	80029e4 <RTC_Bcd2ToByte>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800270e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f964 	bl	80029e4 <RTC_Bcd2ToByte>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002728:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	789b      	ldrb	r3, [r3, #2]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f958 	bl	80029e4 <RTC_Bcd2ToByte>
 8002734:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002736:	4423      	add	r3, r4
 8002738:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	429a      	cmp	r2, r3
 8002740:	d205      	bcs.n	800274e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002748:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800274c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800274e:	69f9      	ldr	r1, [r7, #28]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f8b3 	bl	80028bc <RTC_WriteAlarmCounter>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2204      	movs	r2, #4
 8002760:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e006      	b.n	800277a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}

08002782 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01d      	b.n	80027d4 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0208 	bic.w	r2, r2, #8
 80027a6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027a8:	f7fe fc0c 	bl	8000fc4 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027ae:	e009      	b.n	80027c4 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027b0:	f7fe fc08 	bl	8000fc4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027be:	d901      	bls.n	80027c4 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e007      	b.n	80027d4 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ee      	beq.n	80027b0 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	827b      	strh	r3, [r7, #18]
 80027e8:	2300      	movs	r3, #0
 80027ea:	823b      	strh	r3, [r7, #16]
 80027ec:	2300      	movs	r3, #0
 80027ee:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800280c:	8a7a      	ldrh	r2, [r7, #18]
 800280e:	8a3b      	ldrh	r3, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d008      	beq.n	8002826 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002814:	8a3b      	ldrh	r3, [r7, #16]
 8002816:	041a      	lsls	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e004      	b.n	8002830 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002830:	697b      	ldr	r3, [r7, #20]
}
 8002832:	4618      	mov	r0, r3
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f85d 	bl	800290a <RTC_EnterInitMode>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e011      	b.n	8002880 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	0c12      	lsrs	r2, r2, #16
 8002864:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	b292      	uxth	r2, r2
 800286e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f872 	bl	800295a <RTC_ExitInitMode>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	81fb      	strh	r3, [r7, #14]
 8002896:	2300      	movs	r3, #0
 8002898:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	89bb      	ldrh	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f81d 	bl	800290a <RTC_EnterInitMode>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e011      	b.n	8002900 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	0c12      	lsrs	r2, r2, #16
 80028e4:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	b292      	uxth	r2, r2
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f832 	bl	800295a <RTC_ExitInitMode>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002916:	f7fe fb55 	bl	8000fc4 <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800291c:	e009      	b.n	8002932 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800291e:	f7fe fb51 	bl	8000fc4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292c:	d901      	bls.n	8002932 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e00f      	b.n	8002952 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0210 	orr.w	r2, r2, #16
 800294e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0210 	bic.w	r2, r2, #16
 8002974:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002976:	f7fe fb25 	bl	8000fc4 <HAL_GetTick>
 800297a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800297c:	e009      	b.n	8002992 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800297e:	f7fe fb21 	bl	8000fc4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298c:	d901      	bls.n	8002992 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e007      	b.n	80029a2 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ee      	beq.n	800297e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80029b8:	e005      	b.n	80029c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	3b0a      	subs	r3, #10
 80029c4:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d8f6      	bhi.n	80029ba <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	b2db      	uxtb	r3, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7bdb      	ldrb	r3, [r3, #15]
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7b5b      	ldrb	r3, [r3, #13]
 8002a42:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7b9b      	ldrb	r3, [r3, #14]
 8002a48:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	e06f      	b.n	8002b30 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d011      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d00e      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d00b      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b07      	cmp	r3, #7
 8002a66:	d008      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d005      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d002      	beq.n	8002a7a <RTC_DateUpdate+0x5c>
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d117      	bne.n	8002aaa <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b1e      	cmp	r3, #30
 8002a7e:	d803      	bhi.n	8002a88 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002a86:	e050      	b.n	8002b2a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d005      	beq.n	8002a9a <RTC_DateUpdate+0x7c>
        {
          month++;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002a98:	e047      	b.n	8002b2a <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
          year++;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002aa8:	e03f      	b.n	8002b2a <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d008      	beq.n	8002ac2 <RTC_DateUpdate+0xa4>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d005      	beq.n	8002ac2 <RTC_DateUpdate+0xa4>
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d002      	beq.n	8002ac2 <RTC_DateUpdate+0xa4>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0b      	cmp	r3, #11
 8002ac0:	d10c      	bne.n	8002adc <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b1d      	cmp	r3, #29
 8002ac6:	d803      	bhi.n	8002ad0 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ace:	e02c      	b.n	8002b2a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ada:	e026      	b.n	8002b2a <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d123      	bne.n	8002b2a <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b1b      	cmp	r3, #27
 8002ae6:	d803      	bhi.n	8002af0 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e01c      	b.n	8002b2a <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b1c      	cmp	r3, #28
 8002af4:	d111      	bne.n	8002b1a <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f838 	bl	8002b70 <RTC_IsLeapYear>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <RTC_DateUpdate+0xf0>
        {
          day++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e00d      	b.n	8002b2a <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	3301      	adds	r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b14:	2301      	movs	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e007      	b.n	8002b2a <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b1d      	cmp	r3, #29
 8002b1e:	d104      	bne.n	8002b2a <RTC_DateUpdate+0x10c>
      {
        month++;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	3301      	adds	r3, #1
 8002b24:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b26:	2301      	movs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d38b      	bcc.n	8002a50 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f000 f83a 	bl	8002bd4 <RTC_WeekDayNum>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	731a      	strb	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e01d      	b.n	8002bc6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <RTC_IsLeapYear+0x60>)
 8002b8e:	fba2 1203 	umull	r1, r2, r2, r3
 8002b92:	0952      	lsrs	r2, r2, #5
 8002b94:	2164      	movs	r1, #100	; 0x64
 8002b96:	fb01 f202 	mul.w	r2, r1, r2
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <RTC_IsLeapYear+0x60>)
 8002baa:	fba2 1203 	umull	r1, r2, r2, r3
 8002bae:	09d2      	lsrs	r2, r2, #7
 8002bb0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002bb4:	fb01 f202 	mul.w	r2, r1, r2
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002bc4:	2300      	movs	r3, #0
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
 8002be0:	4613      	mov	r3, r2
 8002be2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002bf2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d82d      	bhi.n	8002c56 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <RTC_WeekDayNum+0xe4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	085a      	lsrs	r2, r3, #1
 8002c0e:	78bb      	ldrb	r3, [r7, #2]
 8002c10:	441a      	add	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	441a      	add	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	4926      	ldr	r1, [pc, #152]	; (8002cbc <RTC_WeekDayNum+0xe8>)
 8002c24:	fba1 1303 	umull	r1, r3, r1, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	1ad2      	subs	r2, r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4922      	ldr	r1, [pc, #136]	; (8002cbc <RTC_WeekDayNum+0xe8>)
 8002c32:	fba1 1303 	umull	r1, r3, r1, r3
 8002c36:	09db      	lsrs	r3, r3, #7
 8002c38:	4413      	add	r3, r2
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <RTC_WeekDayNum+0xec>)
 8002c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c42:	1ad1      	subs	r1, r2, r3
 8002c44:	0849      	lsrs	r1, r1, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	0899      	lsrs	r1, r3, #2
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a5b      	subs	r3, r3, r1
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e029      	b.n	8002caa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <RTC_WeekDayNum+0xe4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	085a      	lsrs	r2, r3, #1
 8002c6a:	78bb      	ldrb	r3, [r7, #2]
 8002c6c:	441a      	add	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	441a      	add	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	441a      	add	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <RTC_WeekDayNum+0xe8>)
 8002c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	490d      	ldr	r1, [pc, #52]	; (8002cbc <RTC_WeekDayNum+0xe8>)
 8002c88:	fba1 1303 	umull	r1, r3, r1, r3
 8002c8c:	09db      	lsrs	r3, r3, #7
 8002c8e:	4413      	add	r3, r2
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <RTC_WeekDayNum+0xec>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	1ad1      	subs	r1, r2, r3
 8002c9a:	0849      	lsrs	r1, r1, #1
 8002c9c:	440b      	add	r3, r1
 8002c9e:	0899      	lsrs	r1, r3, #2
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a5b      	subs	r3, r3, r1
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b2db      	uxtb	r3, r3
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	38e38e39 	.word	0x38e38e39
 8002cbc:	51eb851f 	.word	0x51eb851f
 8002cc0:	24924925 	.word	0x24924925

08002cc4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RTCEx_BKUPWrite+0x30>)
 8002cd6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4413      	add	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40006c00 	.word	0x40006c00

08002cf8 <siprintf>:
 8002cf8:	b40e      	push	{r1, r2, r3}
 8002cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cfe:	b500      	push	{lr}
 8002d00:	b09c      	sub	sp, #112	; 0x70
 8002d02:	ab1d      	add	r3, sp, #116	; 0x74
 8002d04:	9002      	str	r0, [sp, #8]
 8002d06:	9006      	str	r0, [sp, #24]
 8002d08:	9107      	str	r1, [sp, #28]
 8002d0a:	9104      	str	r1, [sp, #16]
 8002d0c:	4808      	ldr	r0, [pc, #32]	; (8002d30 <siprintf+0x38>)
 8002d0e:	4909      	ldr	r1, [pc, #36]	; (8002d34 <siprintf+0x3c>)
 8002d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d14:	9105      	str	r1, [sp, #20]
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	a902      	add	r1, sp, #8
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	f000 f98e 	bl	800303c <_svfiprintf_r>
 8002d20:	2200      	movs	r2, #0
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	b01c      	add	sp, #112	; 0x70
 8002d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d2c:	b003      	add	sp, #12
 8002d2e:	4770      	bx	lr
 8002d30:	200000dc 	.word	0x200000dc
 8002d34:	ffff0208 	.word	0xffff0208

08002d38 <memset>:
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4402      	add	r2, r0
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <memset+0xa>
 8002d40:	4770      	bx	lr
 8002d42:	f803 1b01 	strb.w	r1, [r3], #1
 8002d46:	e7f9      	b.n	8002d3c <memset+0x4>

08002d48 <__errno>:
 8002d48:	4b01      	ldr	r3, [pc, #4]	; (8002d50 <__errno+0x8>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	200000dc 	.word	0x200000dc

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	2600      	movs	r6, #0
 8002d58:	4d0c      	ldr	r5, [pc, #48]	; (8002d8c <__libc_init_array+0x38>)
 8002d5a:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5c:	1b64      	subs	r4, r4, r5
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	42a6      	cmp	r6, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	f000 fc7a 	bl	800365c <_init>
 8002d68:	2600      	movs	r6, #0
 8002d6a:	4d0a      	ldr	r5, [pc, #40]	; (8002d94 <__libc_init_array+0x40>)
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <__libc_init_array+0x44>)
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	42a6      	cmp	r6, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7c:	4798      	blx	r3
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d86:	4798      	blx	r3
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08003750 	.word	0x08003750
 8002d90:	08003750 	.word	0x08003750
 8002d94:	08003750 	.word	0x08003750
 8002d98:	08003754 	.word	0x08003754

08002d9c <__retarget_lock_acquire_recursive>:
 8002d9c:	4770      	bx	lr

08002d9e <__retarget_lock_release_recursive>:
 8002d9e:	4770      	bx	lr

08002da0 <_free_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4605      	mov	r5, r0
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d040      	beq.n	8002e2a <_free_r+0x8a>
 8002da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dac:	1f0c      	subs	r4, r1, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bfb8      	it	lt
 8002db2:	18e4      	addlt	r4, r4, r3
 8002db4:	f000 f8dc 	bl	8002f70 <__malloc_lock>
 8002db8:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <_free_r+0x8c>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	b933      	cbnz	r3, 8002dcc <_free_r+0x2c>
 8002dbe:	6063      	str	r3, [r4, #4]
 8002dc0:	6014      	str	r4, [r2, #0]
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dc8:	f000 b8d8 	b.w	8002f7c <__malloc_unlock>
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d908      	bls.n	8002de2 <_free_r+0x42>
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	1821      	adds	r1, r4, r0
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	bf01      	itttt	eq
 8002dd8:	6819      	ldreq	r1, [r3, #0]
 8002dda:	685b      	ldreq	r3, [r3, #4]
 8002ddc:	1809      	addeq	r1, r1, r0
 8002dde:	6021      	streq	r1, [r4, #0]
 8002de0:	e7ed      	b.n	8002dbe <_free_r+0x1e>
 8002de2:	461a      	mov	r2, r3
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b10b      	cbz	r3, 8002dec <_free_r+0x4c>
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d9fa      	bls.n	8002de2 <_free_r+0x42>
 8002dec:	6811      	ldr	r1, [r2, #0]
 8002dee:	1850      	adds	r0, r2, r1
 8002df0:	42a0      	cmp	r0, r4
 8002df2:	d10b      	bne.n	8002e0c <_free_r+0x6c>
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	4401      	add	r1, r0
 8002df8:	1850      	adds	r0, r2, r1
 8002dfa:	4283      	cmp	r3, r0
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	d1e0      	bne.n	8002dc2 <_free_r+0x22>
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4408      	add	r0, r1
 8002e06:	6010      	str	r0, [r2, #0]
 8002e08:	6053      	str	r3, [r2, #4]
 8002e0a:	e7da      	b.n	8002dc2 <_free_r+0x22>
 8002e0c:	d902      	bls.n	8002e14 <_free_r+0x74>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	e7d6      	b.n	8002dc2 <_free_r+0x22>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	1821      	adds	r1, r4, r0
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1809      	addeq	r1, r1, r0
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	6063      	str	r3, [r4, #4]
 8002e26:	6054      	str	r4, [r2, #4]
 8002e28:	e7cb      	b.n	8002dc2 <_free_r+0x22>
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
 8002e2c:	20000288 	.word	0x20000288

08002e30 <sbrk_aligned>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0e      	ldr	r6, [pc, #56]	; (8002e6c <sbrk_aligned+0x3c>)
 8002e34:	460c      	mov	r4, r1
 8002e36:	6831      	ldr	r1, [r6, #0]
 8002e38:	4605      	mov	r5, r0
 8002e3a:	b911      	cbnz	r1, 8002e42 <sbrk_aligned+0x12>
 8002e3c:	f000 fbaa 	bl	8003594 <_sbrk_r>
 8002e40:	6030      	str	r0, [r6, #0]
 8002e42:	4621      	mov	r1, r4
 8002e44:	4628      	mov	r0, r5
 8002e46:	f000 fba5 	bl	8003594 <_sbrk_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	d00a      	beq.n	8002e64 <sbrk_aligned+0x34>
 8002e4e:	1cc4      	adds	r4, r0, #3
 8002e50:	f024 0403 	bic.w	r4, r4, #3
 8002e54:	42a0      	cmp	r0, r4
 8002e56:	d007      	beq.n	8002e68 <sbrk_aligned+0x38>
 8002e58:	1a21      	subs	r1, r4, r0
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 fb9a 	bl	8003594 <_sbrk_r>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d101      	bne.n	8002e68 <sbrk_aligned+0x38>
 8002e64:	f04f 34ff 	mov.w	r4, #4294967295
 8002e68:	4620      	mov	r0, r4
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	2000028c 	.word	0x2000028c

08002e70 <_malloc_r>:
 8002e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e74:	1ccd      	adds	r5, r1, #3
 8002e76:	f025 0503 	bic.w	r5, r5, #3
 8002e7a:	3508      	adds	r5, #8
 8002e7c:	2d0c      	cmp	r5, #12
 8002e7e:	bf38      	it	cc
 8002e80:	250c      	movcc	r5, #12
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	4607      	mov	r7, r0
 8002e86:	db01      	blt.n	8002e8c <_malloc_r+0x1c>
 8002e88:	42a9      	cmp	r1, r5
 8002e8a:	d905      	bls.n	8002e98 <_malloc_r+0x28>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	2600      	movs	r6, #0
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4630      	mov	r0, r6
 8002e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f6c <_malloc_r+0xfc>
 8002e9c:	f000 f868 	bl	8002f70 <__malloc_lock>
 8002ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	bb5c      	cbnz	r4, 8002f00 <_malloc_r+0x90>
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f7ff ffc0 	bl	8002e30 <sbrk_aligned>
 8002eb0:	1c43      	adds	r3, r0, #1
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	d155      	bne.n	8002f62 <_malloc_r+0xf2>
 8002eb6:	f8d8 4000 	ldr.w	r4, [r8]
 8002eba:	4626      	mov	r6, r4
 8002ebc:	2e00      	cmp	r6, #0
 8002ebe:	d145      	bne.n	8002f4c <_malloc_r+0xdc>
 8002ec0:	2c00      	cmp	r4, #0
 8002ec2:	d048      	beq.n	8002f56 <_malloc_r+0xe6>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	4631      	mov	r1, r6
 8002ec8:	4638      	mov	r0, r7
 8002eca:	eb04 0903 	add.w	r9, r4, r3
 8002ece:	f000 fb61 	bl	8003594 <_sbrk_r>
 8002ed2:	4581      	cmp	r9, r0
 8002ed4:	d13f      	bne.n	8002f56 <_malloc_r+0xe6>
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	4638      	mov	r0, r7
 8002eda:	1a6d      	subs	r5, r5, r1
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7ff ffa7 	bl	8002e30 <sbrk_aligned>
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d037      	beq.n	8002f56 <_malloc_r+0xe6>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	442b      	add	r3, r5
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	f8d8 3000 	ldr.w	r3, [r8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d038      	beq.n	8002f66 <_malloc_r+0xf6>
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	42a2      	cmp	r2, r4
 8002ef8:	d12b      	bne.n	8002f52 <_malloc_r+0xe2>
 8002efa:	2200      	movs	r2, #0
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e00f      	b.n	8002f20 <_malloc_r+0xb0>
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	1b52      	subs	r2, r2, r5
 8002f04:	d41f      	bmi.n	8002f46 <_malloc_r+0xd6>
 8002f06:	2a0b      	cmp	r2, #11
 8002f08:	d917      	bls.n	8002f3a <_malloc_r+0xca>
 8002f0a:	1961      	adds	r1, r4, r5
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	bf18      	it	ne
 8002f12:	6059      	strne	r1, [r3, #4]
 8002f14:	6863      	ldr	r3, [r4, #4]
 8002f16:	bf08      	it	eq
 8002f18:	f8c8 1000 	streq.w	r1, [r8]
 8002f1c:	5162      	str	r2, [r4, r5]
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	4638      	mov	r0, r7
 8002f22:	f104 060b 	add.w	r6, r4, #11
 8002f26:	f000 f829 	bl	8002f7c <__malloc_unlock>
 8002f2a:	f026 0607 	bic.w	r6, r6, #7
 8002f2e:	1d23      	adds	r3, r4, #4
 8002f30:	1af2      	subs	r2, r6, r3
 8002f32:	d0ae      	beq.n	8002e92 <_malloc_r+0x22>
 8002f34:	1b9b      	subs	r3, r3, r6
 8002f36:	50a3      	str	r3, [r4, r2]
 8002f38:	e7ab      	b.n	8002e92 <_malloc_r+0x22>
 8002f3a:	42a3      	cmp	r3, r4
 8002f3c:	6862      	ldr	r2, [r4, #4]
 8002f3e:	d1dd      	bne.n	8002efc <_malloc_r+0x8c>
 8002f40:	f8c8 2000 	str.w	r2, [r8]
 8002f44:	e7ec      	b.n	8002f20 <_malloc_r+0xb0>
 8002f46:	4623      	mov	r3, r4
 8002f48:	6864      	ldr	r4, [r4, #4]
 8002f4a:	e7ac      	b.n	8002ea6 <_malloc_r+0x36>
 8002f4c:	4634      	mov	r4, r6
 8002f4e:	6876      	ldr	r6, [r6, #4]
 8002f50:	e7b4      	b.n	8002ebc <_malloc_r+0x4c>
 8002f52:	4613      	mov	r3, r2
 8002f54:	e7cc      	b.n	8002ef0 <_malloc_r+0x80>
 8002f56:	230c      	movs	r3, #12
 8002f58:	4638      	mov	r0, r7
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	f000 f80e 	bl	8002f7c <__malloc_unlock>
 8002f60:	e797      	b.n	8002e92 <_malloc_r+0x22>
 8002f62:	6025      	str	r5, [r4, #0]
 8002f64:	e7dc      	b.n	8002f20 <_malloc_r+0xb0>
 8002f66:	605b      	str	r3, [r3, #4]
 8002f68:	deff      	udf	#255	; 0xff
 8002f6a:	bf00      	nop
 8002f6c:	20000288 	.word	0x20000288

08002f70 <__malloc_lock>:
 8002f70:	4801      	ldr	r0, [pc, #4]	; (8002f78 <__malloc_lock+0x8>)
 8002f72:	f7ff bf13 	b.w	8002d9c <__retarget_lock_acquire_recursive>
 8002f76:	bf00      	nop
 8002f78:	20000284 	.word	0x20000284

08002f7c <__malloc_unlock>:
 8002f7c:	4801      	ldr	r0, [pc, #4]	; (8002f84 <__malloc_unlock+0x8>)
 8002f7e:	f7ff bf0e 	b.w	8002d9e <__retarget_lock_release_recursive>
 8002f82:	bf00      	nop
 8002f84:	20000284 	.word	0x20000284

08002f88 <__ssputs_r>:
 8002f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f8c:	461f      	mov	r7, r3
 8002f8e:	688e      	ldr	r6, [r1, #8]
 8002f90:	4682      	mov	sl, r0
 8002f92:	42be      	cmp	r6, r7
 8002f94:	460c      	mov	r4, r1
 8002f96:	4690      	mov	r8, r2
 8002f98:	680b      	ldr	r3, [r1, #0]
 8002f9a:	d82c      	bhi.n	8002ff6 <__ssputs_r+0x6e>
 8002f9c:	898a      	ldrh	r2, [r1, #12]
 8002f9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fa2:	d026      	beq.n	8002ff2 <__ssputs_r+0x6a>
 8002fa4:	6965      	ldr	r5, [r4, #20]
 8002fa6:	6909      	ldr	r1, [r1, #16]
 8002fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fac:	eba3 0901 	sub.w	r9, r3, r1
 8002fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fb4:	1c7b      	adds	r3, r7, #1
 8002fb6:	444b      	add	r3, r9
 8002fb8:	106d      	asrs	r5, r5, #1
 8002fba:	429d      	cmp	r5, r3
 8002fbc:	bf38      	it	cc
 8002fbe:	461d      	movcc	r5, r3
 8002fc0:	0553      	lsls	r3, r2, #21
 8002fc2:	d527      	bpl.n	8003014 <__ssputs_r+0x8c>
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7ff ff53 	bl	8002e70 <_malloc_r>
 8002fca:	4606      	mov	r6, r0
 8002fcc:	b360      	cbz	r0, 8003028 <__ssputs_r+0xa0>
 8002fce:	464a      	mov	r2, r9
 8002fd0:	6921      	ldr	r1, [r4, #16]
 8002fd2:	f000 fafd 	bl	80035d0 <memcpy>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	6126      	str	r6, [r4, #16]
 8002fe4:	444e      	add	r6, r9
 8002fe6:	6026      	str	r6, [r4, #0]
 8002fe8:	463e      	mov	r6, r7
 8002fea:	6165      	str	r5, [r4, #20]
 8002fec:	eba5 0509 	sub.w	r5, r5, r9
 8002ff0:	60a5      	str	r5, [r4, #8]
 8002ff2:	42be      	cmp	r6, r7
 8002ff4:	d900      	bls.n	8002ff8 <__ssputs_r+0x70>
 8002ff6:	463e      	mov	r6, r7
 8002ff8:	4632      	mov	r2, r6
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	f000 faaf 	bl	8003560 <memmove>
 8003002:	2000      	movs	r0, #0
 8003004:	68a3      	ldr	r3, [r4, #8]
 8003006:	1b9b      	subs	r3, r3, r6
 8003008:	60a3      	str	r3, [r4, #8]
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	4433      	add	r3, r6
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003014:	462a      	mov	r2, r5
 8003016:	f000 fae9 	bl	80035ec <_realloc_r>
 800301a:	4606      	mov	r6, r0
 800301c:	2800      	cmp	r0, #0
 800301e:	d1e0      	bne.n	8002fe2 <__ssputs_r+0x5a>
 8003020:	4650      	mov	r0, sl
 8003022:	6921      	ldr	r1, [r4, #16]
 8003024:	f7ff febc 	bl	8002da0 <_free_r>
 8003028:	230c      	movs	r3, #12
 800302a:	f8ca 3000 	str.w	r3, [sl]
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	e7e9      	b.n	8003010 <__ssputs_r+0x88>

0800303c <_svfiprintf_r>:
 800303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	4698      	mov	r8, r3
 8003042:	898b      	ldrh	r3, [r1, #12]
 8003044:	4607      	mov	r7, r0
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	460d      	mov	r5, r1
 800304a:	4614      	mov	r4, r2
 800304c:	b09d      	sub	sp, #116	; 0x74
 800304e:	d50e      	bpl.n	800306e <_svfiprintf_r+0x32>
 8003050:	690b      	ldr	r3, [r1, #16]
 8003052:	b963      	cbnz	r3, 800306e <_svfiprintf_r+0x32>
 8003054:	2140      	movs	r1, #64	; 0x40
 8003056:	f7ff ff0b 	bl	8002e70 <_malloc_r>
 800305a:	6028      	str	r0, [r5, #0]
 800305c:	6128      	str	r0, [r5, #16]
 800305e:	b920      	cbnz	r0, 800306a <_svfiprintf_r+0x2e>
 8003060:	230c      	movs	r3, #12
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	e0d0      	b.n	800320c <_svfiprintf_r+0x1d0>
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	616b      	str	r3, [r5, #20]
 800306e:	2300      	movs	r3, #0
 8003070:	9309      	str	r3, [sp, #36]	; 0x24
 8003072:	2320      	movs	r3, #32
 8003074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003078:	2330      	movs	r3, #48	; 0x30
 800307a:	f04f 0901 	mov.w	r9, #1
 800307e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003082:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003224 <_svfiprintf_r+0x1e8>
 8003086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800308a:	4623      	mov	r3, r4
 800308c:	469a      	mov	sl, r3
 800308e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003092:	b10a      	cbz	r2, 8003098 <_svfiprintf_r+0x5c>
 8003094:	2a25      	cmp	r2, #37	; 0x25
 8003096:	d1f9      	bne.n	800308c <_svfiprintf_r+0x50>
 8003098:	ebba 0b04 	subs.w	fp, sl, r4
 800309c:	d00b      	beq.n	80030b6 <_svfiprintf_r+0x7a>
 800309e:	465b      	mov	r3, fp
 80030a0:	4622      	mov	r2, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	4638      	mov	r0, r7
 80030a6:	f7ff ff6f 	bl	8002f88 <__ssputs_r>
 80030aa:	3001      	adds	r0, #1
 80030ac:	f000 80a9 	beq.w	8003202 <_svfiprintf_r+0x1c6>
 80030b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030b2:	445a      	add	r2, fp
 80030b4:	9209      	str	r2, [sp, #36]	; 0x24
 80030b6:	f89a 3000 	ldrb.w	r3, [sl]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a1 	beq.w	8003202 <_svfiprintf_r+0x1c6>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ca:	f10a 0a01 	add.w	sl, sl, #1
 80030ce:	9304      	str	r3, [sp, #16]
 80030d0:	9307      	str	r3, [sp, #28]
 80030d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030d6:	931a      	str	r3, [sp, #104]	; 0x68
 80030d8:	4654      	mov	r4, sl
 80030da:	2205      	movs	r2, #5
 80030dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e0:	4850      	ldr	r0, [pc, #320]	; (8003224 <_svfiprintf_r+0x1e8>)
 80030e2:	f000 fa67 	bl	80035b4 <memchr>
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	b9d8      	cbnz	r0, 8003122 <_svfiprintf_r+0xe6>
 80030ea:	06d0      	lsls	r0, r2, #27
 80030ec:	bf44      	itt	mi
 80030ee:	2320      	movmi	r3, #32
 80030f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f4:	0711      	lsls	r1, r2, #28
 80030f6:	bf44      	itt	mi
 80030f8:	232b      	movmi	r3, #43	; 0x2b
 80030fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003102:	2b2a      	cmp	r3, #42	; 0x2a
 8003104:	d015      	beq.n	8003132 <_svfiprintf_r+0xf6>
 8003106:	4654      	mov	r4, sl
 8003108:	2000      	movs	r0, #0
 800310a:	f04f 0c0a 	mov.w	ip, #10
 800310e:	9a07      	ldr	r2, [sp, #28]
 8003110:	4621      	mov	r1, r4
 8003112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003116:	3b30      	subs	r3, #48	; 0x30
 8003118:	2b09      	cmp	r3, #9
 800311a:	d94d      	bls.n	80031b8 <_svfiprintf_r+0x17c>
 800311c:	b1b0      	cbz	r0, 800314c <_svfiprintf_r+0x110>
 800311e:	9207      	str	r2, [sp, #28]
 8003120:	e014      	b.n	800314c <_svfiprintf_r+0x110>
 8003122:	eba0 0308 	sub.w	r3, r0, r8
 8003126:	fa09 f303 	lsl.w	r3, r9, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	46a2      	mov	sl, r4
 800312e:	9304      	str	r3, [sp, #16]
 8003130:	e7d2      	b.n	80030d8 <_svfiprintf_r+0x9c>
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	1d19      	adds	r1, r3, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	9103      	str	r1, [sp, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	bfbb      	ittet	lt
 800313e:	425b      	neglt	r3, r3
 8003140:	f042 0202 	orrlt.w	r2, r2, #2
 8003144:	9307      	strge	r3, [sp, #28]
 8003146:	9307      	strlt	r3, [sp, #28]
 8003148:	bfb8      	it	lt
 800314a:	9204      	strlt	r2, [sp, #16]
 800314c:	7823      	ldrb	r3, [r4, #0]
 800314e:	2b2e      	cmp	r3, #46	; 0x2e
 8003150:	d10c      	bne.n	800316c <_svfiprintf_r+0x130>
 8003152:	7863      	ldrb	r3, [r4, #1]
 8003154:	2b2a      	cmp	r3, #42	; 0x2a
 8003156:	d134      	bne.n	80031c2 <_svfiprintf_r+0x186>
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	3402      	adds	r4, #2
 800315c:	1d1a      	adds	r2, r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	9203      	str	r2, [sp, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	bfb8      	it	lt
 8003166:	f04f 33ff 	movlt.w	r3, #4294967295
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003228 <_svfiprintf_r+0x1ec>
 8003170:	2203      	movs	r2, #3
 8003172:	4650      	mov	r0, sl
 8003174:	7821      	ldrb	r1, [r4, #0]
 8003176:	f000 fa1d 	bl	80035b4 <memchr>
 800317a:	b138      	cbz	r0, 800318c <_svfiprintf_r+0x150>
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	eba0 000a 	sub.w	r0, r0, sl
 8003184:	4082      	lsls	r2, r0
 8003186:	4313      	orrs	r3, r2
 8003188:	3401      	adds	r4, #1
 800318a:	9304      	str	r3, [sp, #16]
 800318c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003190:	2206      	movs	r2, #6
 8003192:	4826      	ldr	r0, [pc, #152]	; (800322c <_svfiprintf_r+0x1f0>)
 8003194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003198:	f000 fa0c 	bl	80035b4 <memchr>
 800319c:	2800      	cmp	r0, #0
 800319e:	d038      	beq.n	8003212 <_svfiprintf_r+0x1d6>
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <_svfiprintf_r+0x1f4>)
 80031a2:	bb1b      	cbnz	r3, 80031ec <_svfiprintf_r+0x1b0>
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	3307      	adds	r3, #7
 80031a8:	f023 0307 	bic.w	r3, r3, #7
 80031ac:	3308      	adds	r3, #8
 80031ae:	9303      	str	r3, [sp, #12]
 80031b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b2:	4433      	add	r3, r6
 80031b4:	9309      	str	r3, [sp, #36]	; 0x24
 80031b6:	e768      	b.n	800308a <_svfiprintf_r+0x4e>
 80031b8:	460c      	mov	r4, r1
 80031ba:	2001      	movs	r0, #1
 80031bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80031c0:	e7a6      	b.n	8003110 <_svfiprintf_r+0xd4>
 80031c2:	2300      	movs	r3, #0
 80031c4:	f04f 0c0a 	mov.w	ip, #10
 80031c8:	4619      	mov	r1, r3
 80031ca:	3401      	adds	r4, #1
 80031cc:	9305      	str	r3, [sp, #20]
 80031ce:	4620      	mov	r0, r4
 80031d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031d4:	3a30      	subs	r2, #48	; 0x30
 80031d6:	2a09      	cmp	r2, #9
 80031d8:	d903      	bls.n	80031e2 <_svfiprintf_r+0x1a6>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0c6      	beq.n	800316c <_svfiprintf_r+0x130>
 80031de:	9105      	str	r1, [sp, #20]
 80031e0:	e7c4      	b.n	800316c <_svfiprintf_r+0x130>
 80031e2:	4604      	mov	r4, r0
 80031e4:	2301      	movs	r3, #1
 80031e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ea:	e7f0      	b.n	80031ce <_svfiprintf_r+0x192>
 80031ec:	ab03      	add	r3, sp, #12
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	462a      	mov	r2, r5
 80031f2:	4638      	mov	r0, r7
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <_svfiprintf_r+0x1f8>)
 80031f6:	a904      	add	r1, sp, #16
 80031f8:	f3af 8000 	nop.w
 80031fc:	1c42      	adds	r2, r0, #1
 80031fe:	4606      	mov	r6, r0
 8003200:	d1d6      	bne.n	80031b0 <_svfiprintf_r+0x174>
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	065b      	lsls	r3, r3, #25
 8003206:	f53f af2d 	bmi.w	8003064 <_svfiprintf_r+0x28>
 800320a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800320c:	b01d      	add	sp, #116	; 0x74
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	ab03      	add	r3, sp, #12
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	462a      	mov	r2, r5
 8003218:	4638      	mov	r0, r7
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <_svfiprintf_r+0x1f8>)
 800321c:	a904      	add	r1, sp, #16
 800321e:	f000 f87d 	bl	800331c <_printf_i>
 8003222:	e7eb      	b.n	80031fc <_svfiprintf_r+0x1c0>
 8003224:	0800371c 	.word	0x0800371c
 8003228:	08003722 	.word	0x08003722
 800322c:	08003726 	.word	0x08003726
 8003230:	00000000 	.word	0x00000000
 8003234:	08002f89 	.word	0x08002f89

08003238 <_printf_common>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	4616      	mov	r6, r2
 800323e:	4699      	mov	r9, r3
 8003240:	688a      	ldr	r2, [r1, #8]
 8003242:	690b      	ldr	r3, [r1, #16]
 8003244:	4607      	mov	r7, r0
 8003246:	4293      	cmp	r3, r2
 8003248:	bfb8      	it	lt
 800324a:	4613      	movlt	r3, r2
 800324c:	6033      	str	r3, [r6, #0]
 800324e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003252:	460c      	mov	r4, r1
 8003254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003258:	b10a      	cbz	r2, 800325e <_printf_common+0x26>
 800325a:	3301      	adds	r3, #1
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0699      	lsls	r1, r3, #26
 8003262:	bf42      	ittt	mi
 8003264:	6833      	ldrmi	r3, [r6, #0]
 8003266:	3302      	addmi	r3, #2
 8003268:	6033      	strmi	r3, [r6, #0]
 800326a:	6825      	ldr	r5, [r4, #0]
 800326c:	f015 0506 	ands.w	r5, r5, #6
 8003270:	d106      	bne.n	8003280 <_printf_common+0x48>
 8003272:	f104 0a19 	add.w	sl, r4, #25
 8003276:	68e3      	ldr	r3, [r4, #12]
 8003278:	6832      	ldr	r2, [r6, #0]
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	42ab      	cmp	r3, r5
 800327e:	dc2b      	bgt.n	80032d8 <_printf_common+0xa0>
 8003280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	bf18      	it	ne
 800328a:	2301      	movne	r3, #1
 800328c:	0692      	lsls	r2, r2, #26
 800328e:	d430      	bmi.n	80032f2 <_printf_common+0xba>
 8003290:	4649      	mov	r1, r9
 8003292:	4638      	mov	r0, r7
 8003294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d023      	beq.n	80032e6 <_printf_common+0xae>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	6922      	ldr	r2, [r4, #16]
 80032a2:	f003 0306 	and.w	r3, r3, #6
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf14      	ite	ne
 80032aa:	2500      	movne	r5, #0
 80032ac:	6833      	ldreq	r3, [r6, #0]
 80032ae:	f04f 0600 	mov.w	r6, #0
 80032b2:	bf08      	it	eq
 80032b4:	68e5      	ldreq	r5, [r4, #12]
 80032b6:	f104 041a 	add.w	r4, r4, #26
 80032ba:	bf08      	it	eq
 80032bc:	1aed      	subeq	r5, r5, r3
 80032be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032c2:	bf08      	it	eq
 80032c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bfc4      	itt	gt
 80032cc:	1a9b      	subgt	r3, r3, r2
 80032ce:	18ed      	addgt	r5, r5, r3
 80032d0:	42b5      	cmp	r5, r6
 80032d2:	d11a      	bne.n	800330a <_printf_common+0xd2>
 80032d4:	2000      	movs	r0, #0
 80032d6:	e008      	b.n	80032ea <_printf_common+0xb2>
 80032d8:	2301      	movs	r3, #1
 80032da:	4652      	mov	r2, sl
 80032dc:	4649      	mov	r1, r9
 80032de:	4638      	mov	r0, r7
 80032e0:	47c0      	blx	r8
 80032e2:	3001      	adds	r0, #1
 80032e4:	d103      	bne.n	80032ee <_printf_common+0xb6>
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ee:	3501      	adds	r5, #1
 80032f0:	e7c1      	b.n	8003276 <_printf_common+0x3e>
 80032f2:	2030      	movs	r0, #48	; 0x30
 80032f4:	18e1      	adds	r1, r4, r3
 80032f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003300:	4422      	add	r2, r4
 8003302:	3302      	adds	r3, #2
 8003304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003308:	e7c2      	b.n	8003290 <_printf_common+0x58>
 800330a:	2301      	movs	r3, #1
 800330c:	4622      	mov	r2, r4
 800330e:	4649      	mov	r1, r9
 8003310:	4638      	mov	r0, r7
 8003312:	47c0      	blx	r8
 8003314:	3001      	adds	r0, #1
 8003316:	d0e6      	beq.n	80032e6 <_printf_common+0xae>
 8003318:	3601      	adds	r6, #1
 800331a:	e7d9      	b.n	80032d0 <_printf_common+0x98>

0800331c <_printf_i>:
 800331c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	7e0f      	ldrb	r7, [r1, #24]
 8003322:	4691      	mov	r9, r2
 8003324:	2f78      	cmp	r7, #120	; 0x78
 8003326:	4680      	mov	r8, r0
 8003328:	460c      	mov	r4, r1
 800332a:	469a      	mov	sl, r3
 800332c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800332e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003332:	d807      	bhi.n	8003344 <_printf_i+0x28>
 8003334:	2f62      	cmp	r7, #98	; 0x62
 8003336:	d80a      	bhi.n	800334e <_printf_i+0x32>
 8003338:	2f00      	cmp	r7, #0
 800333a:	f000 80d5 	beq.w	80034e8 <_printf_i+0x1cc>
 800333e:	2f58      	cmp	r7, #88	; 0x58
 8003340:	f000 80c1 	beq.w	80034c6 <_printf_i+0x1aa>
 8003344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800334c:	e03a      	b.n	80033c4 <_printf_i+0xa8>
 800334e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003352:	2b15      	cmp	r3, #21
 8003354:	d8f6      	bhi.n	8003344 <_printf_i+0x28>
 8003356:	a101      	add	r1, pc, #4	; (adr r1, 800335c <_printf_i+0x40>)
 8003358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033c9 	.word	0x080033c9
 8003364:	08003345 	.word	0x08003345
 8003368:	08003345 	.word	0x08003345
 800336c:	08003345 	.word	0x08003345
 8003370:	08003345 	.word	0x08003345
 8003374:	080033c9 	.word	0x080033c9
 8003378:	08003345 	.word	0x08003345
 800337c:	08003345 	.word	0x08003345
 8003380:	08003345 	.word	0x08003345
 8003384:	08003345 	.word	0x08003345
 8003388:	080034cf 	.word	0x080034cf
 800338c:	080033f5 	.word	0x080033f5
 8003390:	08003489 	.word	0x08003489
 8003394:	08003345 	.word	0x08003345
 8003398:	08003345 	.word	0x08003345
 800339c:	080034f1 	.word	0x080034f1
 80033a0:	08003345 	.word	0x08003345
 80033a4:	080033f5 	.word	0x080033f5
 80033a8:	08003345 	.word	0x08003345
 80033ac:	08003345 	.word	0x08003345
 80033b0:	08003491 	.word	0x08003491
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	602a      	str	r2, [r5, #0]
 80033bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0a0      	b.n	800350a <_printf_i+0x1ee>
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	0607      	lsls	r7, r0, #24
 80033ce:	f103 0104 	add.w	r1, r3, #4
 80033d2:	6029      	str	r1, [r5, #0]
 80033d4:	d501      	bpl.n	80033da <_printf_i+0xbe>
 80033d6:	681e      	ldr	r6, [r3, #0]
 80033d8:	e003      	b.n	80033e2 <_printf_i+0xc6>
 80033da:	0646      	lsls	r6, r0, #25
 80033dc:	d5fb      	bpl.n	80033d6 <_printf_i+0xba>
 80033de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	da03      	bge.n	80033ee <_printf_i+0xd2>
 80033e6:	232d      	movs	r3, #45	; 0x2d
 80033e8:	4276      	negs	r6, r6
 80033ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ee:	230a      	movs	r3, #10
 80033f0:	4859      	ldr	r0, [pc, #356]	; (8003558 <_printf_i+0x23c>)
 80033f2:	e012      	b.n	800341a <_printf_i+0xfe>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	1d19      	adds	r1, r3, #4
 80033fa:	6029      	str	r1, [r5, #0]
 80033fc:	0605      	lsls	r5, r0, #24
 80033fe:	d501      	bpl.n	8003404 <_printf_i+0xe8>
 8003400:	681e      	ldr	r6, [r3, #0]
 8003402:	e002      	b.n	800340a <_printf_i+0xee>
 8003404:	0641      	lsls	r1, r0, #25
 8003406:	d5fb      	bpl.n	8003400 <_printf_i+0xe4>
 8003408:	881e      	ldrh	r6, [r3, #0]
 800340a:	2f6f      	cmp	r7, #111	; 0x6f
 800340c:	bf0c      	ite	eq
 800340e:	2308      	moveq	r3, #8
 8003410:	230a      	movne	r3, #10
 8003412:	4851      	ldr	r0, [pc, #324]	; (8003558 <_printf_i+0x23c>)
 8003414:	2100      	movs	r1, #0
 8003416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800341a:	6865      	ldr	r5, [r4, #4]
 800341c:	2d00      	cmp	r5, #0
 800341e:	bfa8      	it	ge
 8003420:	6821      	ldrge	r1, [r4, #0]
 8003422:	60a5      	str	r5, [r4, #8]
 8003424:	bfa4      	itt	ge
 8003426:	f021 0104 	bicge.w	r1, r1, #4
 800342a:	6021      	strge	r1, [r4, #0]
 800342c:	b90e      	cbnz	r6, 8003432 <_printf_i+0x116>
 800342e:	2d00      	cmp	r5, #0
 8003430:	d04b      	beq.n	80034ca <_printf_i+0x1ae>
 8003432:	4615      	mov	r5, r2
 8003434:	fbb6 f1f3 	udiv	r1, r6, r3
 8003438:	fb03 6711 	mls	r7, r3, r1, r6
 800343c:	5dc7      	ldrb	r7, [r0, r7]
 800343e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003442:	4637      	mov	r7, r6
 8003444:	42bb      	cmp	r3, r7
 8003446:	460e      	mov	r6, r1
 8003448:	d9f4      	bls.n	8003434 <_printf_i+0x118>
 800344a:	2b08      	cmp	r3, #8
 800344c:	d10b      	bne.n	8003466 <_printf_i+0x14a>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	07de      	lsls	r6, r3, #31
 8003452:	d508      	bpl.n	8003466 <_printf_i+0x14a>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	6861      	ldr	r1, [r4, #4]
 8003458:	4299      	cmp	r1, r3
 800345a:	bfde      	ittt	le
 800345c:	2330      	movle	r3, #48	; 0x30
 800345e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003462:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003466:	1b52      	subs	r2, r2, r5
 8003468:	6122      	str	r2, [r4, #16]
 800346a:	464b      	mov	r3, r9
 800346c:	4621      	mov	r1, r4
 800346e:	4640      	mov	r0, r8
 8003470:	f8cd a000 	str.w	sl, [sp]
 8003474:	aa03      	add	r2, sp, #12
 8003476:	f7ff fedf 	bl	8003238 <_printf_common>
 800347a:	3001      	adds	r0, #1
 800347c:	d14a      	bne.n	8003514 <_printf_i+0x1f8>
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	b004      	add	sp, #16
 8003484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	2778      	movs	r7, #120	; 0x78
 8003492:	4832      	ldr	r0, [pc, #200]	; (800355c <_printf_i+0x240>)
 8003494:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	6829      	ldr	r1, [r5, #0]
 800349c:	061f      	lsls	r7, r3, #24
 800349e:	f851 6b04 	ldr.w	r6, [r1], #4
 80034a2:	d402      	bmi.n	80034aa <_printf_i+0x18e>
 80034a4:	065f      	lsls	r7, r3, #25
 80034a6:	bf48      	it	mi
 80034a8:	b2b6      	uxthmi	r6, r6
 80034aa:	07df      	lsls	r7, r3, #31
 80034ac:	bf48      	it	mi
 80034ae:	f043 0320 	orrmi.w	r3, r3, #32
 80034b2:	6029      	str	r1, [r5, #0]
 80034b4:	bf48      	it	mi
 80034b6:	6023      	strmi	r3, [r4, #0]
 80034b8:	b91e      	cbnz	r6, 80034c2 <_printf_i+0x1a6>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	f023 0320 	bic.w	r3, r3, #32
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	2310      	movs	r3, #16
 80034c4:	e7a6      	b.n	8003414 <_printf_i+0xf8>
 80034c6:	4824      	ldr	r0, [pc, #144]	; (8003558 <_printf_i+0x23c>)
 80034c8:	e7e4      	b.n	8003494 <_printf_i+0x178>
 80034ca:	4615      	mov	r5, r2
 80034cc:	e7bd      	b.n	800344a <_printf_i+0x12e>
 80034ce:	682b      	ldr	r3, [r5, #0]
 80034d0:	6826      	ldr	r6, [r4, #0]
 80034d2:	1d18      	adds	r0, r3, #4
 80034d4:	6961      	ldr	r1, [r4, #20]
 80034d6:	6028      	str	r0, [r5, #0]
 80034d8:	0635      	lsls	r5, r6, #24
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	d501      	bpl.n	80034e2 <_printf_i+0x1c6>
 80034de:	6019      	str	r1, [r3, #0]
 80034e0:	e002      	b.n	80034e8 <_printf_i+0x1cc>
 80034e2:	0670      	lsls	r0, r6, #25
 80034e4:	d5fb      	bpl.n	80034de <_printf_i+0x1c2>
 80034e6:	8019      	strh	r1, [r3, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	4615      	mov	r5, r2
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	e7bc      	b.n	800346a <_printf_i+0x14e>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	2100      	movs	r1, #0
 80034f4:	1d1a      	adds	r2, r3, #4
 80034f6:	602a      	str	r2, [r5, #0]
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 f859 	bl	80035b4 <memchr>
 8003502:	b108      	cbz	r0, 8003508 <_printf_i+0x1ec>
 8003504:	1b40      	subs	r0, r0, r5
 8003506:	6060      	str	r0, [r4, #4]
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	6123      	str	r3, [r4, #16]
 800350c:	2300      	movs	r3, #0
 800350e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003512:	e7aa      	b.n	800346a <_printf_i+0x14e>
 8003514:	462a      	mov	r2, r5
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	47d0      	blx	sl
 800351e:	3001      	adds	r0, #1
 8003520:	d0ad      	beq.n	800347e <_printf_i+0x162>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	079b      	lsls	r3, r3, #30
 8003526:	d413      	bmi.n	8003550 <_printf_i+0x234>
 8003528:	68e0      	ldr	r0, [r4, #12]
 800352a:	9b03      	ldr	r3, [sp, #12]
 800352c:	4298      	cmp	r0, r3
 800352e:	bfb8      	it	lt
 8003530:	4618      	movlt	r0, r3
 8003532:	e7a6      	b.n	8003482 <_printf_i+0x166>
 8003534:	2301      	movs	r3, #1
 8003536:	4632      	mov	r2, r6
 8003538:	4649      	mov	r1, r9
 800353a:	4640      	mov	r0, r8
 800353c:	47d0      	blx	sl
 800353e:	3001      	adds	r0, #1
 8003540:	d09d      	beq.n	800347e <_printf_i+0x162>
 8003542:	3501      	adds	r5, #1
 8003544:	68e3      	ldr	r3, [r4, #12]
 8003546:	9903      	ldr	r1, [sp, #12]
 8003548:	1a5b      	subs	r3, r3, r1
 800354a:	42ab      	cmp	r3, r5
 800354c:	dcf2      	bgt.n	8003534 <_printf_i+0x218>
 800354e:	e7eb      	b.n	8003528 <_printf_i+0x20c>
 8003550:	2500      	movs	r5, #0
 8003552:	f104 0619 	add.w	r6, r4, #25
 8003556:	e7f5      	b.n	8003544 <_printf_i+0x228>
 8003558:	0800372d 	.word	0x0800372d
 800355c:	0800373e 	.word	0x0800373e

08003560 <memmove>:
 8003560:	4288      	cmp	r0, r1
 8003562:	b510      	push	{r4, lr}
 8003564:	eb01 0402 	add.w	r4, r1, r2
 8003568:	d902      	bls.n	8003570 <memmove+0x10>
 800356a:	4284      	cmp	r4, r0
 800356c:	4623      	mov	r3, r4
 800356e:	d807      	bhi.n	8003580 <memmove+0x20>
 8003570:	1e43      	subs	r3, r0, #1
 8003572:	42a1      	cmp	r1, r4
 8003574:	d008      	beq.n	8003588 <memmove+0x28>
 8003576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800357a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800357e:	e7f8      	b.n	8003572 <memmove+0x12>
 8003580:	4601      	mov	r1, r0
 8003582:	4402      	add	r2, r0
 8003584:	428a      	cmp	r2, r1
 8003586:	d100      	bne.n	800358a <memmove+0x2a>
 8003588:	bd10      	pop	{r4, pc}
 800358a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800358e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003592:	e7f7      	b.n	8003584 <memmove+0x24>

08003594 <_sbrk_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	2300      	movs	r3, #0
 8003598:	4d05      	ldr	r5, [pc, #20]	; (80035b0 <_sbrk_r+0x1c>)
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	602b      	str	r3, [r5, #0]
 80035a0:	f7fd fc56 	bl	8000e50 <_sbrk>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_sbrk_r+0x1a>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_sbrk_r+0x1a>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	20000280 	.word	0x20000280

080035b4 <memchr>:
 80035b4:	4603      	mov	r3, r0
 80035b6:	b510      	push	{r4, lr}
 80035b8:	b2c9      	uxtb	r1, r1
 80035ba:	4402      	add	r2, r0
 80035bc:	4293      	cmp	r3, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	d101      	bne.n	80035c6 <memchr+0x12>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e003      	b.n	80035ce <memchr+0x1a>
 80035c6:	7804      	ldrb	r4, [r0, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	428c      	cmp	r4, r1
 80035cc:	d1f6      	bne.n	80035bc <memchr+0x8>
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <memcpy>:
 80035d0:	440a      	add	r2, r1
 80035d2:	4291      	cmp	r1, r2
 80035d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035d8:	d100      	bne.n	80035dc <memcpy+0xc>
 80035da:	4770      	bx	lr
 80035dc:	b510      	push	{r4, lr}
 80035de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035e8:	d1f9      	bne.n	80035de <memcpy+0xe>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <_realloc_r>:
 80035ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f0:	4680      	mov	r8, r0
 80035f2:	4614      	mov	r4, r2
 80035f4:	460e      	mov	r6, r1
 80035f6:	b921      	cbnz	r1, 8003602 <_realloc_r+0x16>
 80035f8:	4611      	mov	r1, r2
 80035fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035fe:	f7ff bc37 	b.w	8002e70 <_malloc_r>
 8003602:	b92a      	cbnz	r2, 8003610 <_realloc_r+0x24>
 8003604:	f7ff fbcc 	bl	8002da0 <_free_r>
 8003608:	4625      	mov	r5, r4
 800360a:	4628      	mov	r0, r5
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003610:	f000 f81b 	bl	800364a <_malloc_usable_size_r>
 8003614:	4284      	cmp	r4, r0
 8003616:	4607      	mov	r7, r0
 8003618:	d802      	bhi.n	8003620 <_realloc_r+0x34>
 800361a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800361e:	d812      	bhi.n	8003646 <_realloc_r+0x5a>
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f7ff fc24 	bl	8002e70 <_malloc_r>
 8003628:	4605      	mov	r5, r0
 800362a:	2800      	cmp	r0, #0
 800362c:	d0ed      	beq.n	800360a <_realloc_r+0x1e>
 800362e:	42bc      	cmp	r4, r7
 8003630:	4622      	mov	r2, r4
 8003632:	4631      	mov	r1, r6
 8003634:	bf28      	it	cs
 8003636:	463a      	movcs	r2, r7
 8003638:	f7ff ffca 	bl	80035d0 <memcpy>
 800363c:	4631      	mov	r1, r6
 800363e:	4640      	mov	r0, r8
 8003640:	f7ff fbae 	bl	8002da0 <_free_r>
 8003644:	e7e1      	b.n	800360a <_realloc_r+0x1e>
 8003646:	4635      	mov	r5, r6
 8003648:	e7df      	b.n	800360a <_realloc_r+0x1e>

0800364a <_malloc_usable_size_r>:
 800364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364e:	1f18      	subs	r0, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	bfbc      	itt	lt
 8003654:	580b      	ldrlt	r3, [r1, r0]
 8003656:	18c0      	addlt	r0, r0, r3
 8003658:	4770      	bx	lr
	...

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
