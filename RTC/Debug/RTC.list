
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  2000008c  08002d40  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002d40  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000062af  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec2  00000000  00000000  000263a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059e  00000000  00000000  00028a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017754  00000000  00000000  00028fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009385  00000000  00000000  0004072a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008336d  00000000  00000000  00049aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bcc  00000000  00000000  000cce1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ce9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c2c 	.word	0x08002c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002c2c 	.word	0x08002c2c

0800014c <MGPIO_voidInitPortPin>:

static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode);


void MGPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	791b      	ldrb	r3, [r3, #4]
 8000158:	73fb      	strb	r3, [r7, #15]
	uint8_t Copy_u8Mode = _gpio->GPIO_PinMode;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	795b      	ldrb	r3, [r3, #5]
 800015e:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000160:	7bfb      	ldrb	r3, [r7, #15]
 8000162:	2b0f      	cmp	r3, #15
 8000164:	d80d      	bhi.n	8000182 <MGPIO_voidInitPortPin+0x36>
	{
		return;
	}
	MGPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	7bba      	ldrb	r2, [r7, #14]
 800016c:	7bf9      	ldrb	r1, [r7, #15]
 800016e:	4618      	mov	r0, r3
 8000170:	f000 f80b 	bl	800018a <MGPIO_voidConfgPin_Mode>
	MGPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	799b      	ldrb	r3, [r3, #6]
 8000178:	4619      	mov	r1, r3
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f000 f84a 	bl	8000214 <MGPIO_voidWritePortPin>
 8000180:	e000      	b.n	8000184 <MGPIO_voidInitPortPin+0x38>
		return;
 8000182:	bf00      	nop
}
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <MGPIO_voidConfgPin_Mode>:


static void MGPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8_t Copy_u8Pin , uint8_t Copy_u8Mode)
{
 800018a:	b480      	push	{r7}
 800018c:	b083      	sub	sp, #12
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	2b0f      	cmp	r3, #15
 800019e:	d834      	bhi.n	800020a <MGPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	d815      	bhi.n	80001d2 <MGPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	78fa      	ldrb	r2, [r7, #3]
 80001ac:	0092      	lsls	r2, r2, #2
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	43d2      	mvns	r2, r2
 80001b6:	401a      	ands	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	78b9      	ldrb	r1, [r7, #2]
 80001c2:	78fa      	ldrb	r2, [r7, #3]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ca:	431a      	orrs	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e01c      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001d2:	78fb      	ldrb	r3, [r7, #3]
 80001d4:	2b0f      	cmp	r3, #15
 80001d6:	d819      	bhi.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	3b08      	subs	r3, #8
 80001dc:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	78fa      	ldrb	r2, [r7, #3]
 80001e4:	0092      	lsls	r2, r2, #2
 80001e6:	210f      	movs	r1, #15
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	401a      	ands	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	78b9      	ldrb	r1, [r7, #2]
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	0092      	lsls	r2, r2, #2
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	e000      	b.n	800020c <MGPIO_voidConfgPin_Mode+0x82>
		return;
 800020a:	bf00      	nop
	}
}
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <MGPIO_voidWritePortPin>:



void MGPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8_t Copy_u8Val)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	791b      	ldrb	r3, [r3, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d816      	bhi.n	8000256 <MGPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d109      	bne.n	8000242 <MGPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	2301      	movs	r3, #1
 8000236:	fa03 f202 	lsl.w	r2, r3, r2
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	611a      	str	r2, [r3, #16]
 8000240:	e00a      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	461a      	mov	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	fa03 f202 	lsl.w	r2, r3, r2
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	e000      	b.n	8000258 <MGPIO_voidWritePortPin+0x44>
		return;
 8000256:	bf00      	nop
	}
}
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <MGPIO_u8ReadPortPin>:


uint8_t MGPIO_u8ReadPortPin(GPIO_ConfigType *_gpio)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if(_gpio->GPIO_PinNumber > 15)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	791b      	ldrb	r3, [r3, #4]
 800026c:	2b0f      	cmp	r3, #15
 800026e:	d901      	bls.n	8000274 <MGPIO_u8ReadPortPin+0x14>
	{
		return 0;
 8000270:	2300      	movs	r3, #0
 8000272:	e009      	b.n	8000288 <MGPIO_u8ReadPortPin+0x28>
	}

	return GET_BIT(_gpio->GPIOx->IDR , _gpio->GPIO_PinNumber);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	7912      	ldrb	r2, [r2, #4]
 800027e:	40d3      	lsrs	r3, r2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <read_keypad>:
	}
}


char read_keypad (ST_Keypad_t *_keypad_obj)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint8_t value = NOTPRESSED;
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	73bb      	strb	r3, [r7, #14]
 80002a4:	e043      	b.n	800032e <read_keypad+0x9a>
	{
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	737b      	strb	r3, [r7, #13]
 80002aa:	e00a      	b.n	80002c2 <read_keypad+0x2e>
		{
			MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[counter]), GPIO_HIGH);
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffac 	bl	8000214 <MGPIO_voidWritePortPin>
		for(uint8_t counter=0 ; counter<KEYPAD_ROWS ; counter++)
 80002bc:	7b7b      	ldrb	r3, [r7, #13]
 80002be:	3301      	adds	r3, #1
 80002c0:	737b      	strb	r3, [r7, #13]
 80002c2:	7b7b      	ldrb	r3, [r7, #13]
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d9f1      	bls.n	80002ac <read_keypad+0x18>
		}

		MGPIO_voidWritePortPin(&(_keypad_obj->row_pin[rows_counter]), GPIO_LOW);
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff9e 	bl	8000214 <MGPIO_voidWritePortPin>

		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 80002d8:	2300      	movs	r3, #0
 80002da:	733b      	strb	r3, [r7, #12]
 80002dc:	e021      	b.n	8000322 <read_keypad+0x8e>
		{
			if( GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])))
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	3304      	adds	r3, #4
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffb9 	bl	8000260 <MGPIO_u8ReadPortPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d113      	bne.n	800031c <read_keypad+0x88>
			{
				while (GPIO_LOW == MGPIO_u8ReadPortPin(&(_keypad_obj->column_pin[columns_counter])));
 80002f4:	bf00      	nop
 80002f6:	7b3b      	ldrb	r3, [r7, #12]
 80002f8:	3304      	adds	r3, #4
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffad 	bl	8000260 <MGPIO_u8ReadPortPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f4      	beq.n	80002f6 <read_keypad+0x62>
				value = btn_values[rows_counter][columns_counter];
 800030c:	7bba      	ldrb	r2, [r7, #14]
 800030e:	7b3b      	ldrb	r3, [r7, #12]
 8000310:	490b      	ldr	r1, [pc, #44]	; (8000340 <read_keypad+0xac>)
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	440a      	add	r2, r1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t columns_counter=0 ; columns_counter<KEYPAD_COLUMNS ; columns_counter++)
 800031c:	7b3b      	ldrb	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	733b      	strb	r3, [r7, #12]
 8000322:	7b3b      	ldrb	r3, [r7, #12]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d9da      	bls.n	80002de <read_keypad+0x4a>
	for(uint8_t rows_counter=0 ; rows_counter<KEYPAD_ROWS ; rows_counter++)
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	3301      	adds	r3, #1
 800032c:	73bb      	strb	r3, [r7, #14]
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d9b8      	bls.n	80002a6 <read_keypad+0x12>
			}
		}
	}
	return value;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	08002c84 	.word	0x08002c84

08000344 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t l_data_pins_counter = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d05e      	beq.n	8000414 <lcd_4bit_intialize+0xd0>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2202      	movs	r2, #2
 800035a:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2202      	movs	r2, #2
 8000360:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2202      	movs	r2, #2
 8000366:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	759a      	strb	r2, [r3, #22]

		MGPIO_voidInitPortPin(&(lcd->lcd_rs));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_rw));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3308      	adds	r3, #8
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff fee0 	bl	800014c <MGPIO_voidInitPortPin>
		MGPIO_voidInitPortPin(&(lcd->lcd_en));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3310      	adds	r3, #16
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fedb 	bl	800014c <MGPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e018      	b.n	80003ce <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	3303      	adds	r3, #3
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	2202      	movs	r2, #2
 80003a8:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	3303      	adds	r3, #3
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	4413      	add	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	719a      	strb	r2, [r3, #6]
			MGPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	3303      	adds	r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff fec2 	bl	800014c <MGPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3301      	adds	r3, #1
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d9e3      	bls.n	800039c <lcd_4bit_intialize+0x58>
		}

		HAL_Delay(20);
 80003d4:	2014      	movs	r0, #20
 80003d6:	f000 fdc1 	bl	8000f5c <HAL_Delay>
		lcd_4bit_send_command(lcd, 0x33);
 80003da:	2133      	movs	r1, #51	; 0x33
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f81d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 80003e2:	2132      	movs	r1, #50	; 0x32
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f819 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 80003ea:	2128      	movs	r1, #40	; 0x28
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 f815 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 80003f2:	210c      	movs	r1, #12
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f811 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 80003fa:	2106      	movs	r1, #6
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f80d 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f809 	bl	800041c <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 800040a:	2101      	movs	r1, #1
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f805 	bl	800041c <lcd_4bit_send_command>
 8000412:	e000      	b.n	8000416 <lcd_4bit_intialize+0xd2>
		return;
 8000414:	bf00      	nop
	}
}
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8_t command)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01d      	beq.n	800046a <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feee 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3308      	adds	r3, #8
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fee8 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	091b      	lsrs	r3, r3, #4
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f8df 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f918 	bl	8000688 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	4619      	mov	r1, r3
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f8d7 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f910 	bl	8000688 <lcd_4bit_send_enable_signal>
 8000468:	e000      	b.n	800046c <lcd_4bit_send_command+0x50>
		return;
 800046a:	bf00      	nop
	}
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_4bit_send_char_data>:
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
	}
}

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8_t data)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d01d      	beq.n	80004c0 <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		MGPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fec3 	bl	8000214 <MGPIO_voidWritePortPin>
		MGPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3308      	adds	r3, #8
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff febd 	bl	8000214 <MGPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f8b4 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f8ed 	bl	8000688 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8ac 	bl	8000610 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f8e5 	bl	8000688 <lcd_4bit_send_enable_signal>
 80004be:	e000      	b.n	80004c2 <lcd_4bit_send_char_data+0x50>
		return;
 80004c0:	bf00      	nop
	}
}
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	4608      	mov	r0, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	70fb      	strb	r3, [r7, #3]
 80004da:	460b      	mov	r3, r1
 80004dc:	70bb      	strb	r3, [r7, #2]
 80004de:	4613      	mov	r3, r2
 80004e0:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80004e8:	78ba      	ldrb	r2, [r7, #2]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f8f2 	bl	80006d8 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 80004f4:	787b      	ldrb	r3, [r7, #1]
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ffba 	bl	8000472 <lcd_4bit_send_char_data>
 80004fe:	e000      	b.n	8000502 <lcd_4bit_send_char_data_pos+0x3a>
		return;
 8000500:	bf00      	nop
	}
}
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	72fb      	strb	r3, [r7, #11]
 8000516:	4613      	mov	r3, r2
 8000518:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 8000520:	7aba      	ldrb	r2, [r7, #10]
 8000522:	7afb      	ldrb	r3, [r7, #11]
 8000524:	4619      	mov	r1, r3
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f000 f8d6 	bl	80006d8 <lcd_4bit_set_cursor>
		while(*str)
 800052c:	e007      	b.n	800053e <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff ff9a 	bl	8000472 <lcd_4bit_send_char_data>
		while(*str)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f3      	bne.n	800052e <lcd_4bit_send_string_pos+0x26>
 8000546:	e000      	b.n	800054a <lcd_4bit_send_string_pos+0x42>
		return;
 8000548:	bf00      	nop
		}
	}
}
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <LCD_Clear>:


void LCD_Clear(chr_lcd_4bit_t *lcd)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	lcd_4bit_send_command(lcd, _LCD_CLEAR);
 8000558:	2101      	movs	r1, #1
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ff5e 	bl	800041c <lcd_4bit_send_command>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <LCD_WriteNumber_Position>:
	}
}


void LCD_WriteNumber_Position(uint32_t Number, uint8_t row, uint8_t column)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	70bb      	strb	r3, [r7, #2]
	column--;
 8000578:	78bb      	ldrb	r3, [r7, #2]
 800057a:	3b01      	subs	r3, #1
 800057c:	70bb      	strb	r3, [r7, #2]
	uint8_t i=0, arr[10], j;
 800057e:	2300      	movs	r3, #0
 8000580:	75fb      	strb	r3, [r7, #23]
	if(Number==0) lcd_4bit_send_char_data_pos(&lcd_1, row, column, '0');
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d121      	bne.n	80005cc <LCD_WriteNumber_Position+0x64>
 8000588:	78ba      	ldrb	r2, [r7, #2]
 800058a:	78f9      	ldrb	r1, [r7, #3]
 800058c:	2330      	movs	r3, #48	; 0x30
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <LCD_WriteNumber_Position+0xa0>)
 8000590:	f7ff ff9a 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
		{
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
		}
	}
}
 8000594:	e034      	b.n	8000600 <LCD_WriteNumber_Position+0x98>
			arr[i]= Number%10 +'0';
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <LCD_WriteNumber_Position+0xa4>)
 800059a:	fba3 2301 	umull	r2, r3, r3, r1
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	4613      	mov	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	1aca      	subs	r2, r1, r3
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3230      	adds	r2, #48	; 0x30
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	3318      	adds	r3, #24
 80005b4:	443b      	add	r3, r7
 80005b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			Number /= 10;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <LCD_WriteNumber_Position+0xa4>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
			i++;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	3301      	adds	r3, #1
 80005ca:	75fb      	strb	r3, [r7, #23]
		while(Number)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1e1      	bne.n	8000596 <LCD_WriteNumber_Position+0x2e>
		for(j=i ; j>0 ;j--)
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	75bb      	strb	r3, [r7, #22]
 80005d6:	e010      	b.n	80005fa <LCD_WriteNumber_Position+0x92>
			lcd_4bit_send_char_data_pos(&lcd_1, row, ++column, arr[j-1]);
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	3301      	adds	r3, #1
 80005dc:	70bb      	strb	r3, [r7, #2]
 80005de:	7dbb      	ldrb	r3, [r7, #22]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	3318      	adds	r3, #24
 80005e4:	443b      	add	r3, r7
 80005e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005ea:	78ba      	ldrb	r2, [r7, #2]
 80005ec:	78f9      	ldrb	r1, [r7, #3]
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <LCD_WriteNumber_Position+0xa0>)
 80005f0:	f7ff ff6a 	bl	80004c8 <lcd_4bit_send_char_data_pos>
		for(j=i ; j>0 ;j--)
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	75bb      	strb	r3, [r7, #22]
 80005fa:	7dbb      	ldrb	r3, [r7, #22]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1eb      	bne.n	80005d8 <LCD_WriteNumber_Position+0x70>
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000040 	.word	0x20000040
 800060c:	cccccccd 	.word	0xcccccccd

08000610 <lcd_send_4bits>:




static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8_t _data_command)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	MGPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8_t)0x01);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0218 	add.w	r2, r3, #24
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f7ff fdf1 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8_t)0x01);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f103 0220 	add.w	r2, r3, #32
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4610      	mov	r0, r2
 8000648:	f7ff fde4 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8_t)0x01);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	089b      	lsrs	r3, r3, #2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f7ff fdd7 	bl	8000214 <MGPIO_voidWritePortPin>
	MGPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8_t)0x01);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	4610      	mov	r0, r2
 800067c:	f7ff fdca 	bl	8000214 <MGPIO_voidWritePortPin>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3310      	adds	r3, #16
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdbc 	bl	8000214 <MGPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8_t i=0 ; i<10 ; i++);
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e002      	b.n	80006a8 <lcd_4bit_send_enable_signal+0x20>
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	d9f9      	bls.n	80006a2 <lcd_4bit_send_enable_signal+0x1a>
	MGPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3310      	adds	r3, #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fdad 	bl	8000214 <MGPIO_voidWritePortPin>
	for(uint16_t i=0 ; i<2000 ; i++);
 80006ba:	2300      	movs	r3, #0
 80006bc:	81bb      	strh	r3, [r7, #12]
 80006be:	e002      	b.n	80006c6 <lcd_4bit_send_enable_signal+0x3e>
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	81bb      	strh	r3, [r7, #12]
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006cc:	d3f8      	bcc.n	80006c0 <lcd_4bit_send_enable_signal+0x38>
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
 80006e4:	4613      	mov	r3, r2
 80006e6:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d82a      	bhi.n	800074c <lcd_4bit_set_cursor+0x74>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <lcd_4bit_set_cursor+0x24>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	0800071d 	.word	0x0800071d
 8000704:	0800072d 	.word	0x0800072d
 8000708:	0800073d 	.word	0x0800073d
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	3b80      	subs	r3, #128	; 0x80
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff fe81 	bl	800041c <lcd_4bit_send_command>
        	break;
 800071a:	e017      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 800071c:	78bb      	ldrb	r3, [r7, #2]
 800071e:	3b40      	subs	r3, #64	; 0x40
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe79 	bl	800041c <lcd_4bit_send_command>
        	break;
 800072a:	e00f      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	3b6c      	subs	r3, #108	; 0x6c
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fe71 	bl	800041c <lcd_4bit_send_command>
        	break;
 800073a:	e007      	b.n	800074c <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 800073c:	78bb      	ldrb	r3, [r7, #2]
 800073e:	3b2c      	subs	r3, #44	; 0x2c
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fe69 	bl	800041c <lcd_4bit_send_command>
        	break;
 800074a:	bf00      	nop

        default : ;
    }
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MRCC_voidPeripheralClockEnable>:
	}
}


void MRCC_voidPeripheralClockEnable(uint8_t Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d01c      	beq.n	80007a4 <MRCC_voidPeripheralClockEnable+0x50>
 800076a:	2b02      	cmp	r3, #2
 800076c:	dc25      	bgt.n	80007ba <MRCC_voidPeripheralClockEnable+0x66>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <MRCC_voidPeripheralClockEnable+0x24>
 8000772:	2b01      	cmp	r3, #1
 8000774:	d00b      	beq.n	800078e <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 8000776:	e020      	b.n	80007ba <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 8000788:	430b      	orrs	r3, r1
 800078a:	6153      	str	r3, [r2, #20]
		break;
 800078c:	e016      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	61d3      	str	r3, [r2, #28]
		break;
 80007a2:	e00b      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <MRCC_voidPeripheralClockEnable+0x74>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6193      	str	r3, [r2, #24]
		break;
 80007b8:	e000      	b.n	80007bc <MRCC_voidPeripheralClockEnable+0x68>
		break;
 80007ba:	bf00      	nop
	}
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xc0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xc0>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xc0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_GPIO_Init+0xc0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a23      	ldr	r2, [pc, #140]	; (800088c <MX_GPIO_Init+0xc0>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_GPIO_Init+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_GPIO_Init+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <MX_GPIO_Init+0xc0>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_GPIO_Init+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xc0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xc0>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xc0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000848:	f000 fe14 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800084c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000866:	f000 fc81 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800086a:	2378      	movs	r3, #120	; 0x78
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0xc8>)
 800087e:	f000 fc75 	bl	800116c <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <set_time>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

void set_time (void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
    /*
     * Initialize RTC and set the Time and Date
     */
  gTime.Hours = IntialHours;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <set_time+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <set_time+0x64>)
 80008a4:	701a      	strb	r2, [r3, #0]
  gTime.Minutes = IntialMinuts;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <set_time+0x68>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <set_time+0x64>)
 80008ae:	705a      	strb	r2, [r3, #1]
  gTime.Seconds = IntialSeconds;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <set_time+0x6c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <set_time+0x64>)
 80008b8:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ba:	2201      	movs	r2, #1
 80008bc:	490f      	ldr	r1, [pc, #60]	; (80008fc <set_time+0x64>)
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <set_time+0x70>)
 80008c0:	f001 fc0e 	bl	80020e0 <HAL_RTC_SetTime>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  gDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <set_time+0x74>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
  gDate.Month = RTC_MONTH_AUGUST;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <set_time+0x74>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	705a      	strb	r2, [r3, #1]
  gDate.Date = 0x12;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <set_time+0x74>)
 80008d2:	2212      	movs	r2, #18
 80008d4:	709a      	strb	r2, [r3, #2]
  gDate.Year = 0x0;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <set_time+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BCD) != HAL_OK)
 80008dc:	2201      	movs	r2, #1
 80008de:	490b      	ldr	r1, [pc, #44]	; (800090c <set_time+0x74>)
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <set_time+0x70>)
 80008e2:	f001 fd6d 	bl	80023c0 <HAL_RTC_SetDate>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80008e6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80008ea:	2101      	movs	r1, #1
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <set_time+0x70>)
 80008ee:	f002 f957 	bl	8002ba0 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000ba 	.word	0x200000ba
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	200000b8 	.word	0x200000b8
 8000904:	200000b9 	.word	0x200000b9
 8000908:	200000cc 	.word	0x200000cc
 800090c:	200000a8 	.word	0x200000a8

08000910 <LcdUpdate>:


void LcdUpdate()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	LCD_Clear(&lcd_1);
 8000916:	4816      	ldr	r0, [pc, #88]	; (8000970 <LcdUpdate+0x60>)
 8000918:	f7ff fe1a 	bl	8000550 <LCD_Clear>
	HAL_Delay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f000 fb1d 	bl	8000f5c <HAL_Delay>
	LCD_WriteNumber_Position(TotalCounts,1,4);
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <LcdUpdate+0x64>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2204      	movs	r2, #4
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe1c 	bl	8000568 <LCD_WriteNumber_Position>
	HAL_Delay(10);
 8000930:	200a      	movs	r0, #10
 8000932:	f000 fb13 	bl	8000f5c <HAL_Delay>
	for(int i=0 ; i<2 ; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e010      	b.n	800095e <LcdUpdate+0x4e>
	{
		LCD_WriteNumber_Position(ArrayTimers[i], 1, ArrayPosition[i]);
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LcdUpdate+0x68>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000944:	4618      	mov	r0, r3
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LcdUpdate+0x6c>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	2101      	movs	r1, #1
 8000954:	f7ff fe08 	bl	8000568 <LCD_WriteNumber_Position>
	for(int i=0 ; i<2 ; i++)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b01      	cmp	r3, #1
 8000962:	ddeb      	ble.n	800093c <LcdUpdate+0x2c>
	}
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000040 	.word	0x20000040
 8000974:	200000c8 	.word	0x200000c8
 8000978:	200000c4 	.word	0x200000c4
 800097c:	2000007c 	.word	0x2000007c

08000980 <MinDetect>:

void MinDetect()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	for(int i=0 ; i<2 ; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e020      	b.n	80009ce <MinDetect+0x4e>
	{
		if( ( CurrentSec-1 == ArrayCounter[i][1]) && FlagDetect==0 )
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MinDetect+0xb0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	4928      	ldr	r1, [pc, #160]	; (8000a34 <MinDetect+0xb4>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	885b      	ldrh	r3, [r3, #2]
 800099c:	429a      	cmp	r2, r3
 800099e:	d113      	bne.n	80009c8 <MinDetect+0x48>
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MinDetect+0xb8>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10e      	bne.n	80009c8 <MinDetect+0x48>
		{
			ArrayTimers[i]--;
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <MinDetect+0xbc>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	b299      	uxth	r1, r3
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <MinDetect+0xbc>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			FlagDetect=1;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MinDetect+0xb8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	801a      	strh	r2, [r3, #0]
			LcdUpdate();
 80009c4:	f7ff ffa4 	bl	8000910 <LcdUpdate>
	for(int i=0 ; i<2 ; i++)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	dddb      	ble.n	800098c <MinDetect+0xc>
		}
	}

	if((CurrentSec == ArrayCounter[0][1]) || (CurrentSec == ArrayCounter[1][1]) || CurrentSec==1)
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MinDetect+0xb4>)
 80009d6:	885b      	ldrh	r3, [r3, #2]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MinDetect+0xb0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d00a      	beq.n	80009f8 <MinDetect+0x78>
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MinDetect+0xb4>)
 80009e4:	88db      	ldrh	r3, [r3, #6]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MinDetect+0xb0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d003      	beq.n	80009f8 <MinDetect+0x78>
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MinDetect+0xb0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d102      	bne.n	80009fe <MinDetect+0x7e>
		FlagDetect=0;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MinDetect+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	801a      	strh	r2, [r3, #0]

	if(CurrentSec == 59 && FlagDetect==0)
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MinDetect+0xb0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b3b      	cmp	r3, #59	; 0x3b
 8000a04:	d10f      	bne.n	8000a26 <MinDetect+0xa6>
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MinDetect+0xb8>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10a      	bne.n	8000a26 <MinDetect+0xa6>
	{
		TotalCounts++;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MinDetect+0xc0>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MinDetect+0xc0>)
 8000a1a:	801a      	strh	r2, [r3, #0]
		FlagDetect=1;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MinDetect+0xb8>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	801a      	strh	r2, [r3, #0]
		LcdUpdate();
 8000a22:	f7ff ff75 	bl	8000910 <LcdUpdate>
	}

	//LCD_WriteNumber_Position(CurrentMin,1,5);
	//LCD_WriteNumber_Position(CurrentSec,2,5);

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000b0 	.word	0x200000b0
 8000a34:	200000bc 	.word	0x200000bc
 8000a38:	200000ca 	.word	0x200000ca
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	200000c8 	.word	0x200000c8

08000a44 <get_time>:

void get_time(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <get_time+0x28>)
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <get_time+0x2c>)
 8000a4e:	f001 fbdf 	bl	8002210 <HAL_RTC_GetTime>
  CurrentSec = gTime.Seconds;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <get_time+0x28>)
 8000a54:	789b      	ldrb	r3, [r3, #2]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <get_time+0x30>)
 8000a5a:	601a      	str	r2, [r3, #0]
  CurrentMin = gTime.Minutes;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <get_time+0x28>)
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <get_time+0x34>)
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000ac 	.word	0x200000ac
 8000a70:	200000cc 	.word	0x200000cc
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	200000b4 	.word	0x200000b4

08000a7c <GetKeypadValue>:

uint16_t GetKeypadValue()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	uint16_t retVal = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	80fb      	strh	r3, [r7, #6]
	keypadVal = NOTPRESSED;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <GetKeypadValue+0x74>)
 8000a88:	22ff      	movs	r2, #255	; 0xff
 8000a8a:	701a      	strb	r2, [r3, #0]

	while(keypadVal != '*')
 8000a8c:	e024      	b.n	8000ad8 <GetKeypadValue+0x5c>
	{
		keypadVal = read_keypad(&keypad_1);
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <GetKeypadValue+0x78>)
 8000a90:	f7ff fc00 	bl	8000294 <read_keypad>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <GetKeypadValue+0x74>)
 8000a9a:	701a      	strb	r2, [r3, #0]
		if(keypadVal>='0' && keypadVal<='9')
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <GetKeypadValue+0x74>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8000aa2:	d919      	bls.n	8000ad8 <GetKeypadValue+0x5c>
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <GetKeypadValue+0x74>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b39      	cmp	r3, #57	; 0x39
 8000aaa:	d815      	bhi.n	8000ad8 <GetKeypadValue+0x5c>
		{
			lcd_4bit_send_char_data(&lcd_1, keypadVal);
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <GetKeypadValue+0x74>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <GetKeypadValue+0x7c>)
 8000ab4:	f7ff fcdd 	bl	8000472 <lcd_4bit_send_char_data>
			retVal = ((keypadVal - '0') + (retVal * 10));
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <GetKeypadValue+0x74>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	0089      	lsls	r1, r1, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3b30      	subs	r3, #48	; 0x30
 8000ad0:	80fb      	strh	r3, [r7, #6]
			keypadVal = NOTPRESSED;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <GetKeypadValue+0x74>)
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	701a      	strb	r2, [r3, #0]
	while(keypadVal != '*')
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <GetKeypadValue+0x74>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ade:	d1d6      	bne.n	8000a8e <GetKeypadValue+0x12>
		}
	}

	keypadVal = NOTPRESSED;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <GetKeypadValue+0x74>)
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	701a      	strb	r2, [r3, #0]
	return retVal;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000078 	.word	0x20000078
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000040 	.word	0x20000040

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 f9ca 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f85a 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f7ff fe60 	bl	80007cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000b0c:	f000 f8b6 	bl	8000c7c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000b10:	2102      	movs	r1, #2
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fe1e 	bl	8000754 <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000b18:	2103      	movs	r1, #3
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fe1a 	bl	8000754 <MRCC_voidPeripheralClockEnable>
	set_time();
 8000b20:	f7ff feba 	bl	8000898 <set_time>

	lcd_4bit_intialize(&lcd_1);
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <main+0xa8>)
 8000b26:	f7ff fc0d 	bl	8000344 <lcd_4bit_intialize>

	ArrayCounter[0][0] = gTime.Minutes;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <main+0xac>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <main+0xb0>)
 8000b32:	801a      	strh	r2, [r3, #0]
	ArrayCounter[0][1] = gTime.Seconds+2;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <main+0xac>)
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <main+0xb0>)
 8000b40:	805a      	strh	r2, [r3, #2]
	ArrayCounter[1][0] = gTime.Minutes;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <main+0xac>)
 8000b44:	785b      	ldrb	r3, [r3, #1]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <main+0xb0>)
 8000b4a:	809a      	strh	r2, [r3, #4]
	ArrayCounter[1][1] = gTime.Seconds+4;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <main+0xac>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3304      	adds	r3, #4
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <main+0xb0>)
 8000b58:	80da      	strh	r2, [r3, #6]

	LCD_Clear(&lcd_1);
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <main+0xa8>)
 8000b5c:	f7ff fcf8 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "Intial Timer 1:");
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <main+0xb4>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	2101      	movs	r1, #1
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <main+0xa8>)
 8000b68:	f7ff fcce 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayTimers[0] = GetKeypadValue();
 8000b6c:	f7ff ff86 	bl	8000a7c <GetKeypadValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <main+0xb8>)
 8000b76:	801a      	strh	r2, [r3, #0]

	LCD_Clear(&lcd_1);
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <main+0xa8>)
 8000b7a:	f7ff fce9 	bl	8000550 <LCD_Clear>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "Intial Timer 2:");
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <main+0xbc>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	2101      	movs	r1, #1
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <main+0xa8>)
 8000b86:	f7ff fcbf 	bl	8000508 <lcd_4bit_send_string_pos>
	ArrayTimers[1] = GetKeypadValue();
 8000b8a:	f7ff ff77 	bl	8000a7c <GetKeypadValue>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <main+0xb8>)
 8000b94:	805a      	strh	r2, [r3, #2]

	LcdUpdate();
 8000b96:	f7ff febb 	bl	8000910 <LcdUpdate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 get_time();
 8000b9a:	f7ff ff53 	bl	8000a44 <get_time>
	 MinDetect();
 8000b9e:	f7ff feef 	bl	8000980 <MinDetect>
	 get_time();
 8000ba2:	e7fa      	b.n	8000b9a <main+0x9e>
 8000ba4:	20000040 	.word	0x20000040
 8000ba8:	200000ac 	.word	0x200000ac
 8000bac:	200000bc 	.word	0x200000bc
 8000bb0:	08002c44 	.word	0x08002c44
 8000bb4:	200000c4 	.word	0x200000c4
 8000bb8:	08002c54 	.word	0x08002c54

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	2228      	movs	r2, #40	; 0x28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 f802 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fc52 	bl	80014bc <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c1e:	f000 f828 	bl	8000c72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 febe 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c4a:	f000 f812 	bl	8000c72 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f834 	bl	8001cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c66:	f000 f804 	bl	8000c72 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c76:	b672      	cpsid	i
}
 8000c78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <Error_Handler+0x8>

08000c7c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2100      	movs	r1, #0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	801a      	strh	r2, [r3, #0]
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000c9e:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <MX_RTC_Init+0xc4>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000cb4:	f001 f97e 	bl	8001fb4 <HAL_RTC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f7ff ffd8 	bl	8000c72 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000cd8:	f001 fa02 	bl	80020e0 <HAL_RTC_SetTime>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000ce2:	f7ff ffc6 	bl	8000c72 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000cea:	2301      	movs	r3, #1
 8000cec:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000d00:	f001 fb5e 	bl	80023c0 <HAL_RTC_SetDate>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000d0a:	f7ff ffb2 	bl	8000c72 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_RTC_Init+0xc0>)
 8000d26:	f001 fc01 	bl	800252c <HAL_RTC_SetAlarm>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000d30:	f7ff ff9f 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000cc 	.word	0x200000cc
 8000d40:	40002800 	.word	0x40002800

08000d44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_RTC_MspInit+0x3c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d110      	bne.n	8000d78 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d56:	f000 fba5 	bl	80014a4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_RTC_MspInit+0x40>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_RTC_MspInit+0x40>)
 8000d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_RTC_MspInit+0x40>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_RTC_MspInit+0x44>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40002800 	.word	0x40002800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	4242043c 	.word	0x4242043c

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x60>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_MspInit+0x60>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f875 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
	...

08000e4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e72:	f7ff ffe4 	bl	8000e3e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f001 feb5 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7a:	f7ff fe3f 	bl	8000afc <main>
  bx lr
 8000e7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000e88:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8000e8c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000e90:	200000e4 	.word	0x200000e4

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x28>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x28>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f92b 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff ff6a 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f935 	bl	8001152 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f90b 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000080 	.word	0x20000080
 8000f1c:	20000088 	.word	0x20000088
 8000f20:	20000084 	.word	0x20000084

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000088 	.word	0x20000088
 8000f44:	200000e0 	.word	0x200000e0

08000f48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	200000e0 	.word	0x200000e0

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000088 	.word	0x20000088

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff90 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff49 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e169      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001180:	2201      	movs	r2, #1
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8158 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a9a      	ldr	r2, [pc, #616]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d05e      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011a8:	4a98      	ldr	r2, [pc, #608]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d875      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ae:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d058      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011b4:	4a96      	ldr	r2, [pc, #600]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d86f      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ba:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d052      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011c0:	4a94      	ldr	r2, [pc, #592]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d869      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011c6:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d04c      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011cc:	4a92      	ldr	r2, [pc, #584]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d863      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011d2:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d046      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011d8:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d85d      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d82a      	bhi.n	8001238 <HAL_GPIO_Init+0xcc>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d859      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <HAL_GPIO_Init+0x80>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001241 	.word	0x08001241
 80011f4:	08001253 	.word	0x08001253
 80011f8:	08001295 	.word	0x08001295
 80011fc:	0800129b 	.word	0x0800129b
 8001200:	0800129b 	.word	0x0800129b
 8001204:	0800129b 	.word	0x0800129b
 8001208:	0800129b 	.word	0x0800129b
 800120c:	0800129b 	.word	0x0800129b
 8001210:	0800129b 	.word	0x0800129b
 8001214:	0800129b 	.word	0x0800129b
 8001218:	0800129b 	.word	0x0800129b
 800121c:	0800129b 	.word	0x0800129b
 8001220:	0800129b 	.word	0x0800129b
 8001224:	0800129b 	.word	0x0800129b
 8001228:	0800129b 	.word	0x0800129b
 800122c:	0800129b 	.word	0x0800129b
 8001230:	08001249 	.word	0x08001249
 8001234:	0800125d 	.word	0x0800125d
 8001238:	4a79      	ldr	r2, [pc, #484]	; (8001420 <HAL_GPIO_Init+0x2b4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123e:	e02c      	b.n	800129a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e029      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	3304      	adds	r3, #4
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e024      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	3308      	adds	r3, #8
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e01f      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	330c      	adds	r3, #12
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e01a      	b.n	800129c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126e:	2304      	movs	r3, #4
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e013      	b.n	800129c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	611a      	str	r2, [r3, #16]
          break;
 8001286:	e009      	b.n	800129c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	615a      	str	r2, [r3, #20]
          break;
 8001292:	e003      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x130>
          break;
 800129a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d801      	bhi.n	80012a6 <HAL_GPIO_Init+0x13a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <HAL_GPIO_Init+0x13e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d802      	bhi.n	80012b8 <HAL_GPIO_Init+0x14c>
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x152>
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3b08      	subs	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	210f      	movs	r1, #15
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80b1 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_GPIO_Init+0x2c0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <HAL_GPIO_Init+0x2c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3e      	ldr	r2, [pc, #248]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1e0>
 8001348:	2303      	movs	r3, #3
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 800134c:	2304      	movs	r3, #4
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001358:	2300      	movs	r3, #0
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136a:	492f      	ldr	r1, [pc, #188]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	492c      	ldr	r1, [pc, #176]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800139c:	4013      	ands	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	491e      	ldr	r1, [pc, #120]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4914      	ldr	r1, [pc, #80]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d021      	beq.n	8001440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	490e      	ldr	r1, [pc, #56]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
 8001408:	e021      	b.n	800144e <HAL_GPIO_Init+0x2e2>
 800140a:	bf00      	nop
 800140c:	10320000 	.word	0x10320000
 8001410:	10310000 	.word	0x10310000
 8001414:	10220000 	.word	0x10220000
 8001418:	10210000 	.word	0x10210000
 800141c:	10120000 	.word	0x10120000
 8001420:	10110000 	.word	0x10110000
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	40010800 	.word	0x40010800
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40011000 	.word	0x40011000
 8001438:	40011400 	.word	0x40011400
 800143c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	4909      	ldr	r1, [pc, #36]	; (8001470 <HAL_GPIO_Init+0x304>)
 800144a:	4013      	ands	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae8e 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	372c      	adds	r7, #44	; 0x2c
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	611a      	str	r2, [r3, #16]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	420e0020 	.word	0x420e0020

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e272      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8087 	beq.w	80015ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014dc:	4b92      	ldr	r3, [pc, #584]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d00c      	beq.n	8001502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014e8:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d112      	bne.n	800151a <HAL_RCC_OscConfig+0x5e>
 80014f4:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d06c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x12c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d168      	bne.n	80015e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e24c      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x76>
 8001524:	4b80      	ldr	r3, [pc, #512]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a7f      	ldr	r2, [pc, #508]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e02e      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a77      	ldr	r2, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0xbc>
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a71      	ldr	r2, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0xd4>
 8001578:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a67      	ldr	r2, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fcd6 	bl	8000f48 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcd2 	bl	8000f48 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e200      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe4>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcc2 	bl	8000f48 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcbe 	bl	8000f48 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1ec      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x10c>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b08      	cmp	r3, #8
 800160c:	d11c      	bne.n	8001648 <HAL_RCC_OscConfig+0x18c>
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x176>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1c0      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4939      	ldr	r1, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e03a      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x270>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fc77 	bl	8000f48 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fc73 	bl	8000f48 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1a1      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4927      	ldr	r1, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x270>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fc56 	bl	8000f48 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc52 	bl	8000f48 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e180      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d03a      	beq.n	8001740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d019      	beq.n	8001706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_RCC_OscConfig+0x274>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fc36 	bl	8000f48 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc32 	bl	8000f48 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e160      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 fac4 	bl	8001c8c <RCC_Delay>
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_OscConfig+0x274>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fc1c 	bl	8000f48 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001712:	e00f      	b.n	8001734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc18 	bl	8000f48 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d908      	bls.n	8001734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e146      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	42420000 	.word	0x42420000
 8001730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e9      	bne.n	8001714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a6 	beq.w	800189a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff fbd9 	bl	8000f48 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fbd5 	bl	8000f48 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	; 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e103      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x4c8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x312>
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e02d      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x334>
 80017d6:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x356>
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x36e>
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fb89 	bl	8000f48 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fb85 	bl	8000f48 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0b1      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x37e>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb73 	bl	8000f48 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fb6f 	bl	8000f48 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e09b      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d061      	beq.n	8001974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d146      	bne.n	8001946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb43 	bl	8000f48 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fb3f 	bl	8000f48 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e06d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4921      	ldr	r1, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a19      	ldr	r1, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	430b      	orrs	r3, r1
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fb13 	bl	8000f48 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fb0f 	bl	8000f48 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e03d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x46a>
 8001944:	e035      	b.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x4cc>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fafc 	bl	8000f48 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff faf8 	bl	8000f48 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e026      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x498>
 8001972:	e01e      	b.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e019      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
 8001988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x500>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0d0      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4965      	ldr	r1, [pc, #404]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d040      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e073      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4936      	ldr	r1, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff fa4a 	bl	8000f48 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff fa46 	bl	8000f48 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e053      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d210      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4922      	ldr	r1, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f821 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1cc>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f9a8 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08002c94 	.word	0x08002c94
 8001b8c:	20000080 	.word	0x20000080
 8001b90:	20000084 	.word	0x20000084

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b490      	push	{r4, r7}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b9c:	1d3c      	adds	r4, r7, #4
 8001b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ba4:	f240 2301 	movw	r3, #513	; 0x201
 8001ba8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x46>
 8001bd2:	e02b      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd6:	623b      	str	r3, [r7, #32]
      break;
 8001bd8:	e02b      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	0c9b      	lsrs	r3, r3, #18
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3328      	adds	r3, #40	; 0x28
 8001be4:	443b      	add	r3, r7
 8001be6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d012      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	0c5b      	lsrs	r3, r3, #17
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	3328      	adds	r3, #40	; 0x28
 8001c02:	443b      	add	r3, r7
 8001c04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c0e:	fb03 f202 	mul.w	r2, r3, r2
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	e004      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	623b      	str	r3, [r7, #32]
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2e:	623b      	str	r3, [r7, #32]
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc90      	pop	{r4, r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	08002c64 	.word	0x08002c64
 8001c44:	40021000 	.word	0x40021000
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	003d0900 	.word	0x003d0900

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000080 	.word	0x20000080

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c68:	f7ff fff2 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002ca4 	.word	0x08002ca4

08001c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <RCC_Delay+0x34>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <RCC_Delay+0x38>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca8:	bf00      	nop
  }
  while (Delay --);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <RCC_Delay+0x1c>
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000080 	.word	0x20000080
 8001cc4:	10624dd3 	.word	0x10624dd3

08001cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d07d      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce8:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d118      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a42      	ldr	r2, [pc, #264]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f90e 	bl	8000f48 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	e008      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d30:	f7ff f90a 	bl	8000f48 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e06d      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02e      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d027      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d82:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d014      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff f8d9 	bl	8000f48 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff f8d5 	bl	8000f48 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e036      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ee      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4917      	ldr	r1, [pc, #92]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	490b      	ldr	r1, [pc, #44]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4904      	ldr	r1, [pc, #16]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	42420440 	.word	0x42420440

08001e34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b08d      	sub	sp, #52	; 0x34
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001e3e:	f107 040c 	add.w	r4, r7, #12
 8001e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e48:	f240 2301 	movw	r3, #513	; 0x201
 8001e4c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	f200 808e 	bhi.w	8001f8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d049      	beq.n	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d079      	beq.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e7c:	e086      	b.n	8001f8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d07f      	beq.n	8001f90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	3330      	adds	r3, #48	; 0x30
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d017      	beq.n	8001edc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c5b      	lsrs	r3, r3, #17
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	3330      	adds	r3, #48	; 0x30
 8001eb8:	443b      	add	r3, r7
 8001eba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001eca:	4a37      	ldr	r2, [pc, #220]	; (8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eda:	e004      	b.n	8001ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef2:	d102      	bne.n	8001efa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ef8:	e04a      	b.n	8001f90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f08:	e042      	b.n	8001f90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1a:	d108      	bne.n	8001f2e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2c:	e01f      	b.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f38:	d109      	bne.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001f46:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4c:	e00f      	b.n	8001f6e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001f66:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f6c:	e012      	b.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001f6e:	e011      	b.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f70:	f7ff fe78 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0b9b      	lsrs	r3, r3, #14
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	3301      	adds	r3, #1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f8a:	e004      	b.n	8001f96 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001f8c:	bf00      	nop
 8001f8e:	e002      	b.n	8001f96 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001f90:	bf00      	nop
 8001f92:	e000      	b.n	8001f96 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001f94:	bf00      	nop
    }
  }
  return (frequency);
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3734      	adds	r7, #52	; 0x34
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	08002c74 	.word	0x08002c74
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	003d0900 	.word	0x003d0900
 8001fb0:	aaaaaaab 	.word	0xaaaaaaab

08001fb4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e084      	b.n	80020d4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7c5b      	ldrb	r3, [r3, #17]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe feb2 	bl	8000d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fb39 	bl	800265e <HAL_RTC_WaitForSynchro>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e06b      	b.n	80020d4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fbf2 	bl	80027e6 <RTC_EnterInitMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2204      	movs	r2, #4
 800200c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e060      	b.n	80020d4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0207 	bic.w	r2, r2, #7
 8002020:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RTC_Init+0x128>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <HAL_RTC_Init+0x128>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RTC_Init+0x128>)
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4926      	ldr	r1, [pc, #152]	; (80020dc <HAL_RTC_Init+0x128>)
 8002044:	4313      	orrs	r3, r2
 8002046:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d003      	beq.n	800205a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e00e      	b.n	8002078 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff feea 	bl	8001e34 <HAL_RCCEx_GetPeriphCLKFreq>
 8002060:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2204      	movs	r2, #4
 800206c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e030      	b.n	80020d4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b01      	subs	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 010f 	bic.w	r1, r3, #15
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0c1a      	lsrs	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	b291      	uxth	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fbc6 	bl	8002836 <RTC_ExitInitMode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00c      	b.n	80020d4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40006c00 	.word	0x40006c00

080020e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RTC_SetTime+0x20>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e080      	b.n	8002206 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	7c1b      	ldrb	r3, [r3, #16]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RTC_SetTime+0x30>
 800210c:	2302      	movs	r3, #2
 800210e:	e07a      	b.n	8002206 <HAL_RTC_SetTime+0x126>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800212c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	4619      	mov	r1, r3
 8002136:	460b      	mov	r3, r1
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a5b      	subs	r3, r3, r1
 800213c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800213e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e01e      	b.n	8002188 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fbb6 	bl	80028c0 <RTC_Bcd2ToByte>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800215c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fbab 	bl	80028c0 <RTC_Bcd2ToByte>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002176:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fb9f 	bl	80028c0 <RTC_Bcd2ToByte>
 8002182:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002184:	4423      	add	r3, r4
 8002186:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002188:	6979      	ldr	r1, [r7, #20]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fac4 	bl	8002718 <RTC_WriteTimeCounter>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2204      	movs	r2, #4
 800219a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e02f      	b.n	8002206 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0205 	bic.w	r2, r2, #5
 80021b4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fad5 	bl	8002766 <RTC_ReadAlarmCounter>
 80021bc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d018      	beq.n	80021f8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d214      	bcs.n	80021f8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80021d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021d8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021da:	6939      	ldr	r1, [r7, #16]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fadb 	bl	8002798 <RTC_WriteAlarmCounter>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2204      	movs	r2, #4
 80021ec:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e006      	b.n	8002206 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
	...

08002210 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_RTC_GetTime+0x28>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b5      	b.n	80023a8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0ac      	b.n	80023a8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa32 	bl	80026b8 <RTC_ReadTimeCounter>
 8002254:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_RTC_GetTime+0x1a0>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0adb      	lsrs	r3, r3, #11
 8002260:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_RTC_GetTime+0x1a0>)
 8002266:	fba3 1302 	umull	r1, r3, r3, r2
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_RTC_GetTime+0x1a4>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4a4a      	ldr	r2, [pc, #296]	; (80023b0 <HAL_RTC_GetTime+0x1a0>)
 8002288:	fba2 1203 	umull	r1, r2, r2, r3
 800228c:	0ad2      	lsrs	r2, r2, #11
 800228e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002292:	fb01 f202 	mul.w	r2, r1, r2
 8002296:	1a9a      	subs	r2, r3, r2
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RTC_GetTime+0x1a4>)
 800229a:	fba3 1302 	umull	r1, r3, r3, r2
 800229e:	0959      	lsrs	r1, r3, #5
 80022a0:	460b      	mov	r3, r1
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a5b      	subs	r3, r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	1ad1      	subs	r1, r2, r3
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b17      	cmp	r3, #23
 80022b4:	d955      	bls.n	8002362 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_RTC_GetTime+0x1a8>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_RTC_GetTime+0x1a8>)
 80022c6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ca:	091a      	lsrs	r2, r3, #4
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1aca      	subs	r2, r1, r3
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa42 	bl	8002766 <RTC_ReadAlarmCounter>
 80022e2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d008      	beq.n	80022fe <HAL_RTC_GetTime+0xee>
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d904      	bls.n	80022fe <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e002      	b.n	8002304 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <HAL_RTC_GetTime+0x1ac>)
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f9ff 	bl	8002718 <RTC_WriteTimeCounter>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e041      	b.n	80023a8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d00c      	beq.n	8002346 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4413      	add	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa2e 	bl	8002798 <RTC_WriteAlarmCounter>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e030      	b.n	80023a8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002346:	69f9      	ldr	r1, [r7, #28]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fa25 	bl	8002798 <RTC_WriteAlarmCounter>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e027      	b.n	80023a8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002358:	6979      	ldr	r1, [r7, #20]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 facd 	bl	80028fa <RTC_DateUpdate>
 8002360:	e003      	b.n	800236a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01a      	beq.n	80023a6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fa86 	bl	8002886 <RTC_ByteToBcd2>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fa7d 	bl	8002886 <RTC_ByteToBcd2>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fa74 	bl	8002886 <RTC_ByteToBcd2>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	91a2b3c5 	.word	0x91a2b3c5
 80023b4:	88888889 	.word	0x88888889
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	00015180 	.word	0x00015180

080023c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_RTC_SetDate+0x24>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e097      	b.n	8002518 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	7c1b      	ldrb	r3, [r3, #16]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_RTC_SetDate+0x34>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e091      	b.n	8002518 <HAL_RTC_SetDate+0x158>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2202      	movs	r2, #2
 80023fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	78da      	ldrb	r2, [r3, #3]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785a      	ldrb	r2, [r3, #1]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	789a      	ldrb	r2, [r3, #2]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	739a      	strb	r2, [r3, #14]
 800241e:	e01a      	b.n	8002456 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	78db      	ldrb	r3, [r3, #3]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa4b 	bl	80028c0 <RTC_Bcd2ToByte>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fa42 	bl	80028c0 <RTC_Bcd2ToByte>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	789b      	ldrb	r3, [r3, #2]
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fa39 	bl	80028c0 <RTC_Bcd2ToByte>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	7bdb      	ldrb	r3, [r3, #15]
 800245a:	4618      	mov	r0, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	7b59      	ldrb	r1, [r3, #13]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7b9b      	ldrb	r3, [r3, #14]
 8002464:	461a      	mov	r2, r3
 8002466:	f000 fb23 	bl	8002ab0 <RTC_WeekDayNum>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	7b1a      	ldrb	r2, [r3, #12]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f91c 	bl	80026b8 <RTC_ReadTimeCounter>
 8002480:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <HAL_RTC_SetDate+0x160>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0adb      	lsrs	r3, r3, #11
 800248c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b18      	cmp	r3, #24
 8002492:	d93a      	bls.n	800250a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_RTC_SetDate+0x164>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <HAL_RTC_SetDate+0x168>)
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f933 	bl	8002718 <RTC_WriteTimeCounter>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2204      	movs	r2, #4
 80024bc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e027      	b.n	8002518 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f94c 	bl	8002766 <RTC_ReadAlarmCounter>
 80024ce:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d018      	beq.n	800250a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d214      	bcs.n	800250a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80024e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024ea:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f952 	bl	8002798 <RTC_WriteAlarmCounter>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2204      	movs	r2, #4
 80024fe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e006      	b.n	8002518 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	91a2b3c5 	.word	0x91a2b3c5
 8002524:	aaaaaaab 	.word	0xaaaaaaab
 8002528:	00015180 	.word	0x00015180

0800252c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2100      	movs	r1, #0
 8002542:	460a      	mov	r2, r1
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	460a      	mov	r2, r1
 8002548:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_RTC_SetAlarm+0x2a>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07d      	b.n	8002656 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	7c1b      	ldrb	r3, [r3, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_RTC_SetAlarm+0x3a>
 8002562:	2302      	movs	r3, #2
 8002564:	e077      	b.n	8002656 <HAL_RTC_SetAlarm+0x12a>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff fe48 	bl	8002210 <HAL_RTC_GetTime>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e065      	b.n	8002656 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800258a:	7d3b      	ldrb	r3, [r7, #20]
 800258c:	461a      	mov	r2, r3
 800258e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002592:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002596:	7d7b      	ldrb	r3, [r7, #21]
 8002598:	4619      	mov	r1, r3
 800259a:	460b      	mov	r3, r1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a5b      	subs	r3, r3, r1
 80025a0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80025a2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80025a4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80025a6:	4413      	add	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d113      	bne.n	80025d8 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	4619      	mov	r1, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a5b      	subs	r3, r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80025cc:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80025d2:	4413      	add	r3, r2
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e01e      	b.n	8002616 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f96f 	bl	80028c0 <RTC_Bcd2ToByte>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80025ea:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f964 	bl	80028c0 <RTC_Bcd2ToByte>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002604:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	789b      	ldrb	r3, [r3, #2]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f958 	bl	80028c0 <RTC_Bcd2ToByte>
 8002610:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002612:	4423      	add	r3, r4
 8002614:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	429a      	cmp	r2, r3
 800261c:	d205      	bcs.n	800262a <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002624:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002628:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800262a:	69f9      	ldr	r1, [r7, #28]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f8b3 	bl	8002798 <RTC_WriteAlarmCounter>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2204      	movs	r2, #4
 800263c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e006      	b.n	8002656 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}

0800265e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e01d      	b.n	80026b0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0208 	bic.w	r2, r2, #8
 8002682:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002684:	f7fe fc60 	bl	8000f48 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800268a:	e009      	b.n	80026a0 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800268c:	f7fe fc5c 	bl	8000f48 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800269a:	d901      	bls.n	80026a0 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e007      	b.n	80026b0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ee      	beq.n	800268c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	827b      	strh	r3, [r7, #18]
 80026c4:	2300      	movs	r3, #0
 80026c6:	823b      	strh	r3, [r7, #16]
 80026c8:	2300      	movs	r3, #0
 80026ca:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80026e8:	8a7a      	ldrh	r2, [r7, #18]
 80026ea:	8a3b      	ldrh	r3, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d008      	beq.n	8002702 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80026f0:	8a3b      	ldrh	r3, [r7, #16]
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e004      	b.n	800270c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002702:	8a7b      	ldrh	r3, [r7, #18]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800270c:	697b      	ldr	r3, [r7, #20]
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f85d 	bl	80027e6 <RTC_EnterInitMode>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e011      	b.n	800275c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	0c12      	lsrs	r2, r2, #16
 8002740:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	b292      	uxth	r2, r2
 800274a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f872 	bl	8002836 <RTC_ExitInitMode>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	81fb      	strh	r3, [r7, #14]
 8002772:	2300      	movs	r3, #0
 8002774:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	89bb      	ldrh	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f81d 	bl	80027e6 <RTC_EnterInitMode>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e011      	b.n	80027dc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	0c12      	lsrs	r2, r2, #16
 80027c0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	b292      	uxth	r2, r2
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f832 	bl	8002836 <RTC_ExitInitMode>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80027f2:	f7fe fba9 	bl	8000f48 <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027f8:	e009      	b.n	800280e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027fa:	f7fe fba5 	bl	8000f48 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002808:	d901      	bls.n	800280e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e00f      	b.n	800282e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0210 	orr.w	r2, r2, #16
 800282a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0210 	bic.w	r2, r2, #16
 8002850:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002852:	f7fe fb79 	bl	8000f48 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002858:	e009      	b.n	800286e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800285a:	f7fe fb75 	bl	8000f48 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002868:	d901      	bls.n	800286e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e007      	b.n	800287e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002894:	e005      	b.n	80028a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3301      	adds	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	3b0a      	subs	r3, #10
 80028a0:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d8f6      	bhi.n	8002896 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	b2db      	uxtb	r3, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7bdb      	ldrb	r3, [r3, #15]
 8002918:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7b5b      	ldrb	r3, [r3, #13]
 800291e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7b9b      	ldrb	r3, [r3, #14]
 8002924:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	e06f      	b.n	8002a0c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d011      	beq.n	8002956 <RTC_DateUpdate+0x5c>
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d00e      	beq.n	8002956 <RTC_DateUpdate+0x5c>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d00b      	beq.n	8002956 <RTC_DateUpdate+0x5c>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b07      	cmp	r3, #7
 8002942:	d008      	beq.n	8002956 <RTC_DateUpdate+0x5c>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d005      	beq.n	8002956 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d002      	beq.n	8002956 <RTC_DateUpdate+0x5c>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d117      	bne.n	8002986 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b1e      	cmp	r3, #30
 800295a:	d803      	bhi.n	8002964 <RTC_DateUpdate+0x6a>
      {
        day++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002962:	e050      	b.n	8002a06 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d005      	beq.n	8002976 <RTC_DateUpdate+0x7c>
        {
          month++;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002970:	2301      	movs	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002974:	e047      	b.n	8002a06 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002976:	2301      	movs	r3, #1
 8002978:	613b      	str	r3, [r7, #16]
          day = 1U;
 800297a:	2301      	movs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
          year++;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002984:	e03f      	b.n	8002a06 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d008      	beq.n	800299e <RTC_DateUpdate+0xa4>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d005      	beq.n	800299e <RTC_DateUpdate+0xa4>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b09      	cmp	r3, #9
 8002996:	d002      	beq.n	800299e <RTC_DateUpdate+0xa4>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0b      	cmp	r3, #11
 800299c:	d10c      	bne.n	80029b8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b1d      	cmp	r3, #29
 80029a2:	d803      	bhi.n	80029ac <RTC_DateUpdate+0xb2>
      {
        day++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80029aa:	e02c      	b.n	8002a06 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3301      	adds	r3, #1
 80029b0:	613b      	str	r3, [r7, #16]
        day = 1U;
 80029b2:	2301      	movs	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80029b6:	e026      	b.n	8002a06 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d123      	bne.n	8002a06 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b1b      	cmp	r3, #27
 80029c2:	d803      	bhi.n	80029cc <RTC_DateUpdate+0xd2>
      {
        day++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e01c      	b.n	8002a06 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b1c      	cmp	r3, #28
 80029d0:	d111      	bne.n	80029f6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f838 	bl	8002a4c <RTC_IsLeapYear>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <RTC_DateUpdate+0xf0>
        {
          day++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e00d      	b.n	8002a06 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3301      	adds	r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
          day = 1U;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e007      	b.n	8002a06 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b1d      	cmp	r3, #29
 80029fa:	d104      	bne.n	8002a06 <RTC_DateUpdate+0x10c>
      {
        month++;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	3301      	adds	r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002a02:	2301      	movs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d38b      	bcc.n	800292c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f000 f83a 	bl	8002ab0 <RTC_WeekDayNum>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	731a      	strb	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e01d      	b.n	8002aa2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4a10      	ldr	r2, [pc, #64]	; (8002aac <RTC_IsLeapYear+0x60>)
 8002a6a:	fba2 1203 	umull	r1, r2, r2, r3
 8002a6e:	0952      	lsrs	r2, r2, #5
 8002a70:	2164      	movs	r1, #100	; 0x64
 8002a72:	fb01 f202 	mul.w	r2, r1, r2
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00f      	b.n	8002aa2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <RTC_IsLeapYear+0x60>)
 8002a86:	fba2 1203 	umull	r1, r2, r2, r3
 8002a8a:	09d2      	lsrs	r2, r2, #7
 8002a8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a90:	fb01 f202 	mul.w	r2, r1, r2
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002aa0:	2300      	movs	r3, #0
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	51eb851f 	.word	0x51eb851f

08002ab0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	4613      	mov	r3, r2
 8002abe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ace:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d82d      	bhi.n	8002b32 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <RTC_WeekDayNum+0xe4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	085a      	lsrs	r2, r3, #1
 8002aea:	78bb      	ldrb	r3, [r7, #2]
 8002aec:	441a      	add	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	441a      	add	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4926      	ldr	r1, [pc, #152]	; (8002b98 <RTC_WeekDayNum+0xe8>)
 8002b00:	fba1 1303 	umull	r1, r3, r1, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4922      	ldr	r1, [pc, #136]	; (8002b98 <RTC_WeekDayNum+0xe8>)
 8002b0e:	fba1 1303 	umull	r1, r3, r1, r3
 8002b12:	09db      	lsrs	r3, r3, #7
 8002b14:	4413      	add	r3, r2
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <RTC_WeekDayNum+0xec>)
 8002b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1e:	1ad1      	subs	r1, r2, r3
 8002b20:	0849      	lsrs	r1, r1, #1
 8002b22:	440b      	add	r3, r1
 8002b24:	0899      	lsrs	r1, r3, #2
 8002b26:	460b      	mov	r3, r1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a5b      	subs	r3, r3, r1
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e029      	b.n	8002b86 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <RTC_WeekDayNum+0xe4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	085a      	lsrs	r2, r3, #1
 8002b46:	78bb      	ldrb	r3, [r7, #2]
 8002b48:	441a      	add	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	441a      	add	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4910      	ldr	r1, [pc, #64]	; (8002b98 <RTC_WeekDayNum+0xe8>)
 8002b58:	fba1 1303 	umull	r1, r3, r1, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	1ad2      	subs	r2, r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	490d      	ldr	r1, [pc, #52]	; (8002b98 <RTC_WeekDayNum+0xe8>)
 8002b64:	fba1 1303 	umull	r1, r3, r1, r3
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	4413      	add	r3, r2
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <RTC_WeekDayNum+0xec>)
 8002b70:	fba3 1302 	umull	r1, r3, r3, r2
 8002b74:	1ad1      	subs	r1, r2, r3
 8002b76:	0849      	lsrs	r1, r1, #1
 8002b78:	440b      	add	r3, r1
 8002b7a:	0899      	lsrs	r1, r3, #2
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a5b      	subs	r3, r3, r1
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	b2db      	uxtb	r3, r3
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	38e38e39 	.word	0x38e38e39
 8002b98:	51eb851f 	.word	0x51eb851f
 8002b9c:	24924925 	.word	0x24924925

08002ba0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_RTCEx_BKUPWrite+0x30>)
 8002bb2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4413      	add	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	40006c00 	.word	0x40006c00

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2600      	movs	r6, #0
 8002be8:	4d0c      	ldr	r5, [pc, #48]	; (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f81a 	bl	8002c2c <_init>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4d0a      	ldr	r5, [pc, #40]	; (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002cac 	.word	0x08002cac
 8002c20:	08002cac 	.word	0x08002cac
 8002c24:	08002cac 	.word	0x08002cac
 8002c28:	08002cb0 	.word	0x08002cb0

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
